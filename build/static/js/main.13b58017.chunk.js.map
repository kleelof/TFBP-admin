{"version":3,"sources":["assets/loader.gif","store/store.ts","models/ModelBase.ts","store/auth/authReducer.ts","models/UserModel.ts","store/auth/authActions.ts","config.js","services/axiosApi.ts","components/menu/MenuItems.tsx","services/Service.ts","services/AuthService.ts","components/nav/Navigation.tsx","services/DeliveryDayService.ts","models/DeliveryDayModel.ts","helpers/MomentHelper.ts","helpers/helpers.ts","components/delivery/DeliveryDays.tsx","components/delivery/Deliveries.tsx","services/MenuItemService.ts","services/DeliveryDayItemService.ts","components/widgets/inputWidget/InputWidget.tsx","components/widgets/searchWidget/SearchWidget.tsx","models/MenuItemModel.ts","models/DeliveryDayItemModel.ts","components/delivery/DeliveryMenuItemOptionsComponent.tsx","components/delivery/DeliveryDayItemComponent.tsx","components/delivery/DeliveryDayComponent.tsx","components/menu/MenuItemEdit.tsx","components/widgets/imageUploader/ImageUploader.tsx","components/overlays/LoadingOverlay.tsx","components/nav/SubNavigation.tsx","components/menu/NewMenuItem.tsx","components/menu/Menu.tsx","components/authentication/Login.tsx","services/OrderService.ts","components/order/Orders.tsx","services/OrderItemService.ts","components/order/Export.tsx","models/OrderModel.ts","services/AdminService.ts","components/order/OrderEmail.tsx","components/order/OrderEdit.tsx","models/Coupon.ts","services/CouponService.ts","components/coupon/CouponComponent.tsx","components/coupon/Coupons.tsx","components/delivery/DeliveryDuplicate.tsx","components/coupon/CouponAdd.tsx","components/mail/MailUtilities.tsx","services/MailingListService.ts","components/mail/MailingList.tsx","services/MailTemplateService.ts","models/MailTemplate.ts","components/mail/MailTemplateComponent.tsx","components/mail/MailTemplates.tsx","services/DeliveryWindowService.ts","models/DeliveryWindowModel.ts","components/mail/MailMassMailer.tsx","components/mail/Mail.tsx","services/NewsletterService.ts","components/newsletter/NewslettersNewsletter.tsx","models/Newsletter.ts","components/newsletter/NewsletterAdd.tsx","components/newsletter/Newsletters.tsx","components/newsletter/NewsletterEdit.tsx","components/home/Home.tsx","constants.ts","components/browser_tool/BrowserDay.tsx","components/browser_tool/BrowserTool.tsx","components/browser_tool/BrowserWindowTools.tsx","components/browser_tool/BrowserFullDay.tsx","components/delivery_windows/DeliveryWindows.tsx","components/delivery_windows/DeliveryWindowEdit.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","actions","ModelBase","id","created_at","defaultState","loggedIn","user","email","operator_token","rootReducer","combineReducers","authReducer","state","action","type","LOGIN","LOGOUT","window","localStorage","removeItem","store","createStore","applyMiddleware","thunk","dispatchLogin","dispatch","login","dispatchLogout","config","API_URL","OPERATOR_TOKEN","axiosInstance","axios","create","baseURL","timeout","headers","getItem","interceptors","response","use","a","error","originalRequest","status","refresh_token","post","refresh","setItem","data","access","defaults","console","log","Promise","reject","ItemsModes","Service","_service_url","appName","view","path","resolve","get","then","resp","catch","err","content","patch","delete","this","DTO","useFormData","multipartFormPost","_post","_delete","params","_get","querizeObject","date","startDate","endDate","formData","FormData","Object","keys","forEach","key","append","_patch","search","object","map","join","multipartFormUpdate","authenticate","password","logout","viewPath","validateToken","refreshToken","Navigation","doLogin","props","to","className","data-toggle","data-target","aria-controls","aria-expanded","aria-label","auth","onClick","setState","React","Component","connect","bindActionCreators","attachDeliveryWindow","day","detachDeliveryWindow","duplicateDeliveryDay","deliveryDay","start_date","end_date","weekID","menuItemID","attach","DeliveryDay","day_items","asFullDate","moment","utc","format","asDateSlug","days","months","spicy","proteins","convertToTwelveHour","twentyFourHourTime","parts","split","hour","parseInt","amPm","toString","extractCartItemDescription","cartItem","description","menu_item","name","protein","length","formatDeliveryWindow","excludeDate","windowText","momentHelper","start_time","end_time","sortOrderItemsByDate","orderItems","sortedItems","item","cart_item","delivery_date","push","sortDeliveryDayItemsByCategory","items","en","ap","si","de","category","groupMenuItemsByCategory","sort","groupedItems","compareMenuItemsByName","ia","ib","DeliveryDays","history","useHistory","helpers","src","image","alt","pathname","Deliveries","loaded","deliveryDays","creatingDeliveryDay","editId","componentDidMount","deliveryDayService","Date","alert","createDeliveryDay","add","updateData","e","target","value","deliveries","b","disabled","onChange","loadByCategory","InputWidget","timer","lastSavedValue","componentWillReceiveProps","initialValue","handleOnKeyPress","keyCode","sendUpdate","updateValue","resetTimer","defaultUpdateValue","onUpdate","clearInterval","clearTimeout","setTimeout","onBlur","onKeyDown","required","placeholder","SearchWidget","onclick","event","close","itemSelected","doSearch","text","service","MenuItem","price","allergens","active","DeliveryDayItemDTO","delivery_day","sold_out","DeliveryDayItem","getDTOxxx","DeliveryMenuItemOptions","remove","confirm","saving","deliveryDayItemService","deliveryDayItem","refreshItems","save","update","parseFloat","checked","DeliveryDayItemComponent","indexOf","DeliveryDayComponent","loading","menuItems","deliveryWindows","match","refreshDay","menuItemService","ItemModes","MenuItems","useParams","useState","setMenuItems","useEffect","toLowerCase","ImageUploader","fileElement","reloadAttempted","imageURL","loadImage","componentDidUpdate","clearImage","preventDefault","hasImage","newImageLoaded","url","toDataURL","document","getElementById","loadingImage","onInputChanged","files","readFile","file","size","maxSizeInMb","maximumSizeInMb","result","currentImage","dataURL","open","click","reader","FileReader","onload","replace","readAsDataURL","xhr","XMLHttpRequest","onloadend","responseType","send","ref","input","accept","allowedFileTypes","uploadPrompt","LoadingOverlay","loadingAnimation","MenuItemEdit","temporaryImage","menuItem","viewingServings","hasBeenUpdated","allergenSelected","checkboxesToString","code","splice","final","substr","onNewImageLoaded","proteinSelected","menuItemDTO","itemAdded","updateMenuItem","updateOptions","saveBtnDisabled","mode","rows","defaultValue","allergen","SubNavigation","navItems","link","title","NewMenuItem","setName","setCategory","setOpen","newMenuItem","Menu","Math","random","component","MenuEdit","Login","loggingIn","authService","dto","href","getCompletedOrders","Orders","orders","orderStatuses","getByDateRange","orderService","searchByOrderDateRange","undefined","order","index","deliveryDates","orderItem","quantity","contact_name","public_id","phone_number","order_status","getCompleted","Export","pullDate","pullType","loadData","loadOrderItems","loadOrders","orderItemService","print","fileContent","filter","street_address","unit","city","zip","bb","Blob","createElement","download","URL","createObjectURL","DeliveryTagsDisplay","notes","PrepDisplay","condensedList","dish","spicy_text","dishCount","count","Order","uuid","nonce","tip","square_payment","OrderDTO","cart_items","coupon","sendWeeklyEmails","sendSupportEmail","subject","body","payload","sendMassMail","options","send_email","OrderEmail","submit","submitting","adminService","include_order","toggleIncludeOrder","OrderEdit","updating","updatesPending","returnToOrders","saveUpdates","orderedItems","htmlFor","JSON","stringify","Coupon","calculation_type","expire","start_value","current_value","remaining_uses","expire_date","setDate","getDate","CouponComponent","setCoupon","deactivating","setDeactivating","couponService","couponUpdated","toFixed","Coupons","coupons","addingCoupon","c","addCoupon","DeliveryDuplicate","duplicating","datesAreValid","duplicate","CouponAdd","cancel","finally","MailUtilities","runningRemoteFunction","doFunction","send_count","MailingList","mailingListService","mailingList","get_template_by_slug","slug","MailTemplate","MailTemplateComponent","template","templateSlug","mailTemplateService","originalText","MailTemplates","listWithCounts","targetDate","retrieveOrders","deliveryWindowId","DeliveryWindow","one_off_date","MailMassMailer","who","message","deliveryDate","includeSamples","all","deliveryWindowService","values","deliveryWindow","option","goodToSend","sendMail","confirmMessage","Mail","release","newsletterId","sendEmailSample","NewslettersNewsletter","newsletter","release_date","Newsletter","NewsletterAdd","creating","newsletterService","newsLetter","withRouter","Newsletters","newsLetters","setNewsLetters","setLoading","newsletters","NewsletterEdit","saveNewsletter","nl","sendTestEmail","sendingEmail","saveDisabled","Home","pythonDays","BrowserDay","countsData","setCountsData","toISOString","slice","order_count","dish_count","BrowserTool","month","year","viewDay","changeMonth","getMonth","getFullYear","week","daysInMonth","dateNdx","getDay","weeks","x","BrowserWindowTools","downloadDeliverySpreadsheet","y","printDocument","showLoading","target_date","BrowserFullDay","counts","documentToPrint","m","zoneName","goBack","DeliveryWindows","setShowLoading","setDeliveryWindows","DeliveryWindowEdit","App","connecting","PrivateRoute","rest","render","Boolean","location","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13b58017.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.9a2c42ba.gif\";","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\n\nimport { AuthActionTypes } from './auth/authActions';\nimport { authReducer } from './auth/authReducer';\n\nexport enum actions {\n    LOGIN,\n    LOGOUT\n};\n\nexport type AppActions = AuthActionTypes;\n\nexport const rootReducer = combineReducers({authReducer});\n\nexport type AppState = ReturnType<typeof rootReducer>; \n\nexport const store = createStore(\n    rootReducer,\n    applyMiddleware( \n        thunk as ThunkMiddleware<AppState, AppActions>)\n)","export default class ModelBase {\n\n    public id: number = -1;\n    public created_at!: string;\n    \n}","import { AuthActionTypes } from \"./authActions\";\nimport User from \"../../models/UserModel\";\nimport { actions } from \"../store\";\n\nexport interface AuthState {\n    loggedIn: boolean\n    user: User,\n    operator_token: string\n}\n\nconst defaultState: AuthState = {\n    loggedIn: false,\n    user: new User(),\n    operator_token: ''\n}\n\nconst authReducer = (\n    state = defaultState,\n    action: AuthActionTypes\n): AuthState => {\n    switch(action.type) {\n        case actions.LOGIN:\n            state.user = action.user\n            state.operator_token = action.operator_token\n            state.loggedIn = true;\n            return {...state};\n    \n        case actions.LOGOUT:\n            state.loggedIn = false;\n            window.localStorage.removeItem('access_token');\n            window.localStorage.removeItem('refresh_token');\n            return {...state};\n    }\n    return state;\n}\n\nexport { authReducer };","import ModelBase from \"./ModelBase\";\n\nexport default class User extends ModelBase {\n\n    email!: string;\n}","import { actions } from '../store';\nimport { Dispatch } from 'react';\nimport User from '../../models/UserModel';\n\ninterface Login { type: typeof actions.LOGIN, user: User, operator_token: string };\nexport const login = (user: User, operator_token: string): AuthActionTypes => ({ type: actions.LOGIN, user, operator_token });\nexport const dispatchLogin = (user: User, operator_token: string) => {\n    return(dispatch: Dispatch<AuthActionTypes>) => {\n        dispatch(login(user, operator_token));\n    }\n}\n\ninterface Logout { type: typeof actions.LOGOUT };\nexport const logout = (): AuthActionTypes => ({ type: actions.LOGOUT });\nexport const dispatchLogout = () => {\n    return(dispatch: Dispatch<AuthActionTypes>) => {\n        dispatch(logout());\n    }\n}\n\nexport type AuthActionTypes = Login | Logout;\n","const dev = {\n    API_URL: \"http://localhost:8000\",\n    OPERATOR_TOKEN: '8efedf49-db0e-4afe-9a96-2989fe599220'\n}\n\nconst prod = {\n    API_URL: \"\",\n    OPERATOR_TOKEN: '8500f3e1-0282-4d09-a752-6756d188f584'\n}\n\nexport const config = process.env.NODE_ENV === 'development' ? dev : prod;","import axios from 'axios';\nimport { config } from '../config';\n\nconst axiosInstance = axios.create({\n    baseURL: config.API_URL,\n    timeout: 0,\n    headers: {\n        'Authorization': \"JWT \" + window.localStorage.getItem('access_token'),\n        'Content-Type': 'application/json',\n        'accept': 'application/json',\n        'operator-token': window.localStorage.getItem('operator_token')\n    }\n});\n\naxiosInstance.interceptors.response.use(\n    response => response,\n    async error => {\n      const originalRequest = error.config;\n        if (error.response.status === 401) { // && error.response.statusText === \"Unauthorized\"\n            const refresh_token = window.localStorage.getItem('refresh_token');\n            try {\n                const response = await axiosInstance.post('/api/core/auth/token/refresh/', { refresh: refresh_token });\n                window.localStorage.setItem('access_token', response.data.access);\n                window.localStorage.setItem('refresh_token', response.data.refresh);\n                axiosInstance.defaults.headers['Authorization'] = \"JWT \" + response.data.access;\n                originalRequest.headers['Authorization'] = \"JWT \" + response.data.access;\n                return axiosInstance(originalRequest);\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n      return Promise.reject(error);\n  }\n);\nexport default axiosInstance","import React, { useEffect, useState } from 'react';\nimport MenuItem from '../../models/MenuItemModel';\nimport { useParams, Link } from 'react-router-dom';\nimport menuItemService from '../../services/MenuItemService';\nimport {config} from '../../config';\n\nexport const MenuItemCategories: any = {\n    en: 'Entrees',\n    ap: 'Appetizers',\n    si: 'Sides',\n    de: 'Desserts'\n}\n\nexport enum ItemsModes {\n    menu,\n    deliveryDay\n}\n\nexport const MenuItems = (): React.ReactElement => {\n    const params: any = useParams();\n    const [menuItems, setMenuItems] = useState<MenuItem[]>([])\n\n    useEffect(() => {\n        menuItemService.loadByCategory(params.category)\n            .then((items: MenuItem[]) => {\n                setMenuItems(items);\n            })\n            .catch( err => {window.alert('Unable To Load Menu Items')})\n        return () => {\n        }\n    }, [params.category])\n\n    const sortedItems: MenuItem[] = menuItems.sort((a: MenuItem, b: MenuItem) => a.name > b.name ? 1 : -1);\n    \n    return(\n        <div className=\"row menu_items mt-3\">\n            {\n                sortedItems.sort((a: MenuItem, b: MenuItem) =>\n                                    a.name.toLowerCase() > b.name.toLowerCase() ?\n                                        1 : a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 0 )\n                            .map((item: MenuItem) => {\n                    return(\n                        <div className=\"col-12 col-md-3 menu_items__item\" key={`mi_${item.id}`}>\n                            <Link className=\"row\" to={`/dashboard/menu/edit/${item.id}/`}>\n                                    <div className=\"col-12 item__item_name\">{item.name}</div>\n                                    <div className=\"col-12 item__item_image\">\n                                        <img src={config.API_URL + item.image} alt={item.name}/>\n                                    </div>\n                            </Link>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}","import { config } from '../config.js';\nimport axiosInstance from './axiosApi';\n\ninterface AxiosResponse {\n    data: any\n}\n\nexport default class Service {\n    protected _service_url: string = config.API_URL;\n    protected appName: string = \"\";\n    protected view: string = \"\";\n\n    public get viewPath(): string {\n        return `${this.appName}/${this.view}`;\n    }\n\n    public _get<T>(path: string): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            axiosInstance.get(`${this._service_url}/api/${path}`)\n                .then ((resp: AxiosResponse) => {\n                    resolve(resp.data);\n                })\n                .catch( err => reject(err))\n        })\n    }\n\n    public _post<T>(path: string, content: any, headers?: any): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            axiosInstance.post(`${this._service_url}/api/${path}`, content, headers)\n                .then((resp:AxiosResponse) => {\n                    resolve(resp.data);\n                })\n                .catch( err => reject(err))\n        })\n    }\n\n    public _patch<T>(path: string, content: any, headers?: any): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            axiosInstance.patch(`${this._service_url}/api/${path}`, content, headers)\n                .then((resp: AxiosResponse) => {\n                    resolve(resp.data)\n                })\n                .catch( err => reject(err));\n        })\n    }\n\n    public _delete<T>(path: string): Promise<T> {\n        return axiosInstance.delete(`${this._service_url}/${path}`)\n    }\n\n    public add<T>(DTO: T, useFormData: boolean = false): Promise<T> {\n        if (useFormData){\n            return this.multipartFormPost<T>(DTO);\n        } else {\n            return this._post<T>(`${this.appName}/${this.view}/`, DTO);\n        }\n    }\n\n    public delete<T>(id: number): Promise<T> {\n        return this._delete<T>(`${this.appName}/${this.view}/${id}/`);\n    }\n\n    public get<T>(id: number | null = null, params: {} = {}): Promise<T> {\n        if (id !== null) {\n            return this._get(`${this.appName}/${this.view}/${id}/${this.querizeObject(params)}`);\n        } else {\n            return this._get(`${this.appName}/${this.view}/?${this.querizeObject(params)}`);\n        }\n    }\n\n    public getByDate<T>(date: string): Promise<T> {\n        return this._get<T>(`${this.appName}/${this.view}/get_by_date/?date=${date}`);\n    }\n\n    public getByDateRange<T>(startDate?: string, endDate?: string): Promise<T> {\n        let path: string = `${this.appName}/${this.view}/get_by_date_range/?`;\n        if (startDate) path += `start_date=${startDate}&`;\n        if (endDate) path += `end_date=${endDate}`; \n        return this._get<T>(path);\n    }\n\n    public multipartFormPost<T>(content: any): Promise<T> {\n        const formData: FormData = new FormData();\n        Object.keys(content).forEach( key => {\n            formData.append(key, content[key]);\n        })\n        console.log(formData);\n        return this._post<T>(`${this.appName}/${this.view}/`, formData, {headers: {'Content-Type': 'multipart/form-data'}});\n    }\n\n    public multipartFormUpdate<T>(id: number, content: any): Promise<T> {\n        const formData: FormData = new FormData();\n        Object.keys(content).forEach( key => {\n            formData.append(key, content[key]);\n        })\n        console.log(formData);\n        return this._patch<T>(`${this.appName}/${this.view}/${id}/`, formData, {headers: {'Content-Type': 'multipart/form-data'}});\n    }\n\n    public search<T>(search: String): Promise<T> {\n        return this._get(`${this.appName}/${this.view}/?search=${search}`);\n    }\n\n    private querizeObject(object: any): String {\n        return Object.keys(object).map(key => key + '=' + object[key]).join('&')\n    }\n\n    public softDelete<T>(id: number): Promise<T> {\n        return this._get(`${this.appName}/${this.view}/soft_delete/${id}/`);\n    }\n\n    public update<T>(id: number, DTO: T, useFormData:boolean = false): Promise<T> {\n        if (useFormData){\n            return this.multipartFormUpdate<T>(id, DTO);\n        } else {\n            return this._patch<T>(`${this.appName}/${this.view}/${id}/`, DTO);\n        }\n    }\n}","import Service from \"./Service\";\n\nimport AuthenticateDTO from \"../dto/AuthenticateDTO\";\nimport User from \"../models/UserModel\";\n\nclass AuthService extends Service {\n    appName = 'core';\n    view = 'auth';\n\n    public authenticate = (email: string, password: string): Promise<AuthenticateDTO> => {\n        this.logout();\n        \n        return new Promise<AuthenticateDTO>((resolve, reject) => {\n            this._post(`${this.viewPath}/authenticate/`, {email, password})\n            .then( (resp: any) => {console.log(resp);\n                if (resp.operator_token !== null) {\n                    window.localStorage.setItem('access_token', resp.access);\n                    window.localStorage.setItem('refresh_token', resp.refresh);\n                    window.localStorage.setItem('operator_token', resp.operator_token)\n                    resolve(resp);\n                } else {\n                    reject (resp);\n                }\n            })\n            .catch( (resp: any) => reject(resp))\n        })\n    }\n\n    public logout = (): void => {\n        window.localStorage.removeItem('access_token');\n        window.localStorage.removeItem('refresh_token');\n        window.localStorage.removeItem('user_id');\n        window.localStorage.removeItem('username');\n    }\n\n    public validateToken = (refreshToken: string): Promise<User> => {\n        return new Promise<User>((resolve, reject) => {\n            this._get<User>(`${this.viewPath}/user`)\n            .then((user: User) => {\n                resolve(user);\n            })\n            .catch( err => reject(err))\n        })\n    }\n}\n\nexport default new AuthService();","import React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport { AuthState } from '../../store/auth/authReducer';\nimport { AppState, AppActions } from '../../store/store';\nimport { dispatchLogout } from '../../store/auth/authActions';\n\ninterface LinkStateProps {\n    auth: AuthState\n}\n\ninterface LinkDispatchProps {\n    logout: () => void;\n}\n\ntype Props = LinkStateProps & LinkDispatchProps\n\ninterface State {\n    doLogin: boolean\n}\n\nclass Navigation extends React.Component<Props, State> {\n\n    state = {\n        doLogin: false\n    }\n\n    private logout = (): void => {\n        this.props.logout();\n    }\n\n    public render() {\n        if (this.state.doLogin) return <Redirect to=\"/dashboard/login\" />\n\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            <Link className=\"nav-link\" to=\"/dashboard/browser\">\n                                Home</Link>\n                        </li>\n                        <li className=\"nav-item active\">\n                            <Link className=\"nav-link\" to=\"/dashboard/menu/en\">\n                                Menu</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/dashboard/deliveries\">\n                                Delivery Days</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/dashboard/delivery_window\">\n                                Delivery Windows</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/dashboard/coupons\">\n                                    Coupons</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/dashboard/mail\">\n                                    Mail</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/dashboard/newsletter\">\n                                    Newsletters</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to='/dashboard/orders'>Orders</Link>\n                        </li>\n                    </ul>\n                </div>\n                <span className=\"navbar-text\">\n                    {\n                        this.props.auth.loggedIn ?\n                            <button className=\"btn btn-danger\" onClick={this.logout}>Logout</button>\n                            :\n                            <div \n                                className=\"btn btn-success\"\n                                onClick={() => this.setState({doLogin: true})}\n                                >Login</div>\n                    }\n                </span> \n            </nav>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppState): LinkStateProps => ({\n    auth: state.authReducer\n})\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AppActions>): LinkDispatchProps => ({\n    logout: bindActionCreators(dispatchLogout, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation) ","import Service from './Service';\nimport WeekMenuItemDTO from '../dto/WeekMenuItemDTO';\nimport DeliveryDay from '../models/DeliveryDayModel';\nimport DeliveryWindow from '../models/DeliveryWindowModel';\n\nclass DeliveryDayService extends Service {\n    appName = \"dashboard\";\n    view = \"delivery_day\";\n\n    public attachWeekMenuItem(weekID: number, menuItemID: number, attach: boolean = true): Promise<WeekMenuItemDTO> {\n        console.log(weekID, menuItemID);\n        return this._get<WeekMenuItemDTO>(`${this.appName}/${this.view}/attach_week_menu_item?week=${weekID}/${menuItemID}/${attach === true? '1': '0'}`)\n    }\n\n    public attachDeliveryWindow = (day: DeliveryDay, window: DeliveryWindow): Promise<any> => {\n        return this._get(`${this.appName}/${this.view}/attach_delivery_window/${day.id}/${window.id}/`)\n    }\n\n    public detachDeliveryWindow = (day: DeliveryDay, window: DeliveryWindow): Promise<any> => {\n        return this._get(`${this.appName}/${this.view}/detach_delivery_window/${day.id}/${window.id}/`)\n    }\n\n    public duplicateDeliveryDay = (deliveryDay: DeliveryDay, start_date: string, end_date: string): Promise<DeliveryDay> => {\n        return this._get<DeliveryDay>(`${this.appName}/${this.view}/duplicate/?date=${start_date}&end_date=${end_date}&delivery_day=${deliveryDay.id}`);\n    }\n}\n\nexport default new DeliveryDayService();","import DeliveryDayItem from \"./DeliveryDayItemModel\";\nimport ModelBase from \"./ModelBase\";\nimport { DeliveryWindowDTO } from \"./DeliveryWindowModel\";\n\nexport default class DeliveryDay extends ModelBase {\n\n    public date!: string;\n    public end_date!: string;\n    public day_items!: DeliveryDayItem[];\n    //public delivery_windows!: DeliveryWindow[];\n\n    constructor(date?: string, id?: number, end_date?: string, day_items?: DeliveryDayItem[]) {\n        super();\n\n        this.id = id || -1;\n        this.date = date || '';\n        this.end_date = end_date || '';\n        this.day_items = day_items || []\n    }\n}\n\nexport class DeliveryDayDTO  {\n    public delivery_day: DeliveryDay = new DeliveryDay();\n    public windows: DeliveryWindowDTO[] = [];\n};\n\nexport type DeliveryDaysDTO = {zip_valid: boolean, delivery_days: DeliveryDay[]} ","import moment from 'moment';\n\nclass MomentHelper {\n\n    public asFullDate = (date: any): string => {\n        return moment(date).utc().format('dddd MMMM D, YYYY');\n    }\n\n    public asDateSlug = (date: any): string => {\n        return moment(date).utc().format('YYYY-MM-DD');\n    }\n}\n\nexport default new MomentHelper();","import OrderItem from \"../models/OrderItemModel\";\nimport DeliveryDayItem from \"../models/DeliveryDayItemModel\";\nimport CartItem from \"../models/CartItemModel\";\nimport MenuItem from \"../models/MenuItemModel\";\nimport {DeliveryWindowDTO} from \"../models/DeliveryWindowModel\";\nimport momentHelper from './MomentHelper';\n\nexport type OrderedItems = {[key: string]: any[]};\n\nclass Helpers { \n\n    private days: string[] = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    private months: string[] = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    private spicy: string[] = [\"not spicy\", \"mild spicy\", \"spicy\"];\n    private proteins: {[key: string]: string} = {\n        'pork': 'Pork',\n        'chicken': 'Chicken',\n        'beef' : ' Beef',\n        'tofu' : ' Tofu',\n        'veg' : 'Vegetable',\n        'vekan' : 'Vegan',\n        'shrimp' : 'Shrimp'\n    };\n\n    public convertToTwelveHour = (twentyFourHourTime: string): string => {\n        let parts: string[] = twentyFourHourTime.split(':');\n        let hour: number = parseInt(parts[0]);\n        let amPm: string = ' am';\n        if (hour > 11) {\n            amPm = ' pm';\n            hour -= hour > 12 ? 12 : 0;\n        }\n\n        if (hour === 0) hour = 12;\n\n        return `${hour.toString()}:${parts[1]}${amPm}`;\n    }\n\n     /*\n        Returns a string ex; Pad-Tai with Chicken, mild spicy\n    */\n    public extractCartItemDescription = (cartItem: CartItem): string => {\n        let description: string = cartItem.menu_item.name;\n        description += cartItem.protein === null || cartItem.protein === \"\" || cartItem.menu_item.proteins.split(':').length < 2 ?\n                    \"\" : \n                    cartItem.protein === 'vekan' ?\n                    ' vegan' : ` with ${this.proteins[cartItem.protein]}`\n\n        description += cartItem.menu_item.spicy === true ?\n        `, ${this.spicy[cartItem.spicy]}` : \"\"\n\n        return description;\n    }\n\n    public formatDeliveryWindow = (window: DeliveryWindowDTO, excludeDate: boolean = false, splitLines: boolean = false): string => {\n        let windowText: string = excludeDate ? \"\" :\n            `${momentHelper.asFullDate(window.date)} ${window.window.start_time !== window.window.end_time ? 'between ' : 'at '}`;\n\n        windowText += this.convertToTwelveHour(window.window.start_time);\n\n        return windowText += window.window.start_time !== window.window.end_time ?\n                ` and ${this.convertToTwelveHour(window.window.end_time)}` : ''\n    }\n\n\n    /*\n        Returns AA of orderItems sorted by their delivery dates\n        The correct date order in the AA is not guaranteed. Use .keys(AA).sort() when iterrating.\n    */\n\n    public sortOrderItemsByDate = (orderItems: OrderItem[]): OrderedItems => {\n        let sortedItems: OrderedItems = {};\n        orderItems.forEach((item: OrderItem) => {\n            if (!(item.cart_item.delivery_date in sortedItems))\n                sortedItems[item.cart_item.delivery_date] = [];\n\n            sortedItems[item.cart_item.delivery_date].push(item);\n        })\n\n        return  sortedItems;\n    }\n\n    public sortDeliveryDayItemsByCategory = (items: DeliveryDayItem[]): DeliveryDayItem[] => {\n        let sortedItems: OrderedItems = {\n            en: [],\n            ap: [],\n            si: [],\n            de: [],\n        };\n        if (items) items.forEach((item: DeliveryDayItem) => sortedItems[item.menu_item.category].push(item))\n        return [...sortedItems['en'], ...sortedItems['ap'], ...sortedItems['si'], ...sortedItems['de']];\n    }\n\n    public groupMenuItemsByCategory = (items: MenuItem[], sort: boolean = true): OrderedItems => {\n        let groupedItems: OrderedItems = {\n            en: [],\n            ap: [],\n            si: [],\n            de: [],\n        };\n        items.forEach((item: MenuItem) => groupedItems[item.category].push(item));\n\n        if (sort) {//TODO: Add sorting\n            groupedItems['en'].sort(this.compareMenuItemsByName)\n        }\n        return groupedItems;\n    }\n\n    private compareMenuItemsByName(ia: MenuItem, ib: MenuItem) {\n        if (ia.name < ib.name) return -1;\n        if (ib.name < ia.name) return 1;\n        return 0\n    }\n}\n\nexport default new Helpers();","import React from 'react';\nimport DeliveryDay from '../../models/DeliveryDayModel';\nimport momentHelper from '../../helpers/MomentHelper';\nimport helpers from '../../helpers/helpers';\nimport DeliveryDayItem from '../../models/DeliveryDayItemModel';\nimport { config } from '../../config';\nimport { useHistory } from 'react-router-dom';\n\nimport './delivery.scss';\n\ninterface Props {\n    deliveryDay: DeliveryDay\n}\n\nexport const DeliveryDays = (props: Props): React.ReactElement => {\n    const history = useHistory();\n\n    return(\n        <div className=\"row delivery_days\" key={`days_${props.deliveryDay.id}`}>\n            <div className=\"col-12 col-md-6 delivery_days__date\">\n                {momentHelper.asFullDate(props.deliveryDay.date)}\n            </div>\n            <div className=\"col-12 col-md-6 delivery_days__end_date\">\n                {momentHelper.asFullDate(props.deliveryDay.end_date)}\n            </div>\n            <div className=\"col-12\">\n                <div className=\"row\">\n                    {\n                        helpers.sortDeliveryDayItemsByCategory(props.deliveryDay.day_items).map((item: DeliveryDayItem) =>\n                                <div className=\"col-4 delivery_days_item\" key={`ddi_${item.id}`}>\n                                    <small>{item.menu_item.name}</small>\n                                    <div>\n                                        <img\n                                            src={`${config.API_URL + item.menu_item.image}`}\n                                            alt={item.menu_item.name} />\n                                    </div>\n                                </div>\n                        )\n                    }\n                </div>\n            </div>\n            <div className=\"col-12 text-center mt-3\">\n                <button\n                    className=\"btn btn-success\"\n                    onClick={()=> {history.push({pathname: `/dashboard/delivery/edit/${props.deliveryDay.id}/`})}}>\n                        Edit\n                    </button>\n                <button\n                    className=\"btn btn-warning ml-2\"\n                    onClick={()=> {history.push({pathname: `/dashboard/delivery/duplicate/${props.deliveryDay.id}`})}}>\n                        Duplicate\n                    </button>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport {format} from 'date-fns';\nimport deliveryDayService from '../../services/DeliveryDayService';\n\nimport './delivery.scss';\nimport { Redirect } from 'react-router-dom';\nimport DeliveryDay from '../../models/DeliveryDayModel';\n\nimport { DeliveryDays } from './DeliveryDays';\n\ninterface State {\n    loaded: boolean,\n    deliveryDays: DeliveryDay[],\n    startDate: string,\n    endDate: string,\n    creatingDeliveryDay: boolean,\n    editId: number\n}\n\nexport default class Deliveries extends React.Component<any, State> {\n\n    state = {\n        loaded: false,\n        deliveryDays: [],\n        startDate: \"\",\n        endDate: \"\",\n        creatingDeliveryDay: false,\n        editId: 0\n    }\n\n    public componentDidMount = (): void => {\n        deliveryDayService.get<DeliveryDay[]>(null, {start_date: format(new Date(), 'yyyy-MM-dd')})\n            .then((deliveryDays: DeliveryDay[]) => this.setState({deliveryDays, loaded: true}))\n            .catch( err => window.alert(\"Unable to load weeks\"))\n    }\n\n    private createDeliveryDay = (): void => {\n        if (this.state.startDate > this.state.endDate) {\n            window.alert('End date must be after start date');\n            return;\n        }\n\n        this.setState({creatingDeliveryDay: true})\n        deliveryDayService.add<DeliveryDay>(new DeliveryDay(this.state.startDate, -1, this.state.endDate))\n            .then((deliveryDay: DeliveryDay) => {\n                this.setState({\n                    editId: deliveryDay.id, \n                    startDate: \"\",\n                    creatingDeliveryDay: false}) \n            }) \n            .catch( err => window.alert(\"Unable to create week\"))\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n         }  as Pick<State, keyof State>);\n    }\n\n    public render() {\n        if (!this.state.loaded)\n            return <div>Loading...</div> \n\n        if (this.state.editId !== 0)\n            return <Redirect to={`delivery/edit/${this.state.editId}`} />\n        \n        const deliveries: DeliveryDay[] = this.state.deliveryDays;\n        deliveries.sort((a,b) => (a.date > b.date) ? -1 : ((b.date > a.date) ? 1 : 0));\n\n        return(\n            <div className=\"row weeks\">\n                <div className=\"col-12\">\n                    <h5>Add A Delivery Menu:</h5>\n                    <input\n                        type=\"date\"\n                        id=\"startDate\"\n                        value={this.state.startDate}\n                        disabled={this.state.creatingDeliveryDay}\n                        onChange={this.updateData} />\n\n                    <input\n                        type=\"date\"\n                        id=\"endDate\"\n                        value={this.state.endDate}\n                        disabled={this.state.creatingDeliveryDay}\n                        onChange={this.updateData} />\n\n                    <button \n                        className=\"btn btn-success ml-2\"\n                        onClick={this.createDeliveryDay}\n                        disabled={this.state.creatingDeliveryDay}\n                        >Add</button> \n                    <hr/>\n                </div>\n                {\n                    deliveries.map((deliveryDay: DeliveryDay) =>\n                        <div className=\"col-12 col-md-6 deliveries__delivery_days\" key={`dd_${deliveryDay.id}`}>\n                            <DeliveryDays \n                                deliveryDay={deliveryDay}\n                                key={`dd_${deliveryDay.id}`}/>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}","import Service from './Service';\nimport MenuItem from '../models/MenuItemModel';\n\nclass MenuItemService extends Service {\n    appName = \"dashboard\";\n    view = \"menu_item\";\n\n    public loadByCategory = (category: string): Promise<MenuItem[]> => {\n        return this._get(`${this.appName}/${this.view}/?category=${category}`);\n    }\n}\n\nexport default new MenuItemService();","import Service from './Service';\n\nclass DeliveryDayItemService extends Service {\n    appName = \"dashboard\";\n    view = \"delivery_day_item\";\n}\n\nexport default new DeliveryDayItemService();","/*\n    Provides an INPUT field.\n    Provides updated text when:\n        The user has stopped typing for 750ms, hits 'ENTER' or the INPUT field loses focus\n        The text has changed since last time an update was sent\n    <InputWidget    initialValue: starting value\n                    defaultUpdateValue: if the INPUT field is empty, this value will be returned instead.\n                    onUpdate: callback when there is new text\n                    placeholder: text for PLACEHOLDER property on INPUT\n                    type: text | textarea\n    returns     id: value of ID sent through props\n                value: string\n */\n\nimport React, {Component} from 'react';\n\ninterface Props {\n    id: string,\n    type: string,\n    onUpdate: any,\n    required?: boolean,\n    initialValue?: any,\n    placeholder?: string,\n    defaultUpdateValue?: any\n}\n\ninterface State {\n    value: string\n}\n\n//todo: get type='number' to work\n\nexport default class InputWidget extends Component<Props, State> {\n    \n    private timer: any;\n    private lastSavedValue: string | null = null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            value: props.initialValue ? props.initialValue : \"\"\n        }\n\n        this.lastSavedValue = props.initialValue;\n    };\n\n    public componentWillReceiveProps = (props: Props) => {\n        if (props.initialValue !== this.props.initialValue) {\n            this.setState({value: props.initialValue});\n            this.lastSavedValue = props.initialValue\n        }\n    }\n\n    private handleOnKeyPress = (e: any) => {\n        if (e.keyCode === 13) this.sendUpdate();\n    };\n\n    private updateValue = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        this.setState({value: e.target.value});\n        this.resetTimer();\n    };\n\n    private sendUpdate = () => {\n        if (this.props.initialValue !== this.state.value) {\n            this.lastSavedValue = this.state.value;\n            let value = (this.props.defaultUpdateValue !== '' && this.props.initialValue === '') ?\n                this.props.defaultUpdateValue : this.state.value;\n            this.props.onUpdate(this.props.id, value);\n            clearInterval(this.timer);\n        }\n    };\n\n    private resetTimer = () => {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(this.sendUpdate, 750)\n    };\n\n    public render() {\n        if (this.props.type === 'textarea') {\n            return (\n                <div className={'row input_widget_textarea'}>\n                    <div className={'col-12'}>\n                        <textarea\n                            className = {'form-control iw'}\n                            id = {this.props.id}\n                            value = {this.state.value}\n                            onBlur = {() => this.sendUpdate()}\n                            onChange = {(e) =>this.updateValue(e)}\n                            onKeyDown = {(e) => this.handleOnKeyPress(e)}\n                            required = {(this.props.required)? this.props.required : false}\n                        />\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <div className={'row input_widget_input'}>\n                    <div className={'col-12'}>\n                        <input\n                            className={'form-control iw'}\n                            id={this.props.id}\n                            placeholder={this.props.placeholder}\n                            value={this.state.value}\n                            onBlur={() => this.sendUpdate()}\n                            onChange={(e) => this.updateValue(e)}\n                            onKeyDown={(e) => this.handleOnKeyPress(e)}/>\n                    </div>\n                </div>\n            )\n        }\n\n    }\n}","import React from 'react';\nimport InputWidget from '../inputWidget/InputWidget';\nimport Service from '../../../services/Service';\n\nimport {config} from '../../../config';\nimport './search_widget.scss';\n\ninterface Props {\n    service: Service,\n    itemSelected: (item: any) => void\n}\n\ninterface State {\n    items: any[]\n}\n\nexport default class SearchWidget extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n    \n        this.state = {\n            items: []\n        }  \n    }\n\n    public componentDidMount = (): void => {\n        window.onclick = function(event: any) {\n            this.close()\n        }\n    }\n\n    private itemSelected = (item: any): void => {\n        this.setState({items: []});\n        this.props.itemSelected(item);\n    }\n\n    private doSearch = (id: string, text: string): void => {\n        this.props.service.search<any[]>(text)\n            .then((items: any[]) => this.setState({items}))\n            .catch( err => {})\n    }\n\n    public render() {\n        return(\n            <div className=\"row search_widget\">\n                <div className=\"col-12\">\n                    <InputWidget\n                        id='search_widget__InputWidget'\n                        type=\"\"\n                        initialValue=''\n                        onUpdate={this.doSearch}\n                        placeholder='Enter Menu Item to Add'\n                        defaultUpdateValue={''}\n                    />\n                </div>\n                { this.state.items.length > 0 &&\n                    <div className=\"col-12 search_widget_results\">\n                        <div className=\"search_widget_results__content\">\n                            {\n                                this.state.items.map((item: any) => {\n                                    return(\n                                        <div className=\"row result\"\n                                            onClick={() => this.itemSelected(item)}>\n                                            <div className=\"col-9 result__name\">\n                                                {item.name}\n                                            </div>\n                                            <div className=\"col-3\">\n                                                <img src={config.API_URL + item.image} alt={item.name}/>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            }\n                        </div>\n                    </div>\n                }   \n            </div>\n        )\n    }\n}","import ModelBase from \"./ModelBase\";\n\nexport default class MenuItem {\n\n    public id!: number;\n    public name: string = \"\";\n    public description: string = \"\";\n    public proteins: string = \"\";\n    public allergens: string = \"\";\n    public price: number = 0;\n    public image: string = \"\";\n    public active!: boolean;\n    public spicy!: boolean;\n    public category: string = 'en';\n\n    constructor(\n        id: number = -1,\n        name: string = '',\n        description: string = '',\n        category: string = 'en',\n        price: number = 10,\n        proteins: string = \"\",\n        allergens: string = \"\",\n        spicy: boolean = false\n        ) \n        {\n            this.id = id;\n            this.name = name;\n            this.description = description;\n            this.category = category;\n            this.price = price;\n            this.proteins = proteins;\n            this.allergens = allergens;\n            this.spicy = spicy;\n        }\n}\n\nexport class MenuItemDTO {\n\n    public id!: number;\n    public name: string = \"\";\n    public description: string = \"\";\n    public proteins: string = \"\";\n    public allergens: string = \"\";\n    public price: number = 0;\n    public image!: File | string | null;\n    public active!: boolean;\n    public spicy: boolean = false;\n    public category: string = 'en';\n}","import ModelBase from './ModelBase';\nimport MenuItem from './MenuItemModel';\nimport DeliveryDay from './DeliveryDayModel';\n\nexport class DeliveryDayItemDTO extends ModelBase {\n    public sold_out: boolean = false;\n    public price: number = 0;\n    public menu_item!: number;\n    public delivery_day!: number;\n\n    constructor(delivery_day: number, menu_item: number, sold_out: boolean, price: number) {\n        super();\n        this.delivery_day = delivery_day;\n        this.menu_item = menu_item;\n        this.sold_out = sold_out;\n        this.price = price;\n    }\n}\n\nexport default class DeliveryDayItem extends ModelBase {\n\n    public sold_out: boolean = false;\n    public price: number = 0;\n    public menu_item!: MenuItem;\n    public delivery_day!: DeliveryDay;\n\n    constructor(delivery_day?: DeliveryDay, menu_item?: MenuItem, sold_out?: boolean, price?: number) {\n        super();\n\n        this.delivery_day = delivery_day || new DeliveryDay();\n        this.menu_item = menu_item || new MenuItem();\n        this.sold_out = sold_out || false;\n        this.price = price || 0;\n    }\n\n    public getDTOxxx = (): DeliveryDayItemDTO => {\n        return new DeliveryDayItemDTO(this.delivery_day.id, this.menu_item.id, this.sold_out, this.price);\n    }\n}","import React from 'react';\nimport deliveryDayItemService from '../../services/DeliveryDayItemService';\nimport DeliveryDayItem, { DeliveryDayItemDTO } from '../../models/DeliveryDayItemModel';\n\nimport './delivery.scss';\n\ninterface Props {\n    deliveryDayItem: DeliveryDayItem,\n    refreshItems: () => {}\n}\n\ninterface State {\n    deliveryDayItem: DeliveryDayItem,\n    saving: boolean,\n    active: boolean\n}\n\nexport default class DeliveryMenuItemOptions extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            deliveryDayItem: props.deliveryDayItem,\n            saving: false,\n            active: props.deliveryDayItem.id ? true : false \n        }\n    }\n\n    private remove = (): void => {\n        if (!window.confirm(\"Are you sure you want to remove this menu item?\")) return;\n\n        this.setState({saving: true});\n        deliveryDayItemService.delete(this.state.deliveryDayItem.id)\n            .then( resp => this.setState({\n                deliveryDayItem: new DeliveryDayItem(this.state.deliveryDayItem.delivery_day, this.state.deliveryDayItem.menu_item, false, 0),\n                active: false,\n                saving: false\n            }, () => this.props.refreshItems()))\n            .catch( resp => window.alert(\"Unable to deactivate\"));\n    }\n\n    private save = (): void => {\n        this.setState({saving: true});\n        deliveryDayItemService.update<DeliveryDayItem>(this.state.deliveryDayItem.id, this.state.deliveryDayItem)\n            .then((item: DeliveryDayItem) => this.setState({deliveryDayItem: item, saving: false}))\n            .catch( resp => window.alert(\"Unable to update\"))\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        let deliveryDayItem: DeliveryDayItem = this.state.deliveryDayItem\n        switch (e.target.id) {\n            case 'active': this.setState({active: !this.state.active}); break;\n            case 'sold_out': deliveryDayItem.sold_out = !deliveryDayItem.sold_out; break;\n            case 'price': deliveryDayItem.price = parseFloat(e.target.value)\n        }\n        this.setState({deliveryDayItem});\n    }\n\n    public render() {\n        return(\n            <div className=\"row delivery_item_options\">\n                <div className=\"col-12\"><hr/></div>\n                <div className=\"col-4\">\n                    <input\n                        type=\"number\"\n                        id=\"price\"\n                        value={this.state.deliveryDayItem.price}\n                        onChange={this.updateData}\n                        disabled={this.state.saving || !this.state.active}\n                        className=\"form-control delivery_item_options__price\"/>\n                </div>\n                <div className=\" col-8 mt-3\">\n                    <span className=\"mr-2\">Sold Out:</span>\n                    <input\n                        id=\"sold_out\"\n                        checked={this.state.deliveryDayItem.sold_out} \n                        onChange={this.updateData}\n                        disabled={this.state.saving || !this.state.active}\n                        type=\"checkbox\"/> \n                </div>\n                <div className=\"col-12 text-center mt-3\">\n                    <button \n                        className=\"btn btn-success\"\n                        disabled={this.state.saving || !this.state.active} \n                        onClick={this.save}\n                        >Save</button>\n\n                    <button\n                        className=\"btn btn-danger ml-3\"\n                        disabled={this.state.saving}\n                        onClick={this.remove}>\n                        Remove</button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport DeliveryDayItem from '../../models/DeliveryDayItemModel';\nimport {config} from '../../config';\nimport DeliveryDayItemOptionsComponent from './DeliveryMenuItemOptionsComponent';\n\ninterface Props {\n    item: DeliveryDayItem,\n    refreshItems: () => void\n}\n\nexport const DeliveryDayItemComponent = (props:Props) => {\n    return(\n        <div className=\"row delivery_day_item\">\n            <div className=\"col-12 delivery_day_item__name\">{props.item.menu_item.name}</div>\n            <div className=\"col-12\">\n                <img\n                    className={'delivery_day_item__img'}\n                    src={\n                        props.item.menu_item.image.indexOf('http') === -1 ?\n                        config.API_URL + props.item.menu_item.image : props.item.menu_item.image\n                    }\n                    alt={props.item.menu_item.name} />\n            </div>\n            <div className=\"col-12\">\n                <DeliveryDayItemOptionsComponent deliveryDayItem={props.item} refreshItems={async () => props.refreshItems()} />\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nimport {MenuItemDTO} from '../../models/MenuItemModel';\nimport DeliveryDay from '../../models/DeliveryDayModel';\nimport MenuItem from '../../models/MenuItemModel';\nimport menuItemService from '../../services/MenuItemService';\nimport deliveryDayItemService from '../../services/DeliveryDayItemService';\nimport deliveryDayService from '../../services/DeliveryDayService';\nimport momentHelper from '../../helpers/MomentHelper';\nimport DeliveryWindow from '../../models/DeliveryWindowModel';\nimport SearchWidget from '../widgets/searchWidget/SearchWidget';\nimport DeliveryDayItem, { DeliveryDayItemDTO } from '../../models/DeliveryDayItemModel';\nimport { DeliveryDayItemComponent } from './DeliveryDayItemComponent';\nimport './delivery.scss';\n\ninterface State {\n    loading: boolean,   //TODO: FINISH ADDING LOAD ALL MENU ITEMS, have MenuItems confirm if \n    menuItems: MenuItemDTO[],\n    deliveryDay: DeliveryDay,\n    deliveryWindows: DeliveryWindow[]\n}\n\nexport default class DeliveryDayComponent extends React.Component<any, State> {\n\n    state ={\n        loading: true,\n        menuItems: [],\n        deliveryDay: new DeliveryDay(\"\"),\n        deliveryWindows: []\n    }\n\n    public componentDidMount = (): void => {\n        const { match: { params } } = this.props;\n        this.refreshDay(params.id);\n    }\n\n    private itemSelected = (item: MenuItem) => {\n        deliveryDayItemService.add(new DeliveryDayItemDTO(this.state.deliveryDay.id, item.id, false, item.price))\n            .then((item: any) => {\n                const deliveryDay: DeliveryDay = this.state.deliveryDay;\n                deliveryDay.day_items.push(item);\n                this.setState({deliveryDay});\n                console.log(deliveryDay);\n            })\n            .catch( err => window.alert('unable to add menu item'))\n    }\n\n    private refreshDay = (id: number): void => {\n        deliveryDayService.get<DeliveryDay>(id)\n            .then((deliveryDay: DeliveryDay) => {\n                this.setState({deliveryDay, loading: false})\n            })\n            .catch( err => window.alert(\"Unable to load week\"))\n    }\n    \n    public render() {\n        if (this.state.loading)\n            return <div>Loading...</div>\n\n        return(\n            <div className=\"row delivery_day_component\">\n                <div className=\"col-12 col-md-6\">\n                    {momentHelper.asFullDate(this.state.deliveryDay.date)} - {momentHelper.asFullDate(this.state.deliveryDay.end_date)}\n                    <hr/>\n                </div>\n                <div className=\"col-12 col-md-6 delivery_day_component__search_widget\">\n                    <SearchWidget service={menuItemService} itemSelected={this.itemSelected} />\n                </div>\n                    {\n                        this.state.deliveryDay.day_items.map((item: DeliveryDayItem) => {\n                            return (\n                                <div className=\"col-12 col-md-3\" key={`dd_${item.id}`}>\n                                    <div className=\"row\">\n                                        <div className=\"col-12\">\n                                            <DeliveryDayItemComponent item={item} refreshItems={() => this.refreshDay(this.state.deliveryDay.id)}/>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport MenuItem, {MenuItemDTO} from '../../models/MenuItemModel';\nimport menuItemService from '../../services/MenuItemService';\nimport ImageUploader from '../widgets/imageUploader/ImageUploader';\n\nimport './edit_menu.scss';\nimport LoadingOverlay from '../overlays/LoadingOverlay';\n\ninterface State {\n    menuItem: MenuItemDTO,\n    loaded: boolean,\n    saving: boolean,\n    viewingServings: boolean,\n    hasBeenUpdated: boolean\n}\n\nexport enum ItemModes {\n    add,\n    edit,\n    view,\n    deliveryDay\n}\n\nexport default class MenuItemEdit extends React.Component<any, State> {\n\n    private temporaryImage: File | null = null;\n\n    state = {\n        menuItem: new MenuItem(),\n        loaded: false,\n        saving: false,\n        viewingServings: false,\n        hasBeenUpdated: false\n    } \n\n    private allergenSelected = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        let menuItem: MenuItemDTO = this.state.menuItem;\n        menuItem.allergens = this.checkboxesToString(menuItem.allergens, e.target.id)\n        this.setState({menuItem});\n    }\n\n    public componentDidMount = (): void => {\n        const { match: { params } } = this.props;\n\n        menuItemService.get<MenuItem>(params.id)\n            .then((menuItem: MenuItem) => {\n                this.setState({menuItem, loaded: true})\n            })\n            .catch( err => window.alert('Unable to load menu item'))\n    }\n\n    private checkboxesToString = (items: string, code: string): string => {\n        if (items === null) items= \"\";\n\n        let parts: string[] = items.split(':')\n        console.log(parts, items);\n        if (parts.indexOf(code) !== -1) {// delete if it exists\n            parts.splice(parts.indexOf(code), 1);\n        } else {\n            parts.push(code);\n        }\n\n        const final: string = parts.join(':');\n        return (final.substr(0, 1)) === ':' ? final.substr(1) : final;\n    }\n\n    private onNewImageLoaded = (file: File | null) => {\n        this.temporaryImage = file;\n\n        if (file === null){\n            let menuItem: MenuItemDTO = this.state.menuItem;\n            menuItem.image = null;\n            this.setState({menuItem});\n        }\n\n        this.setState({hasBeenUpdated: true});\n    }\n\n    private proteinSelected = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        let menuItem: MenuItemDTO = this.state.menuItem;\n        menuItem.proteins = this.checkboxesToString(menuItem.proteins, e.target.id);\n        this.setState({menuItem});\n    }\n\n    private save = (): void => {\n        this.setState({saving: true});\n        let menuItem: MenuItemDTO = this.state.menuItem;\n\n        if (this.temporaryImage){\n            menuItem.image = this.temporaryImage;\n        } else if (typeof menuItem.image === 'string') {\n            delete menuItem.image;\n        }\n         menuItemService.update<MenuItemDTO>(menuItem.id, menuItem, menuItem.image !== null && typeof menuItem.image !== 'string')\n                .then((menuItemDTO: MenuItemDTO) => {\n                    this.setState({\n                        menuItem: menuItem,\n                        saving: false,\n                        hasBeenUpdated: false\n                    });\n                    if (this.props.itemAdded) this.props.itemAdded(menuItemDTO);\n                })\n    }\n\n    private updateMenuItem = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>): void => {\n        let menuItem: any = this.state.menuItem;\n        menuItem[e.target.name] = e.target.value;\n        this.setState({menuItem});\n    }\n\n    private updateOptions = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        let menuItem: MenuItemDTO = this.state.menuItem;\n        switch(e.target.id) {\n            case 'spicy':\n                menuItem.spicy = !menuItem.spicy\n                this.setState({menuItem})\n                break;\n            case 'price':\n                menuItem.price = parseFloat(e.target.value);\n                this.setState({menuItem});\n                break;\n        }\n    }\n\n    public render() {//TODO: fix saveBtnDisabled\n\n        if (!this.state.loaded)\n            return <LoadingOverlay />\n\n        const saveBtnDisabled: boolean = this.state.saving || this.props.mode === ItemModes.view\n        const disabled: boolean = this.props.mode === ItemModes.view || this.props.mode === ItemModes.deliveryDay\n\n\n        const allergens: any[] = [\n            { name: 'Milk', code: 'milk' },\n            { name: 'Soy', code: 'soy'},\n            { name: 'Shellfish', code: 'shell'},\n            { name: 'Egg', code: 'egg'},\n            { name: 'Fish', code: 'fish'},\n            { name: 'Nuts', code: 'nuts'},\n            { name: 'Peanuts', code: 'peanut'},\n            { name: 'Wheat', code: 'wheat'}\n        ]\n\n        const proteins: any[] = [\n            { name: 'Pork', code: 'pork'},\n            { name: 'Chicken', code: 'chicken'},\n            { name: 'Beef', code: 'beef' },\n            { name: 'Tofu', code: 'tofu'},\n            { name: 'Veggie', code: 'veg'},\n            { name: 'Vegan', code: 'vekan'},\n            { name: 'Shrimp', code: 'shrimp'}\n        ]\n        \n        return (\n            <div className=\"row menuedititem mt-3\">\n                <div className=\"col-12 col-md-6 menuedititem__header\">\n                    \n                </div>\n                <div className=\"col-12 menuedititem__inner p-3\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-md-6\">\n                            <div className=\"row\">\n                                <div className=\"col-12 menuedititem__imagearea menuedititem__area\">\n                                    <ImageUploader\n                                        id={`image_uploader__menuItem-${this.state.menuItem.id}`}\n                                        imageURL={this.state.menuItem.image}\n                                        newImageLoaded={this.onNewImageLoaded}\n                                        maximumSizeInMb={100}\n                                        allowedFileTypes=\".jpg,.png,.jpeg\"\n                                        disabled={disabled}\n                                        />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-12 col-md-6\">\n                            <div className=\"row\">\n                                <div className=\"col-12 mt-1 mt-md-0\">\n                                    <input\n                                        id='menuedititem__name' \n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        placeholder=\"Meal Name\"\n                                        name=\"name\"\n                                        value={this.state.menuItem.name}\n                                        onChange={this.updateMenuItem}\n                                        disabled={disabled}\n                                        />\n                                </div>\n                                <div className=\"col-12 mt-1\">\n                                    <textarea \n                                        className=\"form-control\"\n                                        rows={2}\n                                        placeholder=\"Description\"\n                                        name=\"description\"\n                                        value={this.state.menuItem.description}\n                                        onChange={this.updateMenuItem}\n                                        disabled={disabled}\n                                        ></textarea>\n                                </div>\n                                <div className=\"col-12 mt-1\">\n                                    Category:\n                                    <select\n                                        name=\"category\"\n                                        className=\"form-control\"\n                                        defaultValue={this.state.menuItem.category}\n                                        disabled={disabled}\n                                        onChange={this.updateMenuItem}> \n                                        <option value=\"en\">Entree</option>\n                                        <option value=\"ap\">Apetizer</option>\n                                        <option value=\"si\">Side Item</option>\n                                        <option value=\"de\">Dessert</option>\n                                    </select>\n                                </div>\n                                <div className=\"col-12 mt-1\">\n                                    Price:\n                                    <input type=\"text\" name=\"price\" className=\"form-control\" value={this.state.menuItem.price}\n                                        disabled={disabled} onChange={this.updateMenuItem} />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-12\">\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <h3>Allergens:</h3>\n                                        {\n                                            allergens.map((allergen: any) => \n                                                {\n                                                    if (this.props.mode === ItemModes.deliveryDay){\n                                                        if (this.state.menuItem.allergens.length === 0)\n                                                            return <div className=\"checker-week\" key={`allergens_${allergen.code}`}>&nbsp;</div>\n\n                                                        if(this.state.menuItem.allergens.indexOf(allergen.code) !== -1){\n                                                            return (\n                                                                <div className=\"checker-week\" key={`allergens_${allergen.code}`}>\n                                                                    {allergen.name}\n                                                                </div>\n                                                            )\n                                                        } else {\n                                                            return null\n                                                        }\n                                                    }\n\n                                                    return( \n                                                        <div className=\"menuedititem__checker\" key={allergen.code}>\n                                                            <input\n                                                                type=\"checkbox\"\n                                                                id={allergen.code}\n                                                                checked={this.state.menuItem.allergens.indexOf(allergen.code) !== -1}\n                                                                disabled={this.props.mode === ItemModes.view}\n                                                                onChange={this.allergenSelected}/>\n                                                            <span>{allergen.name}</span>\n                                                        </div>\n                                                    ) }\n                                            )\n                                        }\n                                </div>\n                                <div className=\"col-12\">\n                                    <h3>Proteins:</h3>\n                                        {\n                                            proteins.map((protein: any) => {\n                                                if (this.props.mode === ItemModes.deliveryDay){\n                                                    if (this.state.menuItem.proteins.length === 0)\n                                                        return <div className=\"checker-week\" key={`proteins_${protein.code}`}>&nbsp;</div>\n\n                                                    if(this.state.menuItem.proteins.indexOf(protein.code) !== -1){\n                                                        return (\n                                                            <div className=\"checker-week\" key={`proteins_${protein.code}`}>\n                                                                {protein.name}\n                                                            </div>\n                                                        )\n                                                    } else {\n                                                        return null\n                                                    }\n                                                }\n\n                                                return(\n                                                    <div className=\"menuedititem__checker\" key={protein.code}>\n                                                        <input\n                                                            type=\"checkbox\"\n                                                            id={protein.code}\n                                                            checked={this.state.menuItem.proteins.indexOf(protein.code) > -1}\n                                                            disabled={this.props.mode === ItemModes.view}\n                                                            onChange={this.proteinSelected}/>\n                                                        <span>{protein.name}</span>\n                                                    </div>\n                                                )} \n                                            )\n                                        }\n                                </div>\n                                <div className=\"col-12\">\n                                    {\n                                        this.props.mode === ItemModes.deliveryDay ?\n                                            this.state.menuItem.spicy ?\n                                                <div className=\"menuedititem__checker_week\">Spicy</div>\n                                                :\n                                                <div className=\"menuedititem__checker_week\">Not Spicy</div>\n                                            :\n                                                <div className=\"menuedititem__checker\">\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        id=\"spicy\"\n                                                        checked={this.state.menuItem.spicy}\n                                                        disabled={this.props.mode === ItemModes.view}\n                                                        onChange={this.updateOptions}\n                                                        />\n                                                        <span>Spicy</span>\n                                                </div>\n\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-12 menuedititem__controls_area menuedititem__area text-center mt-2\">\n                            <hr/>\n                            <button \n                                className=\"btn btn-success\"\n                                disabled={saveBtnDisabled} \n                                onClick={this.save}\n                                >Save</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport './image_uploader.scss';\n\ninterface Props {\n    id: string;\n    imageURL: string; \n    newImageLoaded(file: File | null): void;\n    uploadPrompt?: string,\n    allowedFileTypes?: string,\n    maximumSizeInMb?: number,\n    disabled?: boolean\n}\n\ninterface State {\n    hasImage: boolean,\n    currentImage: File | null,\n    loadingImage: boolean\n}\n\nexport default class ImageUploader extends React.Component<Props, State> {\n\n    private fileElement: HTMLInputElement | null = null;\n    private reloadAttempted: boolean = true;\n\n    constructor(props: Props) {\n        super(props);\n        \n        this.state = {\n            hasImage: props.imageURL !== \"\" && props.imageURL !== null ? true : false,\n            currentImage: null,\n            loadingImage: props.imageURL !== \"\" && props.imageURL !== null ? true : false\n        }\n    }\n\n    public componentDidMount = (): void => {\n        if (this.props.imageURL) {\n            this.loadImage(this.props.imageURL);\n        }\n    }\n\n    public componentDidUpdate = (props: Props): void => {\n    }\n\n    private toDataURL(url: any): Promise<string> {\n\n        return new Promise((resolve, reject) => {\n            var xhr = new XMLHttpRequest();\n            xhr.onload = function() {\n                if (xhr.response.type !== \"text/html\") {\n                    var reader = new FileReader();\n                    reader.onloadend = function() {\n                        resolve(reader.result?.toString());\n                    }\n                    reader.readAsDataURL(xhr.response);\n                } else {\n                    reject();\n                } \n                \n            };\n            xhr.open('GET', url);\n            xhr.responseType = 'blob';\n            xhr.send();\n        })\n    }\n\n    private clearImage = (e: React.MouseEvent<HTMLElement>): void => {\n        if (this.props.disabled) return;\n\n        e.preventDefault();\n        this.setState({\n            hasImage: false\n        });\n\n        this.props.newImageLoaded(null);\n    }\n\n    private loadImage = (url: string): void => {\n        this.toDataURL(url)\n            .then( (data: string) => {\n                (window.document.getElementById(this.props.id) as HTMLImageElement).src=data;\n                this.setState({loadingImage: false})\n            })\n            .catch( err => {\n                window.setTimeout(()=>{\n                    if (this.reloadAttempted) {\n                        this.setState({\n                            loadingImage: false,\n                            hasImage: false\n                        })\n                    } else {\n                        this.reloadAttempted = true;\n                        this.loadImage(url);\n                    }\n                }, 3000);\n            })\n    }\n\n    private onInputChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            this.readFile(e.target.files[0])\n            .then((resp: any) => {\n                console.log(resp.file.size);\n                const maxSizeInMb: number = this.props.maximumSizeInMb ? this.props.maximumSizeInMb : 2;\n                if (resp.file.size > maxSizeInMb * 1048576) {\n                    window.alert(`Maximum File Size is ${maxSizeInMb}Mb`);\n                    return;\n                } else {\n                    (window.document.getElementById(this.props.id) as HTMLImageElement).src=resp.result;\n                    this.setState({currentImage: resp.dataURL, hasImage: true})\n                    this.props.newImageLoaded(resp.file)\n                }\n                \n            }) \n        }\n    }\n\n    private open = () => {\n        if (!this.props.disabled)\n            this.fileElement?.click();\n    }\n\n    private readFile= (file: File) => {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = function (e: any) {\n                let dataURL = e.target.result;\n                dataURL = dataURL.replace(\";base64\", `;name=${file.name};base64`);\n                resolve({file, dataURL, result:e.target.result});\n            };\n          reader.readAsDataURL(file);\n        });\n    }\n\n    public render() {\n        return(\n            <div className={`image_uploader ${this.props.disabled ? '' : 'image_uploader--active'}`}>\n                <div \n                    className=\"inner\"\n                    onClick={this.open}\n                    > \n                    <img \n                        src={\"\"}\n                        alt=\"question\"\n                        id={this.props.id}\n                        className={this.state.hasImage? \"\" : \"hidden\"}\n                        />\n                    <input\n                        type=\"file\"\n                        id=\"xxx\"\n                        ref={input => this.fileElement = input}\n                        onChange={this.onInputChanged}\n                        accept={this.props.allowedFileTypes ? this.props.allowedFileTypes : \"\"}\n                    >\n                    </input>\n                    {(!this.state.hasImage && !this.props.disabled) &&\n                        <div className={`no-image image_uploader-overlay`}>\n                            <span>{ this.props.uploadPrompt || \"Click to  Upload Image\"}</span>\n                        </div>\n                    }\n                </div>\n                {(this.state.hasImage && !this.props.disabled) &&\n                    <div \n                        className=\"remove-btn\"\n                        onClick={this.clearImage}\n                        >X</div>\n                }\n                {this.state.loadingImage &&\n                    <div className=\"loading-image image_uploader-overlay\">\n                        <span>Loading Image...</span>\n                    </div>\n                }\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport loadingAnimation from '../../assets/loader.gif'\nimport './overlays.scss';\n\nexport default class LoadingOverlay extends React.Component<any, any> {\n\n    //TODO: Add ability to override CSS. ex; change BG color/transparency\n\n    public render() {\n        return(\n            <div className=\"loading-overlay\">\n                <img src={loadingAnimation} alt=\"loadingIcon\"/>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './navigation.scss';\n\nexport type NavItem = {title: string, link: string}\n\ninterface Props {\n    navItems: NavItem[]\n}\n\nexport const SubNavigation = (props: Props): React.ReactElement => {\n    return(\n            <div className=\"col-12 subnav\">\n                {\n                    props.navItems.map((item: NavItem) => {\n                        return(\n                            <Link className=\"subnav__item\" to={item.link} key={item.title}>\n                                {item.title}\n                            </Link>\n                        )\n                    })\n                }\n            </div>\n    )\n}","import React, { Fragment, useEffect } from 'react';\nimport { useState } from 'react';\n\nimport './menu.scss';\nimport { useHistory } from 'react-router-dom';\nimport menuItemService from '../../services/MenuItemService';\nimport MenuItem from '../../models/MenuItemModel';\n\nexport const NewMenuItem = (): React.ReactElement => {\n    const [name, setName] = useState<string>('');\n    const [category, setCategory] = useState<string>('en');\n    const [open, setOpen] = useState<boolean>(false);\n\n    const history = useHistory();\n\n    const createNewMenuItem = (): void => {\n        menuItemService.add<MenuItem>({name, category} as any)\n            .then((newMenuItem: MenuItem) => {\n                history.push({pathname: `/dashboard/menu/edit/${newMenuItem.id}/`});\n                setName('');\n                setCategory('en');\n            })\n            .catch( err => window.alert('unable to add new menu item'))\n    }\n\n    return(\n        <div className=\"row new_menu_item mt-3\">\n            {\n                open === false ?\n                    <div className=\"col-12 new_menu_item__add_link\" onClick={()=> setOpen(true)}>\n                        + Add New Item\n                    </div>\n                    :\n                    <Fragment>\n                        <div className=\"col-12\">\n                            <input type=\"text\" className=\"form-control\" id='new_menu_item__name'\n                                value={name} placeholder='New Menu Item Name'\n                                onChange={(e: any)=> setName(e.target.value)}/>\n                        </div>\n                        <div className=\"col-12 mt-1\">\n                            <select className=\"form-control\" defaultValue={category}\n                                onChange={(e) => setCategory(e.target.value)}>\n                                <option value=\"en\">Entree</option>\n                                <option value=\"ap\">Appetizer</option>\n                                <option value=\"si\">Side Item</option>\n                                <option value=\"de\">Dessert</option>\n                            </select>\n                        </div>\n                        <div className=\"col-12 mt-1 text-center\">\n                            <button className=\"btn btn-success new_menu_item__submit\"\n                                disabled={name === \"\"} onClick={()=> createNewMenuItem()}>\n                                Add New Item</button>\n                        </div>\n                    </Fragment>\n            }\n        </div>\n    )\n}","import React from 'react';\nimport MenuItem, {MenuItemDTO} from '../../models/MenuItemModel'; \nimport menuItemService from '../../services/MenuItemService';\nimport LoadingOverlay from '../overlays/LoadingOverlay';\nimport { Switch, Route } from 'react-router-dom';\nimport { MenuItems } from './MenuItems';\nimport MenuEdit from './MenuItemEdit';\nimport {SubNavigation, NavItem} from '../nav/SubNavigation';\nimport { NewMenuItem } from './NewMenuItem'; \n\ninterface State {\n    menuItems: MenuItemDTO[],\n    loaded: boolean\n}\n\nexport default class Menu extends React.Component<any, State> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            menuItems: [],\n            loaded: false\n        }\n    }\n\n    public componentDidMount = (): void => {\n        menuItemService.get<MenuItemDTO[]>()\n            .then((menuItems: MenuItemDTO[]) => {\n                this.setState({menuItems, loaded: true})\n            })\n            .catch( err => {\n                window.alert(`Unable to load Menu Items: ${err}`);\n            })\n    }\n\n    public render() {\n        const navItems: NavItem[] = [\n            {title: 'Entrees', link:'/dashboard/menu/en'},\n            {title: 'Appitizers', link:'/dashboard/menu/ap'},\n            {title: 'Sides', link:'/dashboard/menu/si'},\n            {title: 'Desserts', link:'/dashboard/menu/de'}\n        ]\n\n        return(\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <SubNavigation navItems={navItems} />\n                </div>\n                <div className=\"col-12 col-md-5\">\n                    <NewMenuItem key={Math.random().toString()}/>\n                </div>\n                <div className=\"col-12\">\n                    <Switch>\n                        <Route path=\"/dashboard/menu/edit/:id/\" component={MenuEdit} />\n                        <Route path=\"/dashboard/menu/:category/\" component={MenuItems} />\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport './authentication.css';\nimport authService from '../../services/AuthService';\nimport { Redirect } from 'react-router-dom';\nimport User from '../../models/UserModel';\nimport AuthenticateDTO from '../../dto/AuthenticateDTO';\nimport { AppActions, AppState } from '../../store/store';\nimport { dispatchLogin } from '../../store/auth/authActions';\nimport { AuthState } from '../../store/auth/authReducer';\n\ninterface LinkStateProps {\n    auth: AuthState\n}\n\ninterface LinkDispatchProps {\n    login: (user: User, operator_token: string) => void\n}\n\ntype Props = LinkStateProps & LinkDispatchProps\n\ninterface State {\n    email: string,\n    password: string,\n    loggingIn: boolean\n}\n\nclass Login extends React.Component<Props, State> {\n\n    state = {\n        email: \"\",\n        password: \"\",\n        loggingIn: false\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n         }  as Pick<State, keyof State>);\n    }\n\n    private login = (): void => {\n        if (this.state.email === \"\" || this.state.password === \"\") return;\n\n        authService.authenticate(this.state.email, this.state.password)\n            .then( (dto: AuthenticateDTO) => {\n                this.props.login(dto.user, dto.operator_token);\n            })\n            .catch((err: any) => {\n                window.alert(\"Invalid Credentials\");\n            });\n    }\n\n    public render() {\n        if (this.props.auth.loggedIn) \n            return <Redirect to=\"/dashboard/menu\" />\n        \n        return(\n            <div className=\"row justify-content-center\" id=\"login-panel\">\n                <div className=\"class-12 class-md-6\">\n                    <div className=\"wrapper fadeInDown\">\n                        <div id=\"formContent\">\n                            <div className=\"fadeIn first\">\n                                <h5>Welcome to the Operator Dashboard!</h5>\n                            </div>\n\n                            <form>\n                                <input\n                                    type=\"text\"\n                                    className=\"fadeIn second\"\n                                    id=\"email\"\n                                    placeholder=\"email\"\n                                    value={this.state.email}\n                                    onChange={this.updateData}\n                                    />\n                                <input\n                                    type=\"password\" \n                                    className=\"fadeIn third\"\n                                    id=\"password\"\n                                    placeholder=\"password\"\n                                    value={this.state.password}\n                                    onChange={this.updateData}\n                                    />\n                                <input \n                                    type=\"button\"\n                                    className=\"fadeIn fourth\"\n                                    value=\"Log In\"\n                                    onClick={this.login}\n                                    />\n                            </form>\n\n                            <div id=\"formFooter\">\n                                <a className=\"underlineHover\" href=\"/\">Forgot Password?</a>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppState): LinkStateProps => ({auth: state.authReducer})\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AppActions>): LinkDispatchProps => ({\n    login: bindActionCreators(dispatchLogin, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","import Service from './Service';\nimport Order from '../models/OrderModel';\n\nclass OrderService extends Service {\n    appName=\"dashboard\";\n    view=\"order\";\n\n    public getCompletedOrders = (date: string): Promise<Order[]> => {\n        return this._get<Order[]>(`${this.appName}/${this.view}/get_completed/?date=${date}`);\n    }\n}\n\nexport default new OrderService();","import React, { Fragment } from 'react';\nimport Order from '../../models/OrderModel';\n\nimport orderService from '../../services/OrderService';\nimport OrderItem from '../../models/OrderItemModel';\nimport helpers from '../../helpers/helpers';\nimport momentHelper from '../../helpers/MomentHelper';\nimport { Redirect } from 'react-router-dom';\n\ninterface State {\n    loading: boolean,\n    orders: Order[],\n    editId: number,\n    startDate: string,\n    endDate: string\n}\n\nexport default class Orders extends React.Component<any, State> {\n\n    state = {\n        loading: false,\n        orders: [],\n        editId: 0,\n        startDate: '',\n        endDate: ''\n    }\n\n    private orderStatuses: string[] = ['canceled', 'pending', 'paid'];\n\n    public componentDidMount = (): void => {\n        this.getByDateRange();\n    }\n\n    private getByDateRange = (startDate?: string, endDate?: string): void => {\n        this.setState({loading: true});\n\n        orderService.get<Order[]>()\n            .then((orders: Order[]) => {\n                this.setState({orders, loading: false})\n            })\n    }\n\n    private searchByOrderDateRange = (): void => {\n        this.getByDateRange(this.state.startDate !== \"\" ? this.state.startDate : undefined, \n                                    this.state.endDate !== \"\" ? this.state.endDate : undefined)\n    }\n    \n    private updateData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n         }  as Pick<State, keyof State>);\n    }\n\n    public render() {\n        if (this.state.loading)\n            return <div>Loading...</div>\n\n        if (this.state.editId > 0)\n            return <Redirect to={`/dashboard/orders/edit/${this.state.editId}`} /> \n\n        return(\n            <div className=\"row orders\">\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-md-3\">\n                            Start Date: <input type=\"date\" id=\"startDate\" value={this.state.startDate} onChange={this.updateData}/>\n                        </div>\n                        <div className={'col-12 col-md-9'}>\n                            End Date: <input type=\"date\" id=\"endDate\" value={this.state.endDate} onChange={this.updateData} />\n                            &nbsp;&nbsp;\n                            <button className=\"btn btn-success\" onClick={this.searchByOrderDateRange}>Search</button>\n                        </div>\n                    </div>\n                    {\n                        this.state.orders.length === 0 ?\n                            <div>No Orders Found</div>\n                            :\n                            <table className={'table'}>\n                                <thead>\n                                    <tr>\n                                        <th>Name</th>\n                                        <th>Order ID</th>\n                                        <th>Contact</th>\n                                        <th>Date</th>\n                                        <th>Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        this.state.orders\n                                            .sort((a: Order, b: Order) => a.id > b.id ? -11 : a.id < b.id ? 1 : 0)\n                                            .map((order: Order, index: number) => {\n                                                let menuItemCount: number = 0;\n                                                let total: number = 0;\n                                                let deliveryDates: string[] = [];\n\n                                                order.items.forEach((orderItem: OrderItem) => {\n                                                    menuItemCount += orderItem.cart_item.quantity;\n                                                    total += orderItem.cart_item.quantity * orderItem.cart_item.price;\n                                                    if (deliveryDates.indexOf(orderItem.cart_item.delivery_date) === -1)\n                                                        deliveryDates.push(orderItem.cart_item.delivery_date);\n                                                })\n\n                                                return (\n                                                    <tr key={order.id} className={index % 2 ? '' : 'orders-line-highlight'}\n                                                        onClick={()=> this.setState({editId: order.id})}>\n                                                        <td>{order.contact_name}</td>\n                                                        <td>{order.public_id}</td>\n                                                        <td>{order.email}<br/>{order.phone_number}</td>\n                                                        <td>{momentHelper.asFullDate(order.created_at)}</td>\n\n                                                        <td className={`order-status-${order.order_status}`}>\n                                                            {this.orderStatuses[order.order_status]}\n                                                        </td>\n                                                    </tr>\n                                                )\n                                        })\n                                    }\n                                </tbody>\n                            </table>\n                    }\n                </div> \n            </div>\n        )\n    }\n}","import Service from './Service';\nimport OrderItem from '../models/OrderItemModel';\n\nclass OrderItemService extends Service{\n\n    appName = 'dashboard';\n    view = 'order_item';\n\n    public getCompleted = (date: string): Promise<OrderItem[]> => {\n        return this._get<OrderItem[]>(`${this.appName}/${this.view}/get_completed/?date=${date}`)\n    }\n}\n\nexport default new OrderItemService();","import React, { Fragment } from 'react';\n\nimport orderItemService from '../../services/OrderItemService';\nimport orderService from '../../services/OrderService';\nimport OrderItem from '../../models/OrderItemModel';\n\nimport './order.scss';\nimport Order from '../../models/OrderModel';\nimport helpers from '../../helpers/helpers';\n\ninterface State {\n    pullDate: string,\n    orderItems: OrderItem[],\n    pullType: string,\n    orders: Order[]\n}\n\nexport default class Export extends React.Component<any, State> {\n\n    state = {\n        pullDate: \"\",\n        orderItems: [],\n        pullType: \"route\",\n        orders: []\n    }\n\n    public componentDidMount = (): void => {\n        /*\n        orderItemService.getByDate('2020-06-16')\n            .then((prepListItems: OrderItem[]) => {\n                if (prepListItems.length === 0) {\n                    window.alert('There are not prep items for this day');\n                    return;\n                }\n                //this.setState({prepListItems})\n            })\n            .catch( err => window.alert('Unable to display prep list'));\n            */\n    }\n\n    private loadData = (): void => {\n        if (this.state.pullType === 'prep') {\n            this.loadOrderItems();\n        } else {\n            this.loadOrders();\n        }\n    }\n\n    private loadOrderItems = (): void => {\n        orderItemService.getCompleted(this.state.pullDate)\n            .then((orderItems: OrderItem[]) => {\n                if (orderItems.length === 0) {\n                    window.alert('There are not items for this day');\n                    return;\n                }\n                this.setState({orderItems}, ()=> window.print())\n            })\n            .catch( err => window.alert('Unable to display'));\n    }\n\n    private loadOrders = (): void => {\n        orderService.getCompletedOrders(this.state.pullDate)\n            .then((orders: Order[]) => {\n                if (orders.length === 0) {\n                    window.alert('There are not items for this day');\n                    return;\n                }\n\n                if (this.state.pullType === 'route') {\n                    let fileContent: string = \"Address line 1\\tAddress line 2\\tCity\\tState\\tZip\\tName\\tEmail Address\\tPhone Number\\tExternal ID\\tOrder Count\\tDriver\\n\";\n                    let orderItems: OrderItem[] = [];\n\n                    orders.forEach((order: Order) => {\n                        orderItems = order.items.filter((orderItem: OrderItem) => orderItem.cart_item.delivery_date === this.state.pullDate);\n                        if (orderItems.length > 0) {\n                            fileContent += `${order.street_address}\\t${order.unit}\\t${order.city}\\tCA\\t${order.zip}\\t${order.contact_name}\\t${order.email}\\t${order.phone_number}\\t${order.public_id}\\t${orderItems.length}\\tLee\\n`;\n                        }\n                    })\n                    \n                    var bb = new Blob([fileContent ], { type: 'text/plain' });\n                    var a = document.createElement('a');\n                    a.download = `delivery_route_${this.state.pullDate}.tsv`;\n                    a.href = window.URL.createObjectURL(bb);\n                    a.click();\n                } else {\n                    this.setState({orders},()=> window.print())\n                }\n            })\n            .catch( err => window.alert(err));\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n         }  as Pick<State, keyof State>);\n    }\n\n    public render() {\n        return(\n            <div className=\"row\">\n                <div className=\"col-12 col-md-6 export-panel\">\n                    <select id=\"pullType\" className=\"control-form\" onChange={this.updateData} defaultValue={this.state.pullType}>\n                        <option value=\"prep\">Prep List</option>\n                        <option value=\"delivery_tags\">Delivery Tags</option>\n                        <option value=\"route\">Route CSV</option>\n                    </select>\n                    <br/><br/>\n                    Select a date: \n                    <input type=\"date\" id=\"pullDate\" className=\"form-control\"\n                            value={this.state.pullDate} onChange={this.updateData}/>\n                    <button className=\"btn btn-success mt-2\" onClick={this.loadData}>Print</button>\n                </div>\n                {(this.state.orderItems.length + this.state.orders.length > 0) &&\n                    <div className=\"col-12 print-sheet\">\n                        {\n                            this.state.pullType === 'prep' ?\n                                <PrepDisplay orderItems={this.state.orderItems} date={this.state.pullDate} />\n                                :\n                                <DeliveryTagsDisplay orders={this.state.orders} date={this.state.pullDate} />\n                                    \n                        }\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nfunction DeliveryTagsDisplay(props: any) {\n    return (\n        <div className='delivery_tags_print'>\n            {\n                props.orders.map((order: Order) => {\n                    const orderItems: OrderItem[] = order.items.filter((orderItem: OrderItem) => orderItem.cart_item.delivery_date === props.date)\n                    \n                    return (\n                        <Fragment key={`order_${order.id}`}>\n                            <div className='quarter-page'>\n                                <span className=\"contact-info\">{order.contact_name}</span>\n                                <span className=\"street-address\">{order.street_address} {order.unit}</span>\n                                <span className=\"street-address\">{order.city} {order.zip}</span>\n                                <span className=\"contact-info\">{order.phone_number}</span>\n                                <b>Items:</b>\n                                <div className=\"delivery-tag-items\">\n                                    {\n                                        orderItems.map((orderItem: OrderItem) => {\n                                            return(\n                                                <div className=\"delivery-tag-item\" key={`oi_${orderItem.id}`}> \n                                                    {orderItem.cart_item.quantity.toString() + \" \" + helpers.extractCartItemDescription(orderItem.cart_item)}\n                                                </div>\n                                            )\n                                        })\n                                    }\n                                </div>\n                                {order.notes &&\n                                    <div className=\"delivery-instructions\">\n                                        <br/>\n                                        _______________________________\n                                        <h4>Delivery Instructions:</h4>\n                                        <div className=\"delivery_instructions_text\">\n                                            {order.notes}\n                                        </div>\n                                    </div>\n\n                                }\n                            </div>\n                        </Fragment>\n                    )\n                    })\n            }\n        </div>\n    )\n}\n\nfunction PrepDisplay(props: any) {\n\n    type CondenensedListItem = {count: number, dish: string, protein: string, spicy_text:string};\n\n    const spicy: string[] = ['No', 'mild', 'spicy'];\n    let condensedList: {[key: string]: CondenensedListItem} = {};\n    let key: string = \"\";\n    let dish: string = \"\";\n    let protein: string = \"\";\n    let spicy_text: string = \"\";\n    let dishCount: number = 0;\n\n    props.orderItems.forEach((orderItem: OrderItem) => {\n        dish = orderItem.cart_item.menu_item.name;\n        protein = (orderItem.cart_item.menu_item.proteins.split(':').length > 1 && orderItem.cart_item.protein !== \"\") ?\n                    orderItem.cart_item.protein : \"\";\n        spicy_text = (orderItem.cart_item.menu_item.spicy) ? spicy[orderItem.cart_item.spicy] : \"\";\n\n        key = `${dish}:${protein}:${spicy_text}`;\n        if (!(key in condensedList))\n            condensedList[key] = {count: 0, dish, protein, spicy_text};\n\n        condensedList[key].count += orderItem.cart_item.quantity;\n        dishCount += orderItem.cart_item.quantity; \n    });\n\n    return ( \n        <Fragment>\n            <span className='print-sheet-header'>{props.date} &nbsp;&nbsp;:&nbsp;&nbsp;{dishCount} items</span>\n            <table className='prep-sheet'> \n                <thead>\n                    <tr>\n                        <td>#</td>\n                        <td>Dish</td>\n                        <td>Protein</td>\n                        <td>Spicy</td>\n                        <td>L</td>\n                        <td>P</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        Object.keys(condensedList).sort().map((key: string, index: number) => {\n                            return (\n                                <tr className={`${index % 2 ? '' : 'print-row-dark'}`} key={key}>\n                                    <td>{condensedList[key].count}</td>\n                                    <td>{condensedList[key].dish}</td>\n                                    <td>{condensedList[key].protein}</td>\n                                    <td>{condensedList[key].spicy_text}</td>\n                                    <td></td>\n                                    <td></td>\n                                </tr> \n                            )\n                        })\n                    }\n                </tbody>\n            </table>\n        </Fragment>\n    )\n}","import ModelBase from \"./ModelBase\";\nimport CartItem from \"./CartItemModel\";\nimport OrderItem from \"./OrderItemModel\";\n\nexport default class Order extends ModelBase {\n\n    public order_status!: number;\n    public square_payment!: string;\n    public contact_name!: string;\n    public phone_number!: string;\n    public email!: string;\n    public unit!: string;\n    public street_address!: string;\n    public city!: string;\n    public zip!: string;\n    public notes!: string;\n    public items!: OrderItem[];\n    public uuid!: string;\n    public public_id!: string;\n    public nonce!: string;\n    public tip!:number;\n\n    constructor(\n        id: number = -1,\n        order_status: number = 0,\n        contact_name: string = '',\n        phone_number: string = '',\n        email: string = '',\n        unit: string = '',\n        street_address: string = '',\n        city: string = '',\n        zip: string = '',\n        notes: string = '',\n        items: OrderItem[] = [],\n        uuid: string = '',\n        public_id: string = '',\n        nonce: string = '',\n        tip: number = 0\n    ){\n        super();\n        this.id = id;\n        this.order_status = order_status;\n        this.contact_name = contact_name;\n        this.phone_number = phone_number;\n        this.email = email;\n        this.unit = unit;\n        this.street_address = street_address;\n        this.city = city;\n        this.zip = zip;\n        this.notes = notes;\n        this.items = items;\n        this.uuid = uuid;\n        this.public_id = public_id;\n        this.nonce = nonce;\n        this.tip = tip;\n    }\n}\n\nexport class OrderDTO extends ModelBase {\n\n    public order_status!: number;\n    public contact_name!: string;\n    public phone_number!: string;\n    public email!: string;\n    public unit!: string;\n    public street_address!: string;\n    public city!: string;\n    public zip!: string;\n    public cart_items!: number[];\n    public notes!: string;\n    public nonce!: string;\n    public tip!: number;\n    public coupon!: number;\n    \n    constructor(order: Order) {\n                    super();\n\n                    this.order_status = order.order_status;\n                    this.contact_name = order.contact_name;\n                    this.phone_number = order.phone_number;\n                    this.email = order.email;\n                    this.unit = order.unit;\n                    this.street_address = order.street_address;\n                    this.city = order.city;\n                    this.zip = order.zip;\n                    this.notes = order.notes;\n                    this.nonce = order.nonce;\n                    this.tip = order.tip;\n                    // this.coupon = order.coupon.id;\n                }\n}","import Service from './Service';\nimport FunctionsResponsesDTO from '../dto/FunctionsResponsesDTO';\nimport Order from \"../models/OrderModel\";\n\nclass AdminService extends Service {\n\n    public sendWeeklyEmails = (): Promise<FunctionsResponsesDTO> => {\n        return this._get(`dashboard/send_weekly_email/`);\n    }\n\n    public sendSupportEmail = (to: string, subject: string, body: string, order: Order | null = null): Promise<any> => {\n        let payload: any = {to, subject, body}\n\n        if (order !== null) payload['order_id'] = order.id\n\n        return this._post<any>('dashboard/send_support_email/', payload)\n    }\n\n    public sendMassMail = (body: string, options: any, send_email: boolean = false): Promise<any> => {\n        return this._post<any>('dashboard/send_mass_mail/',\n            {body: body, options: options, send_email: send_email});\n    }\n}\n\nexport default new AdminService();","import React from 'react';\nimport Order from \"../../models/OrderModel\";\nimport adminService from '../../services/AdminService';\n\ninterface Props {\n    order: Order\n}\n\ninterface State {\n    subject: string,\n    body: string,\n    include_order: boolean,\n    submitting: boolean\n}\n\nexport default class OrderEmail extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            subject: `Order ${props.order.public_id}`,\n            body: '',\n            include_order: true,\n            submitting: false\n        }\n    }\n\n    private submit = (): void => {\n        this.setState(({submitting: true}));\n\n        adminService.sendSupportEmail(\n            this.props.order.email,\n            this.state.subject,\n            this.state.body,\n            this.state.include_order ? this.props.order : null)\n            .then(() => {\n                window.alert('Email Sent');\n                this.setState({subject: '', body: '', include_order: true})\n            })\n            .catch( err => window.alert('unable to send email'))\n            .then(() => this.setState({submitting: false}))\n    }\n\n    private toggleIncludeOrder = (): void => {console.log(this.state.include_order)\n        this.setState(({include_order: !this.state.include_order}));\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n        } as Pick<State, keyof State>);\n    }\n\n    public render() {\n        return (\n            <div className={`row order_email`}>\n                <div className={`col-12 col-md-6`}>\n                    <label>subject:</label>\n                    <input className={'form-control order_email__subject'} id={'subject'}\n                        value={this.state.subject} onChange={this.updateData} disabled={this.state.submitting}/>\n                </div>\n                <div className={'col-12 mt-3'}>\n                    <label>Message</label>\n                    <textarea className={'form-control order_email__body'} id={'body'} value={this.state.body}\n                        onChange={this.updateData} disabled={this.state.submitting} rows={8}/>\n                </div>\n                <div className={'col-12 mt-3'}>\n                    Include Order: &nbsp;&nbsp;\n                    <input className={'order_email__include_order'} type={'checkbox'} id={'include_order'} checked={this.state.include_order}\n                        onChange={this.toggleIncludeOrder} disabled={this.state.submitting}/>\n                </div>\n                <div className={'col-12 mt-3'}>\n                    <button\n                        className={'btn btn-success order_email__submit'}\n                        disabled={this.state.subject === '' || this.state.body === '' || this.state.submitting}\n                        onClick={this.submit}\n                        >Send Email</button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Order, { OrderDTO } from '../../models/OrderModel';\n\nimport orderService from '../../services/OrderService';\nimport OrderItem from '../../models/OrderItemModel';\nimport helpers, {OrderedItems} from '../../helpers/helpers';\nimport momentHelper from '../../helpers/MomentHelper';\nimport { Link, Redirect } from 'react-router-dom';\nimport OrderEmail from \"./OrderEmail\";\n\ninterface State {\n    loading: boolean,\n    order: Order,\n    updating: boolean,\n    updatesPending: boolean,\n    returnToOrders: boolean\n}\n\nexport default class OrderEdit extends React.Component<any, State> {\n\n    state = {\n        loading: true,\n        order: new Order(),\n        updating: false,\n        updatesPending: false,\n        returnToOrders: false\n    }\n\n    public componentDidMount = (): void => {\n        const { match: { params } } = this.props;\n\n        orderService.get<Order>(params.id)\n            .then((order: Order) => this.setState({order, loading: false}))\n            .catch( err => window.alert(err))\n    }\n\n    private saveUpdates = (): void => {\n        this.setState({updating: true});\n        orderService.update<any>(this.state.order.id, new OrderDTO(this.state.order))\n            .then((order: Order) => this.setState({order, updating: false, updatesPending: false, returnToOrders: true}))\n            .catch ( err => window.alert(err))\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>): void => {\n        let order: any = this.state.order;\n        order[e.target.id] = e.target.value;\n        this.setState({order, updatesPending: true})\n    }\n\n    public render() {\n        if (this.state.loading)\n            return <div>Loading...</div>\n\n        if (this.state.returnToOrders)\n            return <Redirect to=\"/dashboard/orders\" />\n\n        const orderedItems: OrderedItems = helpers.sortOrderItemsByDate(this.state.order.items);\n\n        return (\n            <div className=\"row edit_order\">\n                <div className=\"col-12\">\n                    <Link to={'/dashboard/orders'}>{`<<< Return to Orders`}</Link>\n                    <br/><br/>\n                </div>\n                <div className=\"col-12\">\n                    <h5>Order ID: {this.state.order.public_id}</h5>\n                    <select id=\"order_status\" defaultValue={this.state.order.order_status}\n                            className={`order_status order_status--${this.state.order.order_status}`}\n                            onChange={this.updateData} disabled={this.state.updating}>\n                        <option value=\"0\">Canceled</option>\n                        <option value=\"1\">Pending</option>\n                        <option value=\"2\">Paid</option>\n                    </select>\n                </div>\n                <div className=\"col-12 col-md-6\">\n                    <div className=\"form-group mt-2\">\n                        <label htmlFor=\"contact_name\">contact name</label>\n                        <input id=\"contact_name\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.contact_name} onChange={this.updateData}/>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"phone_number\">phone number</label>\n                        <input id=\"phone_number\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.phone_number} onChange={this.updateData}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"city\">city</label>\n                        <input id=\"city\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.city} onChange={this.updateData}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"zip\">zip</label>\n                        <input id=\"zip\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.zip} onChange={this.updateData}/>\n                    </div>\n                </div>\n                <div className=\"col-12 col-md-6\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"email\">email</label>\n                        <input id=\"email\" type=\"email\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.email} onChange={this.updateData}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"street_address\">Street Address</label>\n                        <input id=\"street_address\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.street_address} onChange={this.updateData}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"unit\">unit</label>\n                        <input id=\"unit\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.unit} onChange={this.updateData}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"notes\">delivery notes</label>\n                        <textarea id=\"notes\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.notes} onChange={this.updateData}/>\n                    </div>\n                </div>\n                <div className=\"col-2\">\n                    <pre>\n                        <code className=\"prettyprint\">\n                            {JSON.stringify(this.state.order.square_payment, null, 4)}\n                        </code>\n                    </pre>\n                </div>\n                <div className=\"col-12\">\n                    <button className=\"btn btn-success\" onClick={this.saveUpdates}\n                            disabled={!this.state.updatesPending || this.state.updating}>Save Updates</button>\n                </div>\n                <div className=\"col-12 edit_order_deliveries\">\n                    <hr/>\n                    <h5>Deliveries:</h5>\n                    {\n                        Object.keys(orderedItems).sort().map((key: string) => {\n                            return (\n                                <div className=\"row mt-3\">\n                                    <div className=\"col-12\">\n                                        <b>{momentHelper.asFullDate(key)}</b>\n                                        {\n                                            orderedItems[key].map((orderItem: OrderItem) =>\n                                                <div className=\"row\">\n                                                    <div className=\"col-12\">\n                                                        &nbsp;&nbsp;&nbsp;\n                                                        {orderItem.cart_item.quantity}\n                                                        &nbsp;\n                                                        {helpers.extractCartItemDescription(orderItem.cart_item)}\n                                                    </div>\n                                                </div>\n                                            ) \n                                        }\n                                    </div> \n                                </div>\n                            )\n                        })\n                    }\n                </div>\n                <div className={'col-12'}>\n                    <hr/>\n                    <h5>Email Customer:</h5>\n                    <OrderEmail order={this.state.order}/>\n                </div>\n            </div> \n        )\n    }\n}","import ModelBase from './ModelBase';\nimport {format} from 'date-fns';\n\nexport default class Coupon extends ModelBase {\n\n    public code!: string;\n    public mode!: number;\n    public calculation_type!: number;\n    public expire!: string;\n    public start_value!: number;\n    public current_value!: number;\n    public remaining_uses!: number;\n    public email!: string;\n    public active!: boolean;\n\n    constructor (\n        id?: number,\n        code?: string,\n        active?: boolean,\n        mode?: number,\n        calculation_type?: number,\n        expire?: string,\n        start_value?: number,\n        current_value?: number,\n        remaining_uses?: number,\n        email?: string\n    ){\n        super();\n        let expire_date: Date = new Date();\n        expire_date.setDate(expire_date.getDate() + 60); // an extra 30 days  to cover for the diff between python and javascript dates\n        this.id = id || -1;\n        this.code = code || '';\n        this.active = active !== false ? true : false;\n        this.mode = mode || 0;\n        this.calculation_type = calculation_type || 0\n        this.expire = expire ||\n            format(expire_date, 'yyyy-mm-dd');\n        this.start_value = start_value || 0;\n        this.current_value = current_value || 0;\n        this.remaining_uses = remaining_uses || 0;\n        this.email = email || '';\n    }\n}\n\nexport class CouponDTO extends Coupon {\n\n    public code!: string;\n    public mode!: number;\n    public calculation_type!: number;\n    public expire!: string;\n    public start_value!: number;\n    public current_value!: number;\n    public remaining_uses!: number;\n    public email!: string;\n    public active!: boolean;\n\n    constructor(coupon: Coupon){\n        super();\n        this.id = coupon.id;\n        this.active = coupon.active;\n        this.mode = coupon.mode;\n        this.calculation_type = coupon.calculation_type;\n        this.expire = coupon.expire;\n        this.start_value = coupon.start_value;\n        this.current_value = coupon.current_value;\n        this.remaining_uses = coupon.remaining_uses;\n        this.email = coupon.email;\n    }\n}","import Service from './Service';\n\nclass CouponService extends Service {\n    appName = \"dashboard\";\n    view = \"coupon\";\n}\n\nexport default new CouponService();","import React, {useEffect, useState} from 'react';\n\nimport Coupon from '../../models/Coupon';\nimport momentHelper from '../../helpers/MomentHelper';\n\nimport './coupon.scss';\nimport couponService from '../../services/CouponService';\n\ninterface Props {\n    coupon: Coupon,\n    couponUpdated: (coupon: Coupon) => void\n}\n\nexport const CouponComponent = (props: Props): React.ReactElement => {\n    const modes: string[] = ['standard', 'one off'];\n    const calculation_types: string[] = ['percentage', 'fixed'];\n    const [coupon, setCoupon] = useState<Coupon>(props.coupon);\n    const [deactivating, setDeactivating] = useState(false);\n\n    const deactivateCoupon = (): void => {\n        if (!window.confirm(`Are you sure you want to deactivate:\\n${coupon.code}\\n\\nCoupons cannot be reactivated!`)) return;\n        setDeactivating(true);\n        coupon.active = false;\n        couponService.update(coupon.id, coupon)\n            .then((coupon: Coupon) => {\n                setCoupon(coupon);\n                props.couponUpdated(coupon);\n            })\n            .catch(\n                err => console.log(err))\n    }\n\n    return (\n        <tr className={`coupon ${!props.coupon.active ? 'coupon--inactive' : ''}`}>\n            <td>\n                { coupon.active &&\n                    <button className={'btn btn-outline-danger coupon__deactivate'}\n                            disabled={deactivating}\n                            onClick={deactivateCoupon}\n                    >X</button>\n                }\n            </td>\n            <td className={'coupon__code'}>{coupon.code}</td>\n            <td className={'coupon__mode'}>{modes[coupon.mode]}</td>\n            <td className={'coupon__mode'}>{calculation_types[coupon.calculation_type]}</td>\n            <td className={'coupon__uses'}>{coupon.remaining_uses}</td>\n            <td className={'coupon__start_value'}>\n                {\n                    props.coupon.calculation_type === 0 ?\n                        `${coupon.start_value * 100}%`\n                        :\n                        `$${coupon.start_value.toFixed(2)}`\n                }\n            </td>\n            <td className={'coupon__end_value'}>\n                {\n                    coupon.calculation_type === 0 ?\n                        ``\n                        :\n                        `$${coupon.current_value.toFixed(2)}`\n                }\n            </td>\n            <td className={'coupon__expire'}>\n                {momentHelper.asFullDate(coupon.expire)}\n            </td>\n            <td className={'coupon__email'}>\n                {coupon.email}\n            </td>\n        </tr>\n    )\n}","import React from 'react';\nimport Coupon from '../../models/Coupon';\n\nimport couponService from '../../services/CouponService';\n\nimport './coupon.scss';\nimport {CouponComponent} from \"./CouponComponent\";\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport {RouteComponentProps} from 'react-router-dom';\n\ninterface State {\n    loading: boolean,\n    coupons: Coupon[],\n    addingCoupon: boolean\n}\n\nexport default class Coupons extends React.Component<RouteComponentProps, State> {\n\n    state = {\n        loading: true,\n        coupons: [],\n        addingCoupon: false\n    }\n\n    public componentDidMount = (): void => {\n        couponService.get<Coupon[]>()\n            .then((coupons: Coupon[]) =>\n                this.setState({coupons, loading: false}))\n            .catch( err => console.log(err))\n    }\n\n    private couponUpdated = (coupon: Coupon): void => {\n        this.setState({\n            coupons: this.state.coupons.map((c: Coupon) => {\n                if (c.id === coupon.id)\n                    return coupon\n                else\n                    return c\n            })\n        })\n    }\n\n    private addCoupon = (): void => {\n        this.setState(({addingCoupon: true}));\n        couponService.add<Coupon>(new Coupon())\n            .then((coupon: Coupon) => {this.props.history.push({pathname: `/dashboard/coupon/edit/${coupon.id}`})})\n            .catch( err => window.alert('Unable to create coupon'));\n    }\n\n    public render() {\n        if (this.state.loading)\n            return <LoadingOverlay />\n\n        const coupons: Coupon[] = this.state.coupons.sort((a: Coupon, b:Coupon) => {\n            return a.active < b.active ?\n                1\n                :\n                a.active > b.active ?\n                    -1 : 0\n        })\n\n        return(\n            <div className=\"row coupons\">\n                <div className={'col-12 mb-2'}>\n                    <div className={'add_coupon'} onClick={() => this.props.history.push({pathname: '/dashboard/coupon/add'})}>\n                        {\n                            this.state.addingCoupon ?\n                                'Creating coupon...'\n                                :\n                                '+ Add Coupon'\n                        }\n                    </div>\n                </div>\n                <div className={'col-12'}>\n                    <table className={'table'}>\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>code</th>\n                                <th>mode</th>\n                                <th>calculation</th>\n                                <th>uses</th>\n                                <th>start value</th>\n                                <th>current value</th>\n                                <th>expire</th>\n                                <th>email</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                coupons.map((coupon: Coupon) =>\n                                    <CouponComponent\n                                        coupon={coupon} key={`c_${coupon.id}`}\n                                        couponUpdated={this.couponUpdated} />\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport deliveryDayService from '../../services/DeliveryDayService';\nimport DeliveryDay from '../../models/DeliveryDayModel';\nimport helpers from '../../helpers/helpers';\nimport momentHelper from '../../helpers/MomentHelper';\nimport LoadingOverlay from '../overlays/LoadingOverlay';\nimport DeliveryDayItem from '../../models/DeliveryDayItemModel';\nimport {RouteComponentProps} from 'react-router-dom';\n\ninterface Props extends RouteComponentProps {\n    match: any\n}\n\ninterface State {\n    loaded: boolean,\n    deliveryDay: DeliveryDay,\n    startDate: string,\n    endDate: string,\n    duplicating: boolean\n}\n\nexport default class DeliveryDuplicate extends React.Component<Props, State> {\n\n    state = {\n        loaded: false,\n        deliveryDay: new DeliveryDay(),\n        startDate: '',\n        endDate: '',\n        duplicating: false\n    }\n\n    public componentDidMount = (): void => {\n        const { match: { params } } = this.props;\n        deliveryDayService.get<DeliveryDay>(params.id)\n            .then((deliveryDay: DeliveryDay) => {\n                this.setState({deliveryDay, loaded: true})\n            })\n    }\n\n    private datesAreValid = (): boolean => {\n        return( \n            this.state.startDate !== '' &&\n            this.state.endDate !== '' &&\n            this.state.endDate > this.state.startDate\n            )\n    }\n\n    private duplicate = (): void => {\n        if(!window.confirm(`Are you sure you want duplicate: ${this.state.startDate} to ${this.state.endDate}`))\n            return;\n\n        deliveryDayService.duplicateDeliveryDay(this.state.deliveryDay, this.state.startDate, this.state.endDate)\n            .then((deliveryDay: DeliveryDay) => {\n                this.props.history.push({pathname: `/dashboard/delivery/edit/${deliveryDay.id}`})\n            })\n            .catch( err => window.alert(\"Unable to duplicate\"));\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n         }  as Pick<State, keyof State>);\n    }\n\n    public render() {\n        if (!this.state.loaded)\n            return <LoadingOverlay />\n\n        return(\n            <div className=\"row delivery_duplicate\">\n                <div className=\"col-12 delivery_duplicate__dates\">\n                    {momentHelper.asFullDate(this.state.deliveryDay.date)} - {momentHelper.asFullDate(this.state.deliveryDay.end_date)}\n                    <hr/>\n                </div>\n                <div className=\"col-12\">\n                    Duplicate to:\n                </div>\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-md-2 delivery_duplicate__date\">\n                            <small>start date</small>\n                            <br/>\n                            <input\n                                type=\"date\"\n                                id=\"startDate\"\n                                value={this.state.startDate}\n                                disabled={this.state.duplicating}\n                                onChange={this.updateData} />\n                        </div>\n                        <div className=\"col-12 col-md-2 delivery_duplicate__date\">\n                            <small>end date</small>\n                            <br/>\n                            <input\n                                type=\"date\"\n                                id=\"endDate\"\n                                value={this.state.endDate}\n                                disabled={this.state.duplicating}\n                                onChange={this.updateData} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12 mt-3\">\n                    <button \n                        className=\"btn btn-success duplicate_btn\" disabled={!this.datesAreValid()}\n                        onClick={this.duplicate}>\n                            Duplicate</button>\n                    <button \n                        className=\"btn btn-default ml-3\"\n                        onClick={() => (this.props as any).history.push({pathname: '/dashboard/deliveries'})}>\n                            Cancel</button>\n                </div>\n                <div className=\"col-12 delivery_duplicate_items\">\n                    <hr/>\n                    <div className=\"row\">\n                        {\n                            this.state.deliveryDay.day_items.map((item: DeliveryDayItem) => {\n                                return(\n                                    <div className=\"col-12 col-md-3 delivery_duplicate_items__item\" key={`di_${item.id}`}>\n                                        {item.menu_item.name}\n                                        <img src={item.menu_item.image} alt={item.menu_item.name}/>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react';\n\nimport couponService from '../../services/CouponService';\nimport Coupon from \"../../models/Coupon\";\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport {RouteComponentProps} from 'react-router-dom'\n\ninterface State {\n    saving: boolean,\n    coupon: Coupon\n}\n\nexport default class CouponAdd extends React.Component<RouteComponentProps, State> {\n\n    state = {\n        saving: false,\n        coupon: new Coupon()\n    }\n\n    private cancel = (): void => {\n        if (window.confirm('Are you sure you want to cancel?'))\n            this.props.history.push('/dashboard/coupons');\n    }\n\n    private save = (): void => {\n        this.setState({saving: true});\n\n        let coupon: Coupon = this.state.coupon;\n\n        if (coupon.calculation_type === 0 && coupon.start_value > 1)\n            coupon.start_value = coupon.start_value * .01\n\n        couponService.add<Coupon>(this.state.coupon)\n            .then(() => {}) //this.props.history.push({pathname: '/dashboard/coupons'}))\n            .catch( err => alert('unable to add coupon'))\n            .finally(() => this.setState({saving: false}));\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {\n        let coupon: any = this.state.coupon;\n        coupon[e.target.id] = e.target.value;\n        this.setState({coupon});\n    }\n\n    public render() {\n        if (this.state.saving)\n            return <LoadingOverlay />\n\n        return (\n            <div className={'row justify-content-center edit_coupon'}>\n                <div className={'col-12 col-md-4'}>\n                    <h3>Add Coupon</h3>\n                    <div className={'row'}>\n                        <div className={'col-12 col-6 mt-3'}>\n                            Mode:\n                            <select id={'mode'} className={'form-control edit_coupon__mode'}\n                                value={this.state.coupon.mode}\n                                onChange={this.updateData}>\n                                <option value={0}>standard</option>\n                                <option value={1}>one off</option>\n                            </select>\n                        </div>\n                        <div className={'col-12 col-6 mt-3'}>\n                            Calculation:\n                            <select id={'calculation_type'} className={'form-control edit_coupon__calculation_type'}\n                                value={this.state.coupon.calculation_type}\n                                onChange={this.updateData}>\n                                <option value={0}>percentage</option>\n                                <option value={1}>fixed value</option>\n                            </select>\n                        </div>\n                        <div className={'col-12 col-6 mt-3 edit_coupon__start_value'}>\n                            value:\n                            <input\n                                id={'start_value'}\n                                value={this.state.coupon.start_value || ''}\n                                onChange={this.updateData}\n                                className={'form-control'} />\n                        </div>\n                        <div className={'col-12 col-6 mt-3 edit_coupon__email'}>\n                            uses:\n                            <input\n                                id={'remaining_uses'}\n                                type={'number'}\n                                value={this.state.coupon.remaining_uses}\n                                onChange={this.updateData}\n                                className={'form-control'} />\n                        </div>\n                        <div className={'col-12 col-6 mt-3 edit_coupon__email'}>\n                            expire:\n                            <input\n                                id={'expire'}\n                                value={this.state.coupon.expire}\n                                onChange={this.updateData}\n                                type={'date'}\n                                className={'form-control'} />\n                        </div>\n                        <div className={'col-12 col-6 mt-3 edit_coupon__email'}>\n                            email:\n                            <input\n                                id={'email'}\n                                value={this.state.coupon.email}\n                                onChange={this.updateData}\n                                className={'form-control'} />\n                        </div>\n                        <div className={'col-12 mt-3'}>\n                            <div className={'row justify-content-center'}>\n                                <button className={'btn btn-success mr-3'} onClick={this.save}>\n                                    save\n                                </button>\n                                <button className={'btn btn-outline-default edit_coupon__cancel'} onClick={this.cancel}>\n                                    cancel\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {this.state.saving &&\n                    <LoadingOverlay />\n                }\n\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport adminService from '../../services/AdminService';\nimport './mail.scss';\nimport FunctionsResponsesDTO from '../../dto/FunctionsResponsesDTO';\n\ninterface State {\n    runningRemoteFunction: boolean\n}\nexport default class MailUtilities extends React.Component<any, State> {\n\n    state = {\n        runningRemoteFunction: false\n    }\n\n    private doFunction = (e: React.MouseEvent): void => {\n        if (!window.confirm(\"Are you sure you want to send mails?\")) return;\n\n        this.setState({runningRemoteFunction: true});\n        adminService.sendWeeklyEmails()\n            .then((resp: FunctionsResponsesDTO) => {\n                window.alert(`${resp.send_count} emails were sent`);\n                this.setState({runningRemoteFunction: false});\n            })\n    }\n\n    render() {\n        if (this.state.runningRemoteFunction)\n            return(<div>One Moment...</div>)\n        return(\n            <div className=\"row mail-utilities\">\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <h3>Mass Mailings</h3>\n                            <hr/>\n                        </div>\n                        <div className=\"col-3\">\n                            <button id=\"weekly_menu\" className=\"btn btn-success\" onClick={this.doFunction}>Weekly Menu</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import Service from './Service';\n\nclass MailingListService extends Service {\n    appName = 'dashboard';\n    view='mailing_list'\n}\n\nexport default new MailingListService();","import React from 'react';\nimport MailingListDTO from '../../dto/MailingListDTO';\nimport mailingListService from '../../services/MailingListService';\n\ninterface State {\n    mailingList: MailingListDTO[],\n    loaded: boolean\n}\n \nexport default class MailingList extends React.Component<any, State> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            mailingList: [],\n            loaded: false\n        }\n    }\n\n    public componentDidMount = (): void => { \n        mailingListService.get<MailingListDTO[]>()\n            .then((mailingList: MailingListDTO[]) => this.setState({mailingList, loaded: true}))\n    }\n\n    public render() {\n        if (!this.state.loaded)\n            return <div>Loading...</div>\n\n        return(\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    {\n                        this.state.mailingList.map((dto: MailingListDTO) => \n                            <h3>{dto.email}</h3>)\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import Service from './Service';\nimport Order from \"../models/OrderModel\";\nimport MailTemplate from \"../models/MailTemplate\";\n\nclass MailTemplateService extends Service {\n    appName = 'dashboard';\n    view = 'mail_template';\n\n    public get_template_by_slug = (slug: string): Promise<MailTemplate> => {\n        return this._get<MailTemplate>(`${this.appName}/${this.view}/get_template_by_slug/?slug=${slug}`)\n    }\n}\n\nexport default new MailTemplateService();","import ModelBase from './ModelBase';\n\nexport default class MailTemplate extends ModelBase {\n    public slug!: string;\n    public text!: string;\n    public options!: {}\n\n    constructor(slug?: string, text?: string, options?: {}) {\n        super();\n        this.slug = slug || '';\n        this.text = text || '';\n        this.options = options || {}\n    }\n}\n","import React from 'react';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport mailTemplateService from '../../services/MailTemplateService';\nimport MailTemplate from \"../../models/MailTemplate\";\n\nimport './mail.scss';\n\ninterface Props {\n    templateSlug: string\n}\n\ninterface State {\n    loading: boolean,\n    updating: boolean,\n    template: MailTemplate,\n    text: string,\n    originalText: string\n}\n\nexport default class MailTemplateComponent extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            updating: false,\n            template: new MailTemplate(),\n            text: '',\n            originalText: ''\n        }\n    }\n\n    public componentDidMount() {\n        mailTemplateService.get_template_by_slug(this.props.templateSlug)\n            .then((template: MailTemplate) => {\n                this.setState({text: template.text, originalText: template.text, template, loading: false})\n            })\n            .catch(() => {})\n            .then(() => this.setState({loading: false}))\n    }\n\n    public saveUpdates = (): void => {\n        this.setState({updating: true});\n\n        const template: MailTemplate = this.state.template;\n        template.text = this.state.text;\n\n        if (template.id < 0) {\n            template.slug = this.props.templateSlug;\n            template.options = '';\n            mailTemplateService.add<MailTemplate>(template)\n                .then(() => this.setState({originalText: this.state.text}))\n                .catch( err => window.alert('unable to save'))\n                .then(() => this.setState({updating: false}))\n        } else {\n            mailTemplateService.update<MailTemplate>(template.id, template)\n                .then(() => this.setState({originalText: this.state.text}))\n                .catch( err => window.alert('unable to update'))\n                .then(() => this.setState({updating: false}))\n        }\n    }\n\n    public render() {\n        if(this.state.loading)\n            return <LoadingOverlay />\n\n        return(\n            <div className={'row mail_template'}>\n                <div className={'col-12'}>\n                    <hr/>\n                </div>\n                <div className={'col-12'}>\n                    {this.props.templateSlug.replace(/-/g, ' ')}\n                </div>\n                <div\n                    className={'col-12 '}>\n                    <textarea\n                        className={'mail_template__body'}\n                        value={this.state.text}\n                        onChange={(e: any) => this.setState({text:e.target.value})}\n                        disabled={this.state.updating}\n                    ></textarea>\n                    ({this.state.text.length} characters)\n                </div>\n                <div className={'col-12'}>\n                    <button className={`btn btn-${this.state.updating || this.state.text === this.state.originalText ? \n                        'default' : 'success'}`}\n                            onClick={() => this.saveUpdates()}\n                            disabled={this.state.updating || this.state.text === this.state.originalText}\n                            >Update</button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport MailTemplateComponent from \"./MailTemplateComponent\";\n\nexport const MailTemplates = (): React.ReactElement => {\n    const templateSlugs: string[] = [\n        'upcoming-delivery',\n        'upcoming-delivery-day',\n        'newsletter'\n    ]\n\n    return(\n        <div className={'row mail_template'}>\n            <div className={'col-12 col-md-4'}>\n                {\n                    templateSlugs.map((slug: string) => <MailTemplateComponent templateSlug={slug} key={slug} />)\n                }\n            </div>\n        </div>\n    )\n}","import Service from './Service';\nimport {DeliveryWindowWithCountsDTO} from \"../models/DeliveryWindowModel\";\nimport Order from \"../models/OrderModel\";\nimport moment from 'moment';\n\nclass DeliveryWindowService extends Service {\n    appName = 'dashboard';\n    view = 'delivery_window';\n\n    public listWithCounts = (targetDate: string): Promise<DeliveryWindowWithCountsDTO[]> => {\n        return this._get(`${this.appName}/${this.view}/list_with_counts/?target_date=${targetDate}`);\n    }\n\n    public retrieveOrders = (deliveryWindowId: number, targetDate: Date): Promise<Order[]> => {\n        return this._get(`${this.appName}/${this.view}/${deliveryWindowId}/retrieve_orders/?target_date=${\n            moment(targetDate).utc().format('YYYY-MM-DD')}`)\n    }\n}\n\nexport default new DeliveryWindowService()","import ModelBase from \"./ModelBase\";\n\nexport class DeliveryWindowDTO {\n    public date!: string;\n    public window!: DeliveryWindow};\n\nexport default class DeliveryWindow extends ModelBase {\n\n    public name!: string;\n    public active!: boolean;\n    public start_time!: string;\n    public end_time!: string;\n    public day!:number; // 0 = Monday\n    public one_off_date!: string;\n\n    constructor(id?: number, name?: string, start_time?: string, end_time?: string, day?: number, active?: boolean,\n                one_off_date?: string) {\n        super();\n        this.name = name || 'delivery_window';\n        this.start_time = start_time || \"11:00:00\";\n        this.end_time = end_time || \"13:00:00\";\n        this.day = day || 0;\n        this.id = id || -1;\n        this.active = active || true;\n        this.one_off_date = one_off_date || '';\n    }\n}\n\nexport class DeliveryWindowWithCountsDTO {\n    public dish_count!: number;\n    public order_count!: number;\n    public window!: DeliveryWindow;\n}","import React, { Fragment } from 'react';\n\nimport deliveryWindowService from '../../services/DeliveryWindowService';\nimport deliveryDayService from '../../services/DeliveryDayService';\nimport DeliveryDay from \"../../models/DeliveryDayModel\";\nimport DeliveryWindow from \"../../models/DeliveryWindowModel\";\nimport adminService from '../../services/AdminService';\n\ninterface Props {\n    match: any\n}\n\ninterface State {\n    who: string,\n    deliveryDays: DeliveryDay[],\n    deliveryWindows: DeliveryWindow[],\n    message: string,\n    deliveryWindowId: number,\n    deliveryDate: string,\n    deliveryDay: DeliveryDay,\n    includeSamples: boolean\n}\n\nexport default class MailMassMailer extends React.Component<Props, State> {\n    state = {\n        who: 'all_customers',\n        deliveryDays: [],\n        deliveryWindows: [],\n        message: '',\n        deliveryWindowId: 0,\n        deliveryDate: '',\n        deliveryDay: new DeliveryDay(),\n        includeSamples: false\n    }\n\n    public componentDidMount = (): void => {\n        Promise.all([\n            deliveryDayService.get<DeliveryDay[]>(),\n            deliveryWindowService.get<DeliveryWindow>()\n        ])\n            .then((values) => {\n                // defaults for state\n                let who: string = 'all_customers';\n                let deliveryDate: string = '';\n                const deliveryWindows: DeliveryWindow[] = values[1] as any;\n                const deliveryWindow: DeliveryWindow = deliveryWindows.length > 0 ?\n                    deliveryWindows[0] : new DeliveryWindow();\n                const deliveryDay: DeliveryDay = values[0].length > 0 ?\n                    values[0][0] : new DeliveryDay()\n\n                //check if a type of email and option were sent\n                const { match: { params }} = this.props;\n                const option: any = 'option' in params ? params['option'] : '';\n\n                if ('mail_type' in params) {\n                    switch(params['mail_type']) {\n                        case('upcoming_delivery'):\n                            who = 'upcoming_delivery';\n                            deliveryDate = option;\n                            break;\n                    }\n                }\n\n                this.setState({\n                    who,\n                    deliveryDate,\n                    deliveryDays: values[0],\n                    deliveryDay: deliveryDay,\n                    deliveryWindows: deliveryWindows,\n                    deliveryWindowId: deliveryWindow.id\n                })\n            })\n    }\n\n    private goodToSend = (): boolean => {\n        const who: string = this.state.who;\n\n        if (this.state.message === \"\") return false\n\n        return  (\n            who == 'all_customers' || who == 'delivery_window' || who == 'upcoming_delivery_days' ||\n            (who == 'upcoming_delivery' && this.state.deliveryDate !== '')\n        )\n    }\n\n    private sendMail = (): void => {\n        let confirmMessage: string = 'Send to all customers';\n        let options: any = {}\n\n        if (this.state.includeSamples) options['include_menu_sample'] = true\n\n        switch (this.state.who){\n            case 'delivery_window':\n                confirmMessage = `Send to customers in the selected delivery window.`;\n                options['delivery_window'] = this.state.deliveryWindowId;\n                break;\n\n            case 'upcoming_delivery':\n                confirmMessage = `Send to customers receiving a delivery on: ${this.state.deliveryDate}`;\n                options['delivery_date'] = this.state.deliveryDate;\n                //TODO: Need to implement this\n                break;\n\n            case 'upcoming_delivery_days':\n                confirmMessage = `Send to customers in the delivery days ${this.state.deliveryDay.date} to ${this.state.deliveryDay.end_date}`\n                break;\n\n            default:\n                options['all_customers'] = true;\n        }\n\n        if (!window.confirm(`You about to initiate the following: \\n\\n${confirmMessage}\\n\\nContinue?`)) return\n\n        adminService.sendMassMail(this.state.message, options)\n            .then((resp: any) => {\n                if(resp.count === 0 ){\n                    window.alert(`${confirmMessage} did not produce any emails.`);\n                    return;\n                } else {\n                    if(!window.confirm(`${confirmMessage}\\n\\nwill produce approx. ${resp.count} emails.\\n\\nSend?`))\n                        return\n\n                    adminService.sendMassMail(this.state.message, options, true)\n                        .then((resp: any) => window.alert(`${resp.count} emails were sent`))\n                }\n            })\n    }\n\n    public render() {\n        return(\n            <div className={'row mass_mailer justify-content-center'}>\n                <div className={'col-12 col-md-6'}>\n                    <div className={'col-12'}>\n                        <label>message:</label>\n                        <textarea\n                            className={'mass_mailer__message form-control'}\n                            value={this.state.message}\n                            onChange={(e) => this.setState({message: e.target.value})}\n                        ></textarea>\n                        ({this.state.message.length} characters)\n                    </div>\n                    <div className={'col-12 mt-3 mass_mailer_send_to'}>\n                        send to:<br/>\n                        <div className={'mass_mailer_send_to__option'}>\n                            <input type={'radio'}\n                                   name={'to'}\n                                   id={'all_customers'}\n                                   checked={this.state.who === 'all_customers'}\n                                   onChange={() => this.setState({who: 'all_customers'})}/> all customers<br/>\n                                   <span>anyone who has completed an order</span>\n                        </div>\n                        <div className={'mass_mailer_send_to__option'}>\n                            <input type={'radio'} name={'to'}\n                                   id={'delivery_window'}\n                                   disabled={this.state.deliveryWindows.length === 0}\n                                   checked={this.state.who === 'delivery_window'}\n                                   onChange={() => this.setState({who: 'delivery_window'})}/> delivery window<br/>\n                                   <span>customers in the window selected below</span>\n                        </div>\n                        <div className={'mass_mailer_send_to__option'}>\n                            <input type={'radio'} name={'to'}\n                               id={'upcoming_delivery'}\n                               checked={this.state.who === 'upcoming_delivery'}\n                               onChange={() => this.setState({who: 'upcoming_delivery'})} /> upcoming delivery<br/>\n                               <span>customers receiving a delivery on the date selected below</span>\n                        </div>\n                        <div className={'mass_mailer_send_to__option'}>\n                            <input type={'radio'} name={'to'}\n                               id={'upcoming_delivery_days'}\n                               disabled={this.state.deliveryDays.length === 0}\n                               checked={this.state.who === 'upcoming_delivery_days'}\n                               onChange={() => this.setState({who: 'upcoming_delivery_days'})} /> upcoming delivery days<br/>\n                               <span>customers receiving an order during the deliver days selected below</span>\n                        </div>\n\n                    </div>\n                    <div className={'col-12 mt-3 mass_mailer__options'}>\n                        {this.state.who === 'upcoming_delivery' &&\n                            <Fragment>\n                                select a delivery day:\n                                <input\n                                    type={'date'}\n                                    value={this.state.deliveryDate}\n                                    onChange={(e) =>\n                                        this.setState({deliveryDate: e.target.value})}\n                                    className={'form-control options__upcoming_delivery'} />\n                            </Fragment>\n                        }\n                        {this.state.who === 'upcoming_delivery_days' &&\n                            <Fragment>\n                                select delivery days:\n                                <select className={'form-control options__upcoming_delivery_days'}>\n                                    {\n                                        this.state.deliveryDays.map((deliveryDay: DeliveryDay) =>\n                                            <option key={`dd_${deliveryDay.id}`}>\n                                                {`${deliveryDay.date} to ${deliveryDay.end_date}`}\n                                            </option>\n                                        )\n                                    }\n                                </select>\n                            </Fragment>\n                        }\n                        {this.state.who === 'delivery_window' &&\n                            <Fragment>\n                                select delivery window:\n                                <select\n                                    className={'form-control options__delivery_windows'}\n                                    onChange={(e) =>\n                                        this.setState({deliveryWindowId: parseInt(e.target.value)})}>\n                                    {\n                                        this.state.deliveryWindows.map((window: DeliveryWindow) =>\n                                            <option key={`wi_${window.id}`} value={window.id}>\n                                                {window.name}\n                                            </option>\n                                        )\n                                    }\n                                </select>\n                            </Fragment>\n                        }\n                    </div>\n                    <div className={'col-12 mt-3 mass_mailer__includes'}>\n                        {this.state.who !== 'upcoming_delivery_days'&&\n                            <Fragment>\n                                <input\n                                    type={'checkbox'}\n                                    className={'includes__include_samples'}\n                                    checked={this.state.includeSamples}\n                                    onChange={(e) => this.setState(({includeSamples: !this.state.includeSamples}))}\n                                /> &nbsp;&nbsp;Include Upcoming Menu Samples\n                            </Fragment>\n                        }\n                    </div>\n                    <div className={'col-12 mt-3 mass_mailer__buttons text-center'}>\n                        <button\n                            className={'btn btn-success buttons__send'}\n                            disabled={!this.goodToSend()}\n                            onClick={this.sendMail}\n                            >Send Mass Mail</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {NavItem, SubNavigation} from \"../nav/SubNavigation\";\nimport { Switch, Route } from 'react-router-dom';\nimport MailUtilities from \"./MailUtilities\";\nimport MailingList from \"./MailingList\";\nimport {MailTemplates} from \"./MailTemplates\";\nimport MailMassMailer from \"./MailMassMailer\";\n\nexport const Mail = (): React.ReactElement => {\n\n    return(\n        <div className='row mail'>\n            <div className={'col-12'}>\n                <SubNavigation navItems={[\n                                            {title: 'Utilities', link:'/dashboard/mail/utility'},\n                                            {title: 'Templates', link:'/dashboard/mail/template'},\n                                            {title: 'Mailing List', link:'/dashboard/mail/list'},\n                                            {title: 'Mass Mailer', link:'/dashboard/mail/mass_mailer'}\n                                        ]} />\n            </div>\n            <div className=\"col-12\">\n                <Switch>\n                    <Route path=\"/dashboard/mail/list/\" component={MailingList} />\n                    <Route path={'/dashboard/mail/template'} component={MailTemplates} />\n                    <Route path={'/dashboard/mail/mass_mailer/:mail_type/:option'} component={MailMassMailer} />\n                    <Route path={'/dashboard/mail/mass_mailer'} component={MailMassMailer} />\n                    <Route path=\"/dashboard/mail/\" component={MailUtilities} />\n                </Switch>\n            </div>\n        </div>\n    )\n}","import Service from './Service';\nimport Newsletter from \"../models/Newsletter\";\n\nclass NewsletterService extends Service {\n    appName = 'dashboard';\n    view = 'newsletter';\n\n    public release = (newsletterId: number, send_email: boolean = false): Promise<any> => {\n        return this._get<any>(`${this.appName}/${this.view}/${newsletterId}/release/?send_email=${send_email}`);\n    }\n\n    sendEmailSample = (newsletterId: number, email: string, send_email?: boolean): Promise<any> => {\n        return this._get(`${this.appName}/${this.view}/${newsletterId}/send_email_sample/?email=${email}`);\n    }\n}\n\nexport default new NewsletterService();","import React from 'react';\nimport Newsletter from \"../../models/Newsletter\";\nimport helpers from '../../helpers/helpers';\nimport momentHelper from '../../helpers/MomentHelper';\nimport { useHistory } from 'react-router-dom';\n\nimport './newsletter.scss';\n\ninterface Props {\n    newsletter: Newsletter\n}\n\nexport const NewslettersNewsletter = (props: Props): React.ReactElement => {\n    const history = useHistory();\n\n    return (\n        <tr className={'newsletters_newsletter'}>\n            <td>{props.newsletter.title}</td>\n            <td>\n                {\n                    props.newsletter.release_date !== null && props.newsletter.release_date !== undefined ?\n                        momentHelper.asFullDate(props.newsletter.release_date)\n                        :\n                        <span>click 'Edit' to release</span>\n                }\n            </td>\n            <td>\n                <button\n                    className={'btn btn-success'}\n                    onClick={() => history.push({pathname: `/dashboard/newsletter/edit/${props.newsletter.id}`})}\n                    >Edit</button>\n            </td>\n        </tr>\n    )\n}","import ModelBase from \"./ModelBase\";\n\nexport default class Newsletter extends ModelBase {\n    public title!: string;\n    public content!: string;\n    public release_date!: any;\n\n    constructor(id?: number, title?: string, content?: string, release_date?: any) {\n        super();\n        this.id = id || -1;\n        this.title = title || '';\n        this.content = content || '';\n        this.release_date = release_date || null;\n    }\n}\n\n","import React from 'react';\nimport newsletterService from '../../services/NewsletterService';\nimport {withRouter} from 'react-router';\n\nimport './newsletter.scss';\nimport Newsletter from \"../../models/Newsletter\";\n\ninterface State {\n    title: string,\n    creating: boolean\n}\n\nclass NewsletterAdd extends React.Component<any, State> {\n\n    state = {\n        title: '',\n        creating: false\n    }\n\n    public render() {\n\n        const createNewsletter = (): void => {\n            this.setState({creating: true});\n            newsletterService.add<Newsletter>(new Newsletter(-1, this.state.title, ''))\n                .then((newsLetter: Newsletter) =>\n                    this.props.history.push({pathname: `/dashboard/newsletter/edit/${newsLetter.id}`}))\n                .catch( err => {console.log(err);\n                    window.alert('unable to create newsletter')\n                })\n        }\n\n        return(\n            <div className={'row newsletter_add'}>\n                <div className={'col-12'}>\n                    <input\n                        placeholder={'new newsletter title'}\n                        value={this.state.title}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            this.setState(({title: e.target.value}))}\n                        />\n                    <button\n                        className={'btn btn-success'}\n                        disabled={this.state.title === '' || this.state.creating}\n                        onClick={createNewsletter}\n                        >Create Newsletter</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(NewsletterAdd);","import React, {useEffect, useState} from 'react';\nimport Newsletter from '../../models/Newsletter';\nimport newsletterService from '../../services/NewsletterService';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport {NewslettersNewsletter} from \"./NewslettersNewsletter\";\nimport NewsletterAdd from \"./NewsletterAdd\";\n\nexport const Newsletters = (): React.ReactElement => {\n    const[newsLetters, setNewsLetters] = useState<Newsletter[]>([]);\n    const[loading, setLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        newsletterService.get<Newsletter[]>()\n            .then((newsletters: Newsletter[]) => {\n                setNewsLetters(newsletters);\n                setLoading(false);\n            })\n            .catch( err => window.alert('unable to load newsletters'))\n    }, [])\n\n    if (loading)\n        return <LoadingOverlay />\n\n    // @ts-ignore\n    // @ts-ignore\n    return(\n        <div className={'row newsletters'}>\n            <div className={'col-12'}>\n                <NewsletterAdd />\n            </div>\n            <div className={'col-12'}>\n                <table className={'table'}>\n                    <thead>\n                        <tr>\n                            <th>title</th>\n                            <th>release</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            newsLetters.map((newsletter: Newsletter) =>\n                                <NewslettersNewsletter newsletter={newsletter} key={`nl_${newsletter.id}`} />\n                            )\n                        }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n\n    )\n}","import React from 'react';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\n\nimport newsletterService from '../../services/NewsletterService';\n\nimport Newsletter from \"../../models/Newsletter\";\n\ninterface State {\n    loading: boolean,\n    saving: boolean,\n    title: string,\n    content: string,\n    newsletter: Newsletter,\n    email: string,\n    sendingEmail: boolean\n}\n\nexport default class NewsletterEdit extends React.Component<any, State> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            saving: false,\n            title: '',\n            content: '',\n            newsletter: new Newsletter(),\n            email: '',\n            sendingEmail: false\n        }\n    }\n\n    public componentDidMount() {\n        const { match: { params } } = this.props;\n\n        newsletterService.get<Newsletter>(params.id)\n            .then((newsLetter: Newsletter) =>\n                this.setState({\n                    newsletter: newsLetter,\n                    title: newsLetter.title,\n                    content: newsLetter.content,\n                    loading: false\n                })\n            )\n            .catch( err => window.alert('unable to load newsletter'))\n    }\n\n    private release = (): void => { //TODO: add testing\n        let options: any = {\n            mailing_list: true\n        }\n\n        newsletterService.release(this.state.newsletter.id)\n            .then((resp: any) => {\n                if(resp.count === 0) {\n                    window.alert('no emails found');\n                    return;\n                } else {\n                    if(!window.confirm(`You are about to send ${resp.count} emails.\\n\\nContinue?`)) return\n                    newsletterService.release(this.state.newsletter.id, true)\n                        .then((resp: any) => {\n                            window.alert(`${resp.count} emails sent`);\n                            const newsletter: Newsletter = this.state.newsletter;\n                            newsletter.release_date = 'a';\n                            this.setState({newsletter});\n                        })\n                        .catch( err => window.alert('unable to release newsletter'))\n                }\n            })\n            .catch( err => window.alert('unable to release newsletter'))\n    }\n\n    private saveNewsletter = (): void => {\n        this.setState({saving: true});\n\n        const newsletter: Newsletter = this.state.newsletter;\n        newsletter.title = this.state.title;\n        newsletter.content = this.state.content;\n        newsletterService.update<Newsletter>(newsletter.id, newsletter)\n            .then((nl: Newsletter) => {\n                this.setState({\n                    newsletter: nl,\n                    title: nl.title,\n                    content: nl.content,\n                    saving: false\n                })\n            })\n            .catch( err => window.alert('unable to update newsletter'))\n    }\n\n    private sendTestEmail = (): void => {\n        if (this.state.email === '') {\n            window.alert('Enter an email address');\n            return;\n        }\n        this.setState({sendingEmail: true});\n        newsletterService.sendEmailSample(this.state.newsletter.id, this.state.email)\n            .then((resp: any) => window.alert('sample mail sent'))\n            .catch( err => window.alert('unable to send sample'))\n            .finally(() => this.setState({sendingEmail: false}))\n    }\n\n    public render() {\n        if (this.state.loading)\n            return <LoadingOverlay />\n\n        const saveDisabled: boolean = (this.state.title === this.state.newsletter.title &&\n                                            this.state.content === this.state.newsletter.content) ||\n                                                this.state.saving\n        return (\n            <div className={'row newsletter_edit'}>\n                <div className={'col-12 newsletter_edit__title'}>\n                    title: <br/>\n                    <input\n                        value={this.state.title}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                    this.setState({title: e.target.value})}\n                        className={'form-control newsletter_edit__title_input'}\n                        disabled={this.state.saving}\n                        />\n                </div>\n                <div className={'col-12 newsletter_edit__content'}>\n                    content:\n                    <textarea\n                        className={'form-control newsletter_edit__content_input'}\n                        value={this.state.content}\n                        rows={10}\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                                        this.setState({content: e.target.value})}\n                        disabled={this.state.saving}\n                        ></textarea>\n                    ({this.state.content.length} characters)\n                </div>\n                <div className={'col-12 newsletter_edit_controls mt-3'}>\n                    <div className={'row'}>\n                        <div className={'col-12 col-md-6'}>\n                            <button\n                                className={'btn btn-success newsletter_edit_controls__save_btn'}\n                                disabled={saveDisabled}\n                                onClick={this.saveNewsletter}\n                                >save</button>\n\n                            {this.state.newsletter.release_date === null &&\n                                <button\n                                    className={'btn btn-outline-warning newsletter_edit_controls__release_btn ml-3'}\n                                    disabled={!saveDisabled}\n                                    onClick={this.release}\n                                    >release</button>\n                            }\n                        </div>\n                        <div className={'col-12 col-md-6'}>\n                            {this.state.content.indexOf('newsletter__email_title') === -1 &&\n                                <div className={'newsletter_edit__error'}>\n                                    Missing 'newsletter__email_title' class\n                                </div>\n                            }\n                            {this.state.content.indexOf('newsletter__email_content') === -1 &&\n                                <div className={'newsletter_edit__error'}>\n                                    Missing 'newsletter__email_content' class\n                                </div>\n                            }\n                        </div>\n                        <div className={'col-12'}>\n                            <button\n                                className={'btn btn-outline-success newsletter_edit_controls__email_btn'}\n                                disabled={!saveDisabled || this.state.sendingEmail}\n                                onClick={this.sendTestEmail}\n                                >Send Email Test</button>\n                            <input\n                                className={'form-control mt-3 newsletter_edit_controls__email_input'}\n                                placeholder={'enter email address'}\n                                type={'email'}\n                                value={this.state.email}\n                                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                    this.setState({email: e.target.value})}\n                                disabled={!saveDisabled || this.state.sendingEmail}\n                                   />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {SubNavigation} from \"../nav/SubNavigation\";\nimport BrowserTool from \"../browser_tool/BrowserTool\";\n\n\nexport default class Home extends React.Component<any, any>{\n    public render() {\n        return(\n            <div className={'row home'}>\n                <SubNavigation navItems={[\n                    {title: 'Browser', link:'/dashboard/browser'},\n                ]} />\n            </div>\n        )\n    }\n}","\nexport const months: string[] = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nexport const days: string[] = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nexport const pythonDays: string[] = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];","import React, {useEffect, useState, Fragment} from 'react';\nimport DeliveryWindow, {DeliveryWindowWithCountsDTO} from \"../../models/DeliveryWindowModel\";\nimport deliveryWindowService from '../../services/DeliveryWindowService';\n\nimport './browser.scss';\nimport { useHistory } from 'react-router-dom';\nimport momentHelper from '../../helpers/MomentHelper';\n\ninterface Props {\n    date: Date\n}\n\nexport const BrowserDay = (props: Props): React.ReactElement => {\n    const [countsData, setCountsData] = useState<DeliveryWindowWithCountsDTO[] | undefined>(undefined)\n    const history = useHistory();\n\n    useEffect(() => {\n\n        deliveryWindowService.listWithCounts(momentHelper.asDateSlug(props.date))\n            .then((countsData: DeliveryWindowWithCountsDTO[]) => {\n                setCountsData(countsData);\n            })\n            .catch( err => window.alert(`unable to load date: ${props.date.toISOString().slice(0,10)}`))\n\n    }, []);\n\n\n\n    return(\n        <div\n            className={'row browser_day nopadding'}\n            onClick={() => history.push({pathname: `/dashboard/browser/day/${momentHelper.asDateSlug(props.date)}`})}\n        >\n            <div className={'col-12 nopadding'}>\n                <div className={`browser_day__date ${momentHelper.asDateSlug(props.date) == momentHelper.asDateSlug(new Date()) ? 'browser_day__date--today' : ''}`}>\n                    {props.date.getDate()}\n                </div>\n                <div className='browser_day__windows'>\n                    {\n                        countsData === undefined ? <div></div> :\n                            countsData.map((dto: DeliveryWindowWithCountsDTO) =>\n                                <div className={'browser_day__window'} key={`dto_${dto.window.id}`}>\n                                    <div className={'d-none d-md-block'}>\n                                        {dto.window.name}\n                                    </div>\n                                    <div className={''}>\n                                        {\n                                            `${dto.order_count}  ${dto.dish_count}`\n                                        }\n                                    </div>\n                                    <hr/>\n                                </div>\n                            )\n\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nimport {months} from '../../constants';\nimport './browser.scss';\nimport {BrowserDay} from \"./BrowserDay\";\nimport { RouteComponentProps } from 'react-router-dom';\nimport helpers from '../../helpers/helpers';\n\ninterface Props extends RouteComponentProps {\n    match: any\n}\n\ninterface State {\n    month: number,\n    year: number,\n    viewDay: number\n}\n\nexport default class BrowserTool extends React.Component<Props, State>{\n\n    state = {\n        month: 0,\n        year: 0,\n        viewDay: 0\n    }\n\n    public componentDidMount() {\n        let month: number = new Date().getMonth();\n        let year: number = new Date().getFullYear();\n\n        const { match: { params } } = this.props;\n\n        // sets URL to include the month and year of they are not in the path\n        if ('month' in params || 'year' in params) {\n            if ('month' in params)\n                month = parseInt(params['month']);\n            if ('year' in params)\n                year = parseInt(params['year']);\n        } else {\n            this.props.history.push({pathname: `/dashboard/browser/${month}/${year}`});\n        }\n\n        this.setState({month, year});\n    }\n\n    private changeMonth = (add: number): void => {\n        let month: number = this.state.month;\n        let year: number = this.state.year;\n\n        month += add;\n\n        if (month > 11){\n            month = 0;\n            year ++;\n        } else if (month < 0) {\n            month = 11;\n            year --;\n        }\n        this.props.history.push({pathname: `/dashboard/browser/${month}/${year}`});\n        this.setState({month, year});\n    }\n\n    public render(){\n\n        const startDate: Date = new Date(this.state.year, this.state.month, 1);\n        const daysInMonth: number = new Date(this.state.year, this.state.month + 1, 0).getDate();\n        let dateNdx: number = -startDate.getDay() + 1;\n\n        let weeks: any = []\n        let week: any;\n        while (dateNdx <= daysInMonth) {\n            week = [];\n            for (let x: number = 0; x < 7; x ++) {\n                if (dateNdx >= 1 && dateNdx <= daysInMonth) {\n                    week.push(<BrowserDay date={new Date(this.state.year, this.state.month, dateNdx)} />)\n                } else {\n                    week.push(<div></div>) // TODO: Update this to show last and next month days faded\n                }\n                dateNdx ++;\n            }\n            weeks.push(week);\n        }\n\n        return(\n            <div className={'row browser_tool'}>\n                <div className={`col-12 browser_tool_calendar`}>\n                    <div className='row justify-content-center'>\n                        <div className={'col-12 col-md-8 browser_tool_calendar__month_nav'}>\n                            <div\n                                className={'month_nav__arrow month_nav__item'}\n                                id={'month_nav__last_month'}\n                                onClick={() => this.changeMonth(-1)}\n                            >&lt;&lt;</div>\n                            <div className={'month_nav__date month_nav__item'}>{months[this.state.month]}  {this.state.year}</div>\n                            <div\n                                className={'month_nav__arrow month_nav__item'}\n                                id={'month_nav__next_month'}\n                                onClick={() => this.changeMonth(1)}\n                            >&gt;&gt;</div>\n                        </div>\n                        <div className={'col-12'}>\n                            <table className={'table'}>\n                                <thead>\n                                    <tr>\n                                        <th>Sun</th>\n                                        <th>Mon</th>\n                                        <th>Tue</th>\n                                        <th>Wed</th>\n                                        <th>Thu</th>\n                                        <th>Fri</th>\n                                        <th>Sat</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                {\n                                    weeks.map((week: any, index: number) =>\n                                        <tr key={`week_${index.toString()}`}>\n                                            {\n                                                week.map((day: any) =>\n                                                    <td key={Math.random()}>{day}</td>\n                                                )\n                                            }\n                                        </tr>\n                                    )\n                                }\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, {Fragment} from 'react';\nimport {DeliveryWindowWithCountsDTO} from \"../../models/DeliveryWindowModel\";\nimport OrderItem from \"../../models/OrderItemModel\";\nimport helpers from \"../../helpers/helpers\";\nimport momentHelper from '../../helpers/MomentHelper';\nimport Order from \"../../models/OrderModel\";\nimport deliveryWindowService from '../../services/DeliveryWindowService';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport './browser.scss';\n\ninterface Props extends RouteComponentProps {\n    dto: DeliveryWindowWithCountsDTO,\n    date: Date,\n    printDocument: (component: React.ReactElement) => void\n}\n\ninterface State {\n    showLoading: boolean,\n    orders: Order[]\n}\n\nclass BrowserWindowTools extends React.Component<Props, State>{\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            showLoading: true,\n            orders: []\n        }\n    }\n\n    public componentDidMount() {\n        deliveryWindowService.retrieveOrders(this.props.dto.window.id, this.props.date)\n            .then((orders: Order[]) => this.setState({orders, showLoading: false}))\n            .catch( err => window.alert('unable to load data'))\n    }\n\n    private downloadDeliverySpreadsheet = (): void => {console.log('xx')\n        let fileContent: string = \"Address line 1\\tAddress line 2\\tCity\\tState\\tZip\\tName\\tEmail Address\\tPhone Number\\tExternal ID\\tOrder Count\\tDriver\\n\";\n        let orderItems: OrderItem[] = [];\n\n        this.state.orders.forEach((order: Order) => {\n            orderItems = order.items.filter((orderItem: OrderItem) => orderItem.cart_item.delivery_date === momentHelper.asDateSlug(this.props.date));\n            if (orderItems.length > 0) {\n                fileContent += `${order.street_address}\\t${order.unit}\\t${order.city}\\tCA\\t${order.zip}\\t${order.contact_name}\\t${order.email}\\t${order.phone_number}\\t${order.public_id}\\t${orderItems.length}\\tLee\\n`;\n            }\n        })\n\n        const bb = new Blob([fileContent ], { type: 'text/plain' });\n        const a = document.createElement('a');\n        a.download = `delivery_route_${momentHelper.asDateSlug(this.props.date)}.tsv`;\n        a.href = window.URL.createObjectURL(bb);\n        a.click();\n        console.log(a);\n    }\n\n    private print = (pullType: string): void => {\n        let orderItems: OrderItem[] = [];\n        for (let x: number = 0; x < this.state.orders.length; x ++)\n            for (let y: number = 0; y < this.state.orders[x].items.length; y ++)\n                if (this.state.orders[x].items[y].cart_item.delivery_date === momentHelper.asDateSlug(this.props.date))\n                    orderItems.push(this.state.orders[x].items[y])\n\n        switch(pullType) {\n            case 'prep': this.props.printDocument(<PrepDisplay orderItems={orderItems} date={this.props.date} />); break;\n            case 'delivery_tags': this.props.printDocument(\n                <DeliveryTagsDisplay orders={this.state.orders} date={this.props.date} />\n                ); break;\n        }\n    }\n\n    public render() {\n        if (this.state.showLoading)\n            return( <LoadingOverlay /> );\n\n        return(\n            <div className={'row browser_window_tools mb-2'}>\n                <div className={'col-12 browser_window_tools__inner'}>\n                    <div className={'row'}>\n                        <div className={'col-12'}>{this.props.dto.window.name}</div>\n                        <div className={'col-6'}>Deliveries: {this.props.dto.order_count}</div>\n                        <div className={'col-6'}>Dishes: {this.props.dto.dish_count}</div>\n                        <div className={'d-none d-md-block col-md-12 browser_window_tools__controls'}>\n                            <button className={'btn btn-success'} onClick={() => this.print('prep')}\n                            disabled={this.state.orders.length === 0}>print prep list</button>\n                            <button className={'btn btn-info ml-3'} onClick={() => this.print('delivery_tags')}\n                            disabled={this.state.orders.length === 0}>print delivery tags</button>\n                            <button\n                                className={'btn btn-outline-danger ml-3'}\n                                onClick={() =>\n                                    this.props.history.push(\n                                        {pathname: `/dashboard/mail/mass_mailer/upcoming_delivery/${momentHelper.asDateSlug(this.props.date)}`})}\n                            disabled={this.state.orders.length === 0}>send mail</button>\n                            <button className={'btn btn-success ml-3'} onClick={this.downloadDeliverySpreadsheet}\n                            disabled={this.state.orders.length === 0}>download delivery spreadsheet</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(BrowserWindowTools);\n\ninterface DeliveryTagsDisplayProps {\n    orders: Order[],\n    date: Date\n}\n\nexport const DeliveryTagsDisplay = (props: DeliveryTagsDisplayProps): React.ReactElement => {\n    const target_date: string = momentHelper.asDateSlug(props.date);\n    return (\n        <div className='delivery_tags'>\n            {\n                props.orders.map((order: Order) => {\n                    const orderItems: OrderItem[] = order.items.filter((orderItem: OrderItem) => orderItem.cart_item.delivery_date === target_date)\n\n                    return (\n                        <div className='quarter_print_page' key={`order_${order.id}`}>\n                            <span className=\"contact-info\">{order.contact_name}</span>\n                            <span className=\"street-address\">{order.street_address} {order.unit}</span>\n                            <span className=\"street-address\">{order.city} {order.zip}</span>\n                            <span className=\"contact-info\">{order.phone_number}</span>\n                            <b>Items:</b>\n                            <div className=\"delivery-tag-items\">\n                                {\n                                    orderItems.map((orderItem: OrderItem) => {\n                                        return(\n                                            <div className=\"delivery-tag-item\" key={`oi_${orderItem.id}`}>\n                                                {orderItem.cart_item.quantity.toString() + \" \" + helpers.extractCartItemDescription(orderItem.cart_item)}\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>\n                            {order.notes &&\n                                <div className=\"delivery-instructions\">\n                                    <br/>\n                                    _______________________________\n                                    <h4>Delivery Instructions:</h4>\n                                    <div className=\"delivery_instructions_text\">\n                                        {order.notes}\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    )\n                    })\n            }\n        </div>\n    )\n}\n\ninterface PrepDisplayProps {\n    orderItems: OrderItem[],\n    date: Date\n}\n\nexport const PrepDisplay = (props: PrepDisplayProps): React.ReactElement => {\n\n    type CondensedListItems = {count: number, dish: string, protein: string, spicy_text:string};\n\n    const spicy: string[] = ['No', 'mild', 'spicy'];\n    let condensedList: {[key: string]: CondensedListItems} = {};\n    let key: string = \"\";\n    let dish: string = \"\";\n    let protein: string = \"\";\n    let spicy_text: string = \"\";\n    let dishCount: number = 0;\n\n    props.orderItems.forEach((orderItem: OrderItem) => {\n        dish = orderItem.cart_item.menu_item.name;\n        protein = (orderItem.cart_item.menu_item.proteins.split(':').length > 1 && orderItem.cart_item.protein !== \"\") ?\n                    orderItem.cart_item.protein : \"\";\n        spicy_text = (orderItem.cart_item.menu_item.spicy) ? spicy[orderItem.cart_item.spicy] : \"\";\n\n        key = `${dish}:${protein}:${spicy_text}`;\n        if (!(key in condensedList))\n            condensedList[key] = {count: 0, dish, protein, spicy_text};\n\n        condensedList[key].count += orderItem.cart_item.quantity;\n        dishCount += orderItem.cart_item.quantity;\n    });\n\n    return (\n        <div className={'prep_list'}>\n            <span className='prep_list__header'>{momentHelper.asDateSlug(props.date)} &nbsp;&nbsp;:&nbsp;&nbsp;{dishCount} items</span>\n            <table className='prep_list__list'>\n                <thead>\n                    <tr>\n                        <td>#</td>\n                        <td>Dish</td>\n                        <td>Protein</td>\n                        <td>Spicy</td>\n                        <td>L</td>\n                        <td>P</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        Object.keys(condensedList).sort().map((key: string, index: number) => {\n                            return (\n                                <tr className={`${index % 2 ? '' : 'print-row-dark'}`} key={key}>\n                                    <td>{condensedList[key].count}</td>\n                                    <td>{condensedList[key].dish}</td>\n                                    <td>{condensedList[key].protein}</td>\n                                    <td>{condensedList[key].spicy_text}</td>\n                                    <td></td>\n                                    <td></td>\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </table>\n        </div>\n    )\n}","import React from 'react';\nimport moment from 'moment';\nimport deliveryWindowService from '../../services/DeliveryWindowService';\nimport {DeliveryWindowWithCountsDTO} from \"../../models/DeliveryWindowModel\";\nimport {RouteComponentProps} from 'react-router-dom';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport BrowserWindowTools, {PrepDisplay} from \"./BrowserWindowTools\";\n\nimport './browser.scss';\n\ninterface Props extends RouteComponentProps {\n    match: any;\n}\n\ninterface State {\n    loading: boolean,\n    targetDate: Date,\n    counts: DeliveryWindowWithCountsDTO[],\n    documentToPrint: any\n}\n\nexport default class BrowserFullDay extends React.Component<Props, State> {\n\n    state = {\n        loading: true,\n        targetDate: new Date(),\n        counts: [],\n        documentToPrint: null\n    }\n\n    public componentDidMount() {\n        const { match: { params } } = this.props;\n\n        deliveryWindowService.listWithCounts(params.targetDate)\n            .then((counts: DeliveryWindowWithCountsDTO[]) => this.setState({counts, targetDate: new Date(params.targetDate)}))\n            .catch( err => console)\n            .then(() => this.setState({loading: false}))\n    }\n\n    private printDocument = (documentToPrint: any): void => {\n        this.setState({documentToPrint}, () => window.print())\n    }\n\n    public render() {\n        if (this.state.loading)\n            return(<LoadingOverlay />)\n\n        const m = moment(this.state.targetDate);\n        console.log(m.zoneName());\n        return(\n            <div className={'row browser_full_day justify-content-center'}>\n                <div className={'col-12 col-md-7'}>\n                    <div className={'col-12'}>\n                        <button\n                            onClick={() => this.props.history.goBack()}\n                            >return to calendar</button>\n                        <div className={'col-12 row browser_full_day__date'}>\n                            {m.utc().format('YYYY-MM/DD')}\n                        </div>\n                        <div className={'col-12'}>\n                            <div className={'row'}>\n                                {\n                                    this.state.counts.map((dto:DeliveryWindowWithCountsDTO) =>\n                                        <div className={'col-12 col-md-6'} key={`dto_${dto.window.id}`}>\n                                            <BrowserWindowTools\n                                                dto={dto}\n                                                date={this.state.targetDate}\n                                                key={`dto_${dto.window.id}`}\n                                                printDocument={this.printDocument} />\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"col-12 print-sheet\">\n                    {this.state.documentToPrint}\n                </div>\n            </div>\n        )\n    }\n}","import React, {useEffect, useState} from 'react';\nimport DeliveryWindow from '../../models/DeliveryWindowModel';\nimport deliveryWindowService from '../../services/DeliveryWindowService';\n\nimport './delivery_windows.scss';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\n\nimport { pythonDays } from '../../constants';\nimport { useHistory } from 'react-router-dom';\n\ninterface Props {\n}\n\nexport const DeliveryWindows = (props: Props): React.ReactElement => {\n    const [showLoading, setShowLoading] = useState(true);\n    const [deliveryWindows, setDeliveryWindows] = useState<DeliveryWindow[]>([])\n    const history = useHistory();\n\n    useEffect(() => {\n        deliveryWindowService.get<DeliveryWindow[]>()\n            .then((deliveryWindows: DeliveryWindow[]) => {\n                setShowLoading(false);\n                setDeliveryWindows(deliveryWindows);\n            })\n            .catch( err => window.alert('Unable to load delivery windows'))\n    }, [])\n\n\n        if (showLoading)\n            return(<LoadingOverlay />)\n\n        return (\n            <div className=\"row delivery_windows\">\n                <div className={'col-12'}>\n                    <table className={'table'}>\n                        <thead>\n                            <tr>\n                                <th>active</th>\n                                <th>name</th>\n                                <th>day</th>\n                                <th>time</th>\n                                <th>date</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            deliveryWindows.map((window: DeliveryWindow) =>\n                                <tr\n                                    key={`dw_${window.id}`}\n                                    className={`delivery_windows__window ${window.active ? '' : 'delivery_windows__window-inactive'}`}\n                                    onClick={() => history.push({pathname: `/dashboard/delivery_window/edit/${window.id}`})}\n                                >\n                                    <td>{window.active ? 'yes' : 'no'}</td>\n                                    <td>{window.name}</td>\n                                    <td>{pythonDays[window.day]}</td>\n                                    <td>{window.start_time + ' - ' + window.end_time}</td>\n                                    <td>{window.one_off_date}</td>\n                                </tr>\n                            )\n                        }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n\n}\n\nconst DeliveryWindowContainer = (props: {deliveryWindow: DeliveryWindow, windowSelected: (deliveryWindow: DeliveryWindow) => void}): any => {\n    return (\n        <div className=\"delivery-window-container\" onDoubleClick={()=>{props.windowSelected(props.deliveryWindow)}}>\n            {props.deliveryWindow.name}\n        </div>\n    )\n}","import React from 'react';\n\n\nexport default class DeliveryWindowEdit extends React.Component<any, any> {\n\n    public componentDidMount() {\n\n    }\n\n    public render() {\n        return (\n            <div className={'row delivery_window_edit'}>\n\n            </div>\n        )\n    }\n}","import React from 'react'; \nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport { AuthState } from './store/auth/authReducer';\nimport { AppState, AppActions } from './store/store';\nimport { dispatchLogin } from './store/auth/authActions';\nimport authService from './services/AuthService';\nimport User from './models/UserModel';\n\nimport './App.css';\n\nimport Navigation from './components/nav/Navigation';\nimport Deliveries from './components/delivery/Deliveries';\nimport DeliveryDay from './components/delivery/DeliveryDayComponent';\nimport Menu from './components/menu/Menu';\nimport Login from './components/authentication/Login';\nimport Orders from './components/order/Orders';\nimport Export from './components/order/Export';\nimport OrderEdit from './components/order/OrderEdit';\nimport Coupons from './components/coupon/Coupons';\nimport DeliveryDuplicate from './components/delivery/DeliveryDuplicate';\nimport CouponAdd from \"./components/coupon/CouponAdd\";\nimport OrderEmail from \"./components/order/OrderEmail\";\nimport {Mail} from \"./components/mail/Mail\";\nimport {Newsletters} from \"./components/newsletter/Newsletters\";\nimport NewsletterEdit from \"./components/newsletter/NewsletterEdit\";\nimport Home from \"./components/home/Home\";\nimport BrowserTool from \"./components/browser_tool/BrowserTool\";\nimport BrowserFullDay from \"./components/browser_tool/BrowserFullDay\";\nimport {DeliveryWindows} from \"./components/delivery_windows/DeliveryWindows\";\nimport DeliveryWindowEdit from \"./components/delivery_windows/DeliveryWindowEdit\";\n\ninterface LinkStateProps {\n  auth: AuthState\n}\n\ninterface LinkDispatchProps {\n  login: (user: User, operator_token: string) => void\n}\n\ntype Props = LinkStateProps & LinkDispatchProps;\n\ninterface State { \n  connecting: boolean,\n  loggedIn: boolean // temporary flag while auth login is completed\n}\n\nclass App extends React.Component<Props, State> {\n\n  state = {\n    connecting: true,\n    loggedIn: false\n  }\n\n  public componentDidMount = () => {\n    const refresh_token: string | null = window.localStorage.getItem('refresh_token');\n    if(refresh_token !== null) {\n        authService.validateToken(refresh_token)\n              .then((user: User) => {\n                this.setState({connecting: false, loggedIn: true});\n                this.props.login(user, \"\");\n              })\n              .catch((err: any) => {\n                this.setState({connecting: false, loggedIn: false});\n              })\n    } else {\n        this.setState({connecting: false, loggedIn: false});\n    }\n  }\n\n  public render() {\n    if (this.state.connecting)\n      return <div>Connecting...</div>\n\n    if (!this.props.auth.loggedIn)\n      return <Login />\n\n    const PrivateRoute = ({component, ...rest}: any) => {\n      const routeComponent = (props: any) => (\n          this.props.auth.loggedIn || this.state.loggedIn\n              ? React.createElement(component, props)\n              : <Redirect to={{pathname: '/dashboard/login'}}/>\n      );\n      return <Route {...rest} render={routeComponent}/>;\n    };\n    \n    return (\n\t\t<div className=\"container-fluid\">\n\t\t\t\n\t\t\t{this.props.auth.loggedIn &&\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t<Navigation/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t<div className=\"row app-page\">\n\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t<br/>\n\t\t\t\t\t<Switch>\n                        <PrivateRoute path='/dashboard/browser/day/:targetDate' component={BrowserFullDay} />\n                        <PrivateRoute path='/dashboard/browser/:month/:year' component={BrowserTool} />\n                        <PrivateRoute path='/dashboard/browser' component={BrowserTool} />\n                        <PrivateRoute path=\"/dashboard/coupon/add\" component={CouponAdd}/>\n                        <PrivateRoute path=\"/dashboard/coupons\" component={Coupons} />\n                        <PrivateRoute path=\"/dashboard/deliveries\" component={Deliveries} />\n                        <PrivateRoute path=\"/dashboard/delivery/edit/:id\" component={DeliveryDay} />\n                        <PrivateRoute path=\"/dashboard/delivery/duplicate/:id\" component={DeliveryDuplicate} />\n                        <PrivateRoute path='/dashboard/delivery_window/edit/:id' component={DeliveryWindowEdit} />\n                        <PrivateRoute path=\"/dashboard/delivery_window\" component={DeliveryWindows} />\n                        <PrivateRoute path=\"/dashboard/mail\" component={Mail} />\n                        <PrivateRoute path=\"/dashboard/menu\" component={Menu} />\n                        <PrivateRoute path='/dashboard/newsletter/edit/:id' component={NewsletterEdit} />\n                        <PrivateRoute path='/dashboard/newsletter' component={Newsletters} />\n                        <PrivateRoute path=\"/dashboard/orders/export\" component={Export} />\n                        <PrivateRoute path=\"/dashboard/orders/edit/:id\" component={OrderEdit} />\n                        <PrivateRoute path='/dashboard/order/mail/:id' component={OrderEmail} />\n                        <PrivateRoute path=\"/dashboard/orders\" component={Orders} />\n                        <PrivateRoute path='/dashboard/' component={Home} />\n                        <Route path=\"/dashboard/login\" component={Login} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state: AppState): LinkStateProps => ({auth: state.authReducer});\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AppActions>): LinkDispatchProps => ({\n  login: bindActionCreators(dispatchLogin, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}