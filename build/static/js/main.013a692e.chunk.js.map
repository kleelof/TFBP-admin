{"version":3,"sources":["assets/loader.gif","store/store.ts","models/ModelBase.ts","store/auth/authReducer.ts","models/UserModel.ts","store/auth/authActions.ts","config.js","services/axiosApi.ts","components/menu/MenuItems.tsx","services/Service.ts","services/AuthService.ts","components/nav/Navigation.tsx","services/DeliveryDayService.ts","models/DeliveryDayModel.ts","helpers/MomentHelper.ts","helpers/helpers.ts","components/delivery/DeliveryDays.tsx","components/delivery/Deliveries.tsx","services/MenuItemService.ts","services/DeliveryDayItemService.ts","components/widgets/inputWidget/InputWidget.tsx","components/widgets/searchWidget/SearchWidget.tsx","models/MenuItemModel.ts","models/DeliveryDayItemModel.ts","components/delivery/DeliveryMenuItemOptionsComponent.tsx","components/delivery/DeliveryDayItemComponent.tsx","components/delivery/DeliveryDayComponent.tsx","components/menu/MenuItemEdit.tsx","components/widgets/imageUploader/ImageUploader.tsx","components/overlays/LoadingOverlay.tsx","components/nav/SubNavigation.tsx","components/menu/NewMenuItem.tsx","components/menu/Menu.tsx","components/authentication/Login.tsx","services/OrderService.ts","components/order/Orders.tsx","services/OrderItemService.ts","components/order/Export.tsx","models/OrderModel.ts","services/AdminService.ts","components/order/OrderEmail.tsx","components/order/OrderEdit.tsx","models/Coupon.ts","services/CouponService.ts","components/coupon/CouponComponent.tsx","components/coupon/Coupons.tsx","components/delivery/DeliveryDuplicate.tsx","components/coupon/CouponAdd.tsx","models/MailingListModel.ts","services/MailingListService.ts","components/mail/MailingListEntry.tsx","components/mail/MailingList.tsx","services/MailTemplateService.ts","models/MailTemplate.ts","components/mail/MailTemplateComponent.tsx","components/mail/MailTemplates.tsx","services/DeliveryWindowService.ts","models/DeliveryWindowModel.ts","components/mail/MailMassMailer.tsx","components/mail/Mail.tsx","services/NewsletterService.ts","components/newsletter/NewslettersNewsletter.tsx","models/Newsletter.ts","components/newsletter/NewsletterAdd.tsx","components/newsletter/Newsletters.tsx","components/newsletter/NewsletterEdit.tsx","constants.ts","components/browser_tool/BrowserDay.tsx","components/browser_tool/BrowserTool.tsx","components/browser_tool/BrowserWindowTools.tsx","components/browser_tool/BrowserFullDay.tsx","components/delivery_windows/DeliveryWindowsWindow.tsx","components/delivery_windows/DeliveryWindows.tsx","services/ZoneService.ts","components/delivery_windows/DeliveryWindowEdit.tsx","models/ZoneModel.ts","models/ZipcodeModel.ts","components/zone/ZoneCode.tsx","services/ZipService.ts","components/zone/ZoneTool.tsx","components/zone/Zones.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","actions","ModelBase","id","created_at","defaultState","loggedIn","user","email","operator_token","rootReducer","combineReducers","authReducer","state","action","type","LOGIN","LOGOUT","window","localStorage","removeItem","store","createStore","applyMiddleware","thunk","dispatchLogin","dispatch","login","dispatchLogout","config","API_URL","OPERATOR_TOKEN","axiosInstance","axios","create","baseURL","timeout","headers","getItem","interceptors","response","use","a","error","originalRequest","status","refresh_token","post","refresh","setItem","data","access","defaults","console","log","Promise","reject","ItemsModes","Service","_service_url","appName","view","path","resolve","get","then","resp","catch","err","content","patch","delete","this","DTO","useFormData","multipartFormPost","_post","_delete","params","_get","querizeObject","date","startDate","endDate","formData","FormData","Object","keys","forEach","key","append","_patch","search","object","map","join","multipartFormUpdate","authenticate","password","logout","viewPath","validateToken","refreshToken","Navigation","doLogin","props","to","className","data-toggle","data-target","aria-controls","aria-expanded","aria-label","auth","onClick","setState","React","Component","connect","bindActionCreators","attachDeliveryWindow","day","detachDeliveryWindow","duplicateDeliveryDay","deliveryDay","start_date","end_date","weekID","menuItemID","attach","DeliveryDay","day_items","asDateSlug","moment","utc","format","asFullDate","asShortDate","days","months","spicy","proteins","convertToTwelveHour","twentyFourHourTime","parts","split","hour","parseInt","amPm","toString","extractCartItemDescription","cartItem","description","menu_item","name","protein","length","formatDeliveryWindow","excludeDate","windowText","momentHelper","start_time","end_time","sortOrderItemsByDate","orderItems","sortedItems","item","cart_item","delivery_date","push","sortDeliveryDayItemsByCategory","items","en","ap","si","de","category","groupMenuItemsByCategory","sort","groupedItems","compareMenuItemsByName","ia","ib","DeliveryDays","history","useHistory","style","whiteSpace","helpers","src","image","alt","pathname","Deliveries","loaded","deliveryDays","creatingDeliveryDay","editId","componentDidMount","deliveryDayService","Date","alert","createDeliveryDay","add","updateData","e","target","value","deliveries","b","disabled","onChange","loadByCategory","InputWidget","timer","lastSavedValue","componentWillReceiveProps","initialValue","handleOnKeyPress","keyCode","sendUpdate","updateValue","resetTimer","defaultUpdateValue","onUpdate","clearInterval","clearTimeout","setTimeout","onBlur","onKeyDown","required","placeholder","SearchWidget","onclick","event","close","itemSelected","doSearch","text","service","MenuItem","price","allergens","active","DeliveryDayItemDTO","delivery_day","sold_out","DeliveryDayItem","getDTOxxx","DeliveryMenuItemOptions","remove","confirm","saving","deliveryDayItemService","deliveryDayItem","refreshItems","save","update","parseFloat","checked","DeliveryDayItemComponent","indexOf","DeliveryDayComponent","loading","menuItems","deliveryWindows","match","refreshDay","menuItemService","ItemModes","MenuItems","useParams","useState","setMenuItems","useEffect","toLowerCase","ImageUploader","fileElement","reloadAttempted","imageURL","loadImage","componentDidUpdate","clearImage","preventDefault","hasImage","newImageLoaded","url","toDataURL","document","getElementById","loadingImage","onInputChanged","files","readFile","file","size","maxSizeInMb","maximumSizeInMb","result","currentImage","dataURL","open","click","reader","FileReader","onload","replace","readAsDataURL","xhr","XMLHttpRequest","onloadend","responseType","send","ref","input","accept","allowedFileTypes","uploadPrompt","LoadingOverlay","loadingAnimation","MenuItemEdit","temporaryImage","menuItem","viewingServings","hasBeenUpdated","allergenSelected","checkboxesToString","code","splice","final","substr","onNewImageLoaded","proteinSelected","menuItemDTO","itemAdded","updateMenuItem","updateOptions","saveBtnDisabled","mode","rows","defaultValue","allergen","SubNavigation","navItems","link","title","NewMenuItem","setName","setCategory","setOpen","newMenuItem","Menu","Math","random","component","MenuEdit","Login","loggingIn","authService","dto","href","getCompletedOrders","Orders","orders","orderStatuses","getByDateRange","orderService","searchByOrderDateRange","undefined","order","index","deliveryDates","orderItem","quantity","contact_name","public_id","phone_number","order_status","getCompleted","Export","pullDate","pullType","loadData","loadOrderItems","loadOrders","orderItemService","print","fileContent","filter","street_address","unit","city","zip","bb","Blob","createElement","download","URL","createObjectURL","DeliveryTagsDisplay","notes","PrepDisplay","condensedList","dish","spicy_text","dishCount","count","Order","uuid","nonce","tip","square_payment","OrderDTO","cart_items","coupon","sendWeeklyEmails","sendSupportEmail","subject","body","payload","sendMassMail","options","send_email","OrderEmail","submit","submitting","adminService","include_order","toggleIncludeOrder","OrderEdit","updating","updatesPending","returnToOrders","saveUpdates","orderedItems","htmlFor","JSON","stringify","Coupon","calculation_type","expire","start_value","current_value","remaining_uses","expire_date","setDate","getDate","CouponComponent","setCoupon","deactivating","setDeactivating","couponService","couponUpdated","toFixed","Coupons","coupons","addingCoupon","c","addCoupon","DeliveryDuplicate","duplicating","datesAreValid","duplicate","CouponAdd","cancel","finally","MailingListModel","MailingListEntry","checkDTO","setCode","setActive","setEmail","mailingListService","MailingList","addNewEntry","newEmail","newCode","entry","mailingList","get_template_by_slug","slug","MailTemplate","MailTemplateComponent","template","templateSlug","mailTemplateService","originalText","MailTemplates","listWithCounts","targetDate","retrieveOrders","deliveryWindowId","addZone","zoneId","removeZone","DeliveryWindow","zones","MailMassMailer","who","message","deliveryDate","includeSamples","all","deliveryWindowService","values","deliveryWindow","option","goodToSend","sendMail","confirmMessage","Mail","release","newsletterId","sendEmailSample","NewslettersNewsletter","newsletter","release_date","Newsletter","NewsletterAdd","creating","newsletterService","newsLetter","withRouter","Newsletters","newsLetters","setNewsLetters","setLoading","newsletters","NewsletterEdit","saveNewsletter","nl","sendTestEmail","sendingEmail","saveDisabled","pythonDays","BrowserDay","countsData","setCountsData","toISOString","slice","order_count","dish_count","BrowserTool","today","month","getMonth","year","getFullYear","viewDay","changeMonth","daysInMonth","dateNdx","getDay","week","weeks","x","BrowserWindowTools","downloadDeliverySpreadsheet","y","printDocument","showLoading","target_date","BrowserFullDay","counts","documentToPrint","goBack","DeliveryWindowsWindow","runText","DeliveryWindows","setShowLoading","setDeliveryWindows","DeliveryWindowEdit","setWindow","setDisabled","setZones","selectedZone","setSelectedZone","zoneService","zone","Zone","zip_codes","Zipcode","ZoneCode","removeCode","ZoneTool","codes","setCodes","setNewCode","zoneName","setZoneName","zipService","tcode","float","Zones","App","connecting","PrivateRoute","rest","render","Boolean","location","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.013a692e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.9a2c42ba.gif\";","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\n\nimport { AuthActionTypes } from './auth/authActions';\nimport { authReducer } from './auth/authReducer';\n\nexport enum actions {\n    LOGIN,\n    LOGOUT\n};\n\nexport type AppActions = AuthActionTypes;\n\nexport const rootReducer = combineReducers({authReducer});\n\nexport type AppState = ReturnType<typeof rootReducer>; \n\nexport const store = createStore(\n    rootReducer,\n    applyMiddleware( \n        thunk as ThunkMiddleware<AppState, AppActions>)\n)","export default class ModelBase {\n\n    public id: number = -1;\n    public created_at!: string;\n    \n}","import { AuthActionTypes } from \"./authActions\";\nimport User from \"../../models/UserModel\";\nimport { actions } from \"../store\";\n\nexport interface AuthState {\n    loggedIn: boolean\n    user: User,\n    operator_token: string\n}\n\nconst defaultState: AuthState = {\n    loggedIn: false,\n    user: new User(),\n    operator_token: ''\n}\n\nconst authReducer = (\n    state = defaultState,\n    action: AuthActionTypes\n): AuthState => {\n    switch(action.type) {\n        case actions.LOGIN:\n            state.user = action.user\n            state.operator_token = action.operator_token\n            state.loggedIn = true;\n            return {...state};\n    \n        case actions.LOGOUT:\n            state.loggedIn = false;\n            window.localStorage.removeItem('access_token');\n            window.localStorage.removeItem('refresh_token');\n            return {...state};\n    }\n    return state;\n}\n\nexport { authReducer };","import ModelBase from \"./ModelBase\";\n\nexport default class User extends ModelBase {\n\n    email!: string;\n}","import { actions } from '../store';\nimport { Dispatch } from 'react';\nimport User from '../../models/UserModel';\n\ninterface Login { type: typeof actions.LOGIN, user: User, operator_token: string };\nexport const login = (user: User, operator_token: string): AuthActionTypes => ({ type: actions.LOGIN, user, operator_token });\nexport const dispatchLogin = (user: User, operator_token: string) => {\n    return(dispatch: Dispatch<AuthActionTypes>) => {\n        dispatch(login(user, operator_token));\n    }\n}\n\ninterface Logout { type: typeof actions.LOGOUT };\nexport const logout = (): AuthActionTypes => ({ type: actions.LOGOUT });\nexport const dispatchLogout = () => {\n    return(dispatch: Dispatch<AuthActionTypes>) => {\n        dispatch(logout());\n    }\n}\n\nexport type AuthActionTypes = Login | Logout;\n","const dev = {\n    API_URL: \"http://localhost:8000\",\n    OPERATOR_TOKEN: '8efedf49-db0e-4afe-9a96-2989fe599220'\n}\n\nconst prod = {\n    API_URL: \"\",\n    OPERATOR_TOKEN: '8500f3e1-0282-4d09-a752-6756d188f584'\n}\n\nexport const config = process.env.NODE_ENV === 'development' ? dev : prod;","import axios from 'axios';\nimport { config } from '../config';\n\nconst axiosInstance = axios.create({\n    baseURL: config.API_URL,\n    timeout: 0,\n    headers: {\n        'Authorization': \"JWT \" + window.localStorage.getItem('access_token'),\n        'Content-Type': 'application/json',\n        'accept': 'application/json',\n        'operator-token': window.localStorage.getItem('operator_token')\n    }\n});\n\naxiosInstance.interceptors.response.use(\n    response => response,\n    async error => {\n      const originalRequest = error.config;\n        if (error.response.status === 401) { // && error.response.statusText === \"Unauthorized\"\n            const refresh_token = window.localStorage.getItem('refresh_token');\n            try {\n                const response = await axiosInstance.post('/api/core/auth/token/refresh/', { refresh: refresh_token });\n                window.localStorage.setItem('access_token', response.data.access);\n                window.localStorage.setItem('refresh_token', response.data.refresh);\n                axiosInstance.defaults.headers['Authorization'] = \"JWT \" + response.data.access;\n                originalRequest.headers['Authorization'] = \"JWT \" + response.data.access;\n                return axiosInstance(originalRequest);\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n      return Promise.reject(error);\n  }\n);\nexport default axiosInstance","import React, { useEffect, useState } from 'react';\nimport MenuItem from '../../models/MenuItemModel';\nimport { useParams, Link } from 'react-router-dom';\nimport menuItemService from '../../services/MenuItemService';\nimport {config} from '../../config';\nimport './menu.scss';\n\nexport const MenuItemCategories: any = {\n    en: 'Entrees',\n    ap: 'Appetizers',\n    si: 'Sides',\n    de: 'Desserts'\n}\n\nexport enum ItemsModes {\n    menu,\n    deliveryDay\n}\n\nexport const MenuItems = (): React.ReactElement => {\n    const params: any = useParams();\n    const [menuItems, setMenuItems] = useState<MenuItem[]>([])\n\n    useEffect(() => {\n        menuItemService.loadByCategory(params.category)\n            .then((items: MenuItem[]) => {\n                setMenuItems(items);\n            })\n            .catch( err => {window.alert('Unable To Load Menu Items')})\n        return () => {\n        }\n    }, [params.category])\n\n    const sortedItems: MenuItem[] = menuItems.sort((a: MenuItem, b: MenuItem) => a.name > b.name ? 1 : -1);\n    \n    return(\n        <div className=\"row menu_items mt-3\">\n            {\n                sortedItems.sort((a: MenuItem, b: MenuItem) =>\n                                    a.name.toLowerCase() > b.name.toLowerCase() ?\n                                        1 : a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 0 )\n                            .map((item: MenuItem) => {\n                    return(\n                        <div className=\"col-6 col-md-2 menu_items__item\" key={`mi_${item.id}`}>\n                            <Link className=\"row\" to={`/dashboard/menu/edit/${item.id}/`}>\n                                    <div className=\"col-12 menu_items__menuitem_name no_wrap_text\">{item.name}</div>\n                                    <div className=\"col-12 item__item_image\">\n                                        <img src={config.API_URL + item.image} alt={item.name}/>\n                                    </div>\n                            </Link>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}","import { config } from '../config.js';\nimport axiosInstance from './axiosApi';\n\ninterface AxiosResponse {\n    data: any\n}\n\nexport default class Service {\n    protected _service_url: string = config.API_URL;\n    protected appName: string = \"\";\n    protected view: string = \"\";\n\n    public get viewPath(): string {\n        return `${this.appName}/${this.view}`;\n    }\n\n    public _get<T>(path: string): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            axiosInstance.get(`${this._service_url}/api/${path}`)\n                .then ((resp: AxiosResponse) => {\n                    resolve(resp.data);\n                })\n                .catch( err => reject(err))\n        })\n    }\n\n    public _post<T>(path: string, content: any, headers?: any): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            axiosInstance.post(`${this._service_url}/api/${path}`, content, headers)\n                .then((resp:AxiosResponse) => {\n                    resolve(resp.data);\n                })\n                .catch( err => reject(err))\n        })\n    }\n\n    public _patch<T>(path: string, content: any, headers?: any): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            axiosInstance.patch(`${this._service_url}/api/${path}`, content, headers)\n                .then((resp: AxiosResponse) => {\n                    resolve(resp.data)\n                })\n                .catch( err => reject(err));\n        })\n    }\n\n    public _delete<T>(path: string): Promise<T> {\n        return axiosInstance.delete(`${this._service_url}/api/${path}`)\n    }\n\n    public add<T>(DTO: T, useFormData: boolean = false): Promise<T> {\n        if (useFormData){\n            return this.multipartFormPost<T>(DTO);\n        } else {\n            return this._post<T>(`${this.appName}/${this.view}/`, DTO);\n        }\n    }\n\n    public delete<T>(id: number): Promise<T> {\n        return this._delete<T>(`${this.appName}/${this.view}/${id}/`);\n    }\n\n    public get<T>(id: number | null = null, params: {} = {}): Promise<T> {\n        if (id !== null) {\n            return this._get(`${this.appName}/${this.view}/${id}/${this.querizeObject(params)}`);\n        } else {\n            return this._get(`${this.appName}/${this.view}/?${this.querizeObject(params)}`);\n        }\n    }\n\n    public getByDate<T>(date: string): Promise<T> {\n        return this._get<T>(`${this.appName}/${this.view}/get_by_date/?date=${date}`);\n    }\n\n    public getByDateRange<T>(startDate?: string, endDate?: string): Promise<T> {\n        let path: string = `${this.appName}/${this.view}/get_by_date_range/?`;\n        if (startDate) path += `start_date=${startDate}&`;\n        if (endDate) path += `end_date=${endDate}`; \n        return this._get<T>(path);\n    }\n\n    public multipartFormPost<T>(content: any): Promise<T> {\n        const formData: FormData = new FormData();\n        Object.keys(content).forEach( key => {\n            formData.append(key, content[key]);\n        })\n        console.log(formData);\n        return this._post<T>(`${this.appName}/${this.view}/`, formData, {headers: {'Content-Type': 'multipart/form-data'}});\n    }\n\n    public multipartFormUpdate<T>(id: number, content: any): Promise<T> {\n        const formData: FormData = new FormData();\n        Object.keys(content).forEach( key => {\n            formData.append(key, content[key]);\n        })\n        console.log(formData);\n        return this._patch<T>(`${this.appName}/${this.view}/${id}/`, formData, {headers: {'Content-Type': 'multipart/form-data'}});\n    }\n\n    public search<T>(search: String): Promise<T> {\n        return this._get(`${this.appName}/${this.view}/?search=${search}`);\n    }\n\n    private querizeObject(object: any): String {\n        return Object.keys(object).map(key => key + '=' + object[key]).join('&')\n    }\n\n    public softDelete<T>(id: number): Promise<T> {\n        return this._get(`${this.appName}/${this.view}/soft_delete/${id}/`);\n    }\n\n    public update<T>(id: number, DTO: T, useFormData:boolean = false): Promise<T> {\n        if (useFormData){\n            return this.multipartFormUpdate<T>(id, DTO);\n        } else {\n            return this._patch<T>(`${this.appName}/${this.view}/${id}/`, DTO);\n        }\n    }\n}","import Service from \"./Service\";\n\nimport AuthenticateDTO from \"../dto/AuthenticateDTO\";\nimport User from \"../models/UserModel\";\n\nclass AuthService extends Service {\n    appName = 'core';\n    view = 'auth';\n\n    public authenticate = (email: string, password: string): Promise<AuthenticateDTO> => {\n        this.logout();\n        \n        return new Promise<AuthenticateDTO>((resolve, reject) => {\n            this._post(`${this.viewPath}/authenticate/`, {email, password})\n            .then( (resp: any) => {console.log(resp);\n                if (resp.operator_token !== null) {\n                    window.localStorage.setItem('access_token', resp.access);\n                    window.localStorage.setItem('refresh_token', resp.refresh);\n                    window.localStorage.setItem('operator_token', resp.operator_token)\n                    resolve(resp);\n                } else {\n                    reject (resp);\n                }\n            })\n            .catch( (resp: any) => reject(resp))\n        })\n    }\n\n    public logout = (): void => {\n        window.localStorage.removeItem('access_token');\n        window.localStorage.removeItem('refresh_token');\n        window.localStorage.removeItem('user_id');\n        window.localStorage.removeItem('username');\n    }\n\n    public validateToken = (refreshToken: string): Promise<User> => {\n        return new Promise<User>((resolve, reject) => {\n            this._get<User>(`${this.viewPath}/user`)\n            .then((user: User) => {\n                resolve(user);\n            })\n            .catch( err => reject(err))\n        })\n    }\n}\n\nexport default new AuthService();","import React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport { AuthState } from '../../store/auth/authReducer';\nimport { AppState, AppActions } from '../../store/store';\nimport { dispatchLogout } from '../../store/auth/authActions';\n\ninterface LinkStateProps {\n    auth: AuthState\n}\n\ninterface LinkDispatchProps {\n    logout: () => void;\n}\n\ntype Props = LinkStateProps & LinkDispatchProps\n\ninterface State {\n    doLogin: boolean\n}\n\nclass Navigation extends React.Component<Props, State> {\n\n    state = {\n        doLogin: false\n    }\n\n    private logout = (): void => {\n        this.props.logout();\n    }\n\n    public render() {\n        if (this.state.doLogin) return <Redirect to=\"/dashboard/login\" />\n\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            <Link className=\"nav-link\" to=\"/dashboard/browser\">\n                                Home</Link>\n                        </li>\n                        <li className=\"nav-item active\">\n                            <Link className=\"nav-link\" to=\"/dashboard/menu/en\">\n                                Menu</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/dashboard/deliveries\">\n                                Delivery Menus</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/dashboard/delivery_window\">\n                                Delivery Windows</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/dashboard/zone\">\n                                Delivery Zones</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/dashboard/coupons\">\n                                    Coupons</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/dashboard/mail\">\n                                    Mail</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/dashboard/newsletter\">\n                                    Newsletters</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to='/dashboard/orders'>Orders</Link>\n                        </li>\n                    </ul>\n                </div>\n                <span className=\"navbar-text\">\n                    {\n                        this.props.auth.loggedIn ?\n                            <button className=\"btn btn-danger\" onClick={this.logout}>Logout</button>\n                            :\n                            <div \n                                className=\"btn btn-success\"\n                                onClick={() => this.setState({doLogin: true})}\n                                >Login</div>\n                    }\n                </span> \n            </nav>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppState): LinkStateProps => ({\n    auth: state.authReducer\n})\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AppActions>): LinkDispatchProps => ({\n    logout: bindActionCreators(dispatchLogout, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation) ","import Service from './Service';\nimport WeekMenuItemDTO from '../dto/WeekMenuItemDTO';\nimport DeliveryDay from '../models/DeliveryDayModel';\nimport DeliveryWindow from '../models/DeliveryWindowModel';\n\nclass DeliveryDayService extends Service {\n    appName = \"dashboard\";\n    view = \"delivery_day\";\n\n    public attachWeekMenuItem(weekID: number, menuItemID: number, attach: boolean = true): Promise<WeekMenuItemDTO> {\n        console.log(weekID, menuItemID);\n        return this._get<WeekMenuItemDTO>(`${this.appName}/${this.view}/attach_week_menu_item?week=${weekID}/${menuItemID}/${attach === true? '1': '0'}`)\n    }\n\n    public attachDeliveryWindow = (day: DeliveryDay, window: DeliveryWindow): Promise<any> => {\n        return this._get(`${this.appName}/${this.view}/attach_delivery_window/${day.id}/${window.id}/`)\n    }\n\n    public detachDeliveryWindow = (day: DeliveryDay, window: DeliveryWindow): Promise<any> => {\n        return this._get(`${this.appName}/${this.view}/detach_delivery_window/${day.id}/${window.id}/`)\n    }\n\n    public duplicateDeliveryDay = (deliveryDay: DeliveryDay, start_date: string, end_date: string): Promise<DeliveryDay> => {\n        return this._get<DeliveryDay>(`${this.appName}/${this.view}/duplicate/?date=${start_date}&end_date=${end_date}&delivery_day=${deliveryDay.id}`);\n    }\n}\n\nexport default new DeliveryDayService();","import DeliveryDayItem from \"./DeliveryDayItemModel\";\nimport ModelBase from \"./ModelBase\";\nimport { DeliveryWindowDTO } from \"./DeliveryWindowModel\";\n\nexport default class DeliveryDay extends ModelBase {\n\n    public date!: string;\n    public end_date!: string;\n    public day_items!: DeliveryDayItem[];\n    //public delivery_windows!: DeliveryWindow[];\n\n    constructor(date?: string, id?: number, end_date?: string, day_items?: DeliveryDayItem[]) {\n        super();\n\n        this.id = id || -1;\n        this.date = date || '';\n        this.end_date = end_date || '';\n        this.day_items = day_items || []\n    }\n}\n\nexport class DeliveryDayDTO  {\n    public delivery_day: DeliveryDay = new DeliveryDay();\n    public windows: DeliveryWindowDTO[] = [];\n};\n\nexport type DeliveryDaysDTO = {zip_valid: boolean, delivery_days: DeliveryDay[]} ","import moment from 'moment';\n\nclass MomentHelper {\n\n    public asDateSlug = (date: any): string => {\n        return moment(date).utc().format('YYYY-MM-DD');\n    }\n\n    public asFullDate = (date: any): string => {\n        return moment(date).utc().format('dddd MMMM D, YYYY');\n    }\n\n    public asShortDate = (date: any): string => {\n        return moment(date).utc().format('MMM D YYYY');\n    }\n}\n\nexport default new MomentHelper();","import OrderItem from \"../models/OrderItemModel\";\nimport DeliveryDayItem from \"../models/DeliveryDayItemModel\";\nimport CartItem from \"../models/CartItemModel\";\nimport MenuItem from \"../models/MenuItemModel\";\nimport {DeliveryWindowDTO} from \"../models/DeliveryWindowModel\";\nimport momentHelper from './MomentHelper';\n\nexport type OrderedItems = {[key: string]: any[]};\n\nclass Helpers { \n\n    private days: string[] = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    private months: string[] = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    private spicy: string[] = [\"not spicy\", \"mild spicy\", \"spicy\"];\n    private proteins: {[key: string]: string} = {\n        'pork': 'Pork',\n        'chicken': 'Chicken',\n        'beef' : ' Beef',\n        'tofu' : ' Tofu',\n        'veg' : 'Vegetable',\n        'vekan' : 'Vegan',\n        'shrimp' : 'Shrimp'\n    };\n\n    public convertToTwelveHour = (twentyFourHourTime: string): string => {\n        let parts: string[] = twentyFourHourTime.split(':');\n        let hour: number = parseInt(parts[0]);\n        let amPm: string = ' am';\n        if (hour > 11) {\n            amPm = ' pm';\n            hour -= hour > 12 ? 12 : 0;\n        }\n\n        if (hour === 0) hour = 12;\n\n        return `${hour.toString()}:${parts[1]}${amPm}`;\n    }\n\n     /*\n        Returns a string ex; Pad-Tai with Chicken, mild spicy\n    */\n    public extractCartItemDescription = (cartItem: CartItem): string => {\n        let description: string = cartItem.menu_item.name;\n        description += cartItem.protein === null || cartItem.protein === \"\" || cartItem.menu_item.proteins.split(':').length < 2 ?\n                    \"\" : \n                    cartItem.protein === 'vekan' ?\n                    ' vegan' : ` with ${this.proteins[cartItem.protein]}`\n\n        description += cartItem.menu_item.spicy === true ?\n        `, ${this.spicy[cartItem.spicy]}` : \"\"\n\n        return description;\n    }\n\n    public formatDeliveryWindow = (window: DeliveryWindowDTO, excludeDate: boolean = false, splitLines: boolean = false): string => {\n        let windowText: string = excludeDate ? \"\" :\n            `${momentHelper.asFullDate(window.date)} ${window.window.start_time !== window.window.end_time ? 'between ' : 'at '}`;\n\n        windowText += this.convertToTwelveHour(window.window.start_time);\n\n        return windowText += window.window.start_time !== window.window.end_time ?\n                ` and ${this.convertToTwelveHour(window.window.end_time)}` : ''\n    }\n\n\n    /*\n        Returns AA of orderItems sorted by their delivery dates\n        The correct date order in the AA is not guaranteed. Use .keys(AA).sort() when iterrating.\n    */\n\n    public sortOrderItemsByDate = (orderItems: OrderItem[]): OrderedItems => {\n        let sortedItems: OrderedItems = {};\n        orderItems.forEach((item: OrderItem) => {\n            if (!(item.cart_item.delivery_date in sortedItems))\n                sortedItems[item.cart_item.delivery_date] = [];\n\n            sortedItems[item.cart_item.delivery_date].push(item);\n        })\n\n        return  sortedItems;\n    }\n\n    public sortDeliveryDayItemsByCategory = (items: DeliveryDayItem[]): DeliveryDayItem[] => {\n        let sortedItems: OrderedItems = {\n            en: [],\n            ap: [],\n            si: [],\n            de: [],\n        };\n        if (items) items.forEach((item: DeliveryDayItem) => sortedItems[item.menu_item.category].push(item))\n        return [...sortedItems['en'], ...sortedItems['ap'], ...sortedItems['si'], ...sortedItems['de']];\n    }\n\n    public groupMenuItemsByCategory = (items: MenuItem[], sort: boolean = true): OrderedItems => {\n        let groupedItems: OrderedItems = {\n            en: [],\n            ap: [],\n            si: [],\n            de: [],\n        };\n        items.forEach((item: MenuItem) => groupedItems[item.category].push(item));\n\n        if (sort) {//TODO: Add sorting\n            groupedItems['en'].sort(this.compareMenuItemsByName)\n        }\n        return groupedItems;\n    }\n\n    private compareMenuItemsByName(ia: MenuItem, ib: MenuItem) {\n        if (ia.name < ib.name) return -1;\n        if (ib.name < ia.name) return 1;\n        return 0\n    }\n}\n\nexport default new Helpers();","import React from 'react';\nimport DeliveryDay from '../../models/DeliveryDayModel';\nimport momentHelper from '../../helpers/MomentHelper';\nimport helpers from '../../helpers/helpers';\nimport DeliveryDayItem from '../../models/DeliveryDayItemModel';\nimport { config } from '../../config';\nimport { useHistory } from 'react-router-dom';\n\nimport './delivery.scss';\n\ninterface Props {\n    deliveryDay: DeliveryDay\n}\n\nexport const DeliveryDays = (props: Props): React.ReactElement => {\n    const history = useHistory();\n\n    return(\n        <div className=\"row delivery_days\" key={`days_${props.deliveryDay.id}`}>\n            <div className=\"col-12 col-md-3 delivery_days__date\">\n                {momentHelper.asFullDate(props.deliveryDay.date)}\n            </div>\n            <div className=\"col-12 col-md-3 delivery_days__end_date\">\n                {momentHelper.asFullDate(props.deliveryDay.end_date)}\n            </div>\n            <div className=\"col-12\" style={{whiteSpace: \"nowrap\"}}>\n                <div className=\"delivery_days__menu_items\">\n                    {\n                        helpers.sortDeliveryDayItemsByCategory(props.deliveryDay.day_items).map((item: DeliveryDayItem) =>\n                                <div className=\"delivery_days__item\" key={`ddi_${item.id}`}>\n                                    <small>{item.menu_item.name}</small>\n                                    <div>\n                                        <img\n                                            src={`${config.API_URL + item.menu_item.image}`}\n                                            alt={item.menu_item.name} />\n                                    </div>\n                                </div>\n                        )\n                    }\n                </div>\n            </div>\n            <div className=\"col-12 mt-3\">\n                <button\n                    className=\"btn btn-success\"\n                    onClick={()=> {history.push({pathname: `/dashboard/delivery/edit/${props.deliveryDay.id}/`})}}>\n                        edit\n                    </button>\n                <button\n                    className=\"btn btn-warning ml-2\"\n                    onClick={()=> {history.push({pathname: `/dashboard/delivery/duplicate/${props.deliveryDay.id}`})}}>\n                        duplicate\n                    </button>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport {format} from 'date-fns';\nimport deliveryDayService from '../../services/DeliveryDayService';\n\nimport './delivery.scss';\nimport { Redirect } from 'react-router-dom';\nimport DeliveryDay from '../../models/DeliveryDayModel';\n\nimport { DeliveryDays } from './DeliveryDays';\n\ninterface State {\n    loaded: boolean,\n    deliveryDays: DeliveryDay[],\n    startDate: string,\n    endDate: string,\n    creatingDeliveryDay: boolean,\n    editId: number\n}\n\nexport default class Deliveries extends React.Component<any, State> {\n\n    state = {\n        loaded: false,\n        deliveryDays: [],\n        startDate: \"\",\n        endDate: \"\",\n        creatingDeliveryDay: false,\n        editId: 0\n    }\n\n    public componentDidMount = (): void => {\n        deliveryDayService.get<DeliveryDay[]>(null, {start_date: format(new Date(), 'yyyy-MM-dd')})\n            .then((deliveryDays: DeliveryDay[]) => this.setState({deliveryDays, loaded: true}))\n            .catch( err => window.alert(\"Unable to load weeks\"))\n    }\n\n    private createDeliveryDay = (): void => {\n        if (this.state.startDate > this.state.endDate) {\n            window.alert('End date must be after start date');\n            return;\n        }\n\n        this.setState({creatingDeliveryDay: true})\n        deliveryDayService.add<DeliveryDay>(new DeliveryDay(this.state.startDate, -1, this.state.endDate))\n            .then((deliveryDay: DeliveryDay) => {\n                this.setState({\n                    editId: deliveryDay.id, \n                    startDate: \"\",\n                    creatingDeliveryDay: false}) \n            }) \n            .catch( err => window.alert(\"Unable to create week\"))\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n         }  as Pick<State, keyof State>);\n    }\n\n    public render() {\n        if (!this.state.loaded)\n            return <div>Loading...</div> \n\n        if (this.state.editId !== 0)\n            return <Redirect to={`delivery/edit/${this.state.editId}`} />\n        \n        const deliveries: DeliveryDay[] = this.state.deliveryDays;\n        deliveries.sort((a,b) => (a.date > b.date) ? -1 : ((b.date > a.date) ? 1 : 0));\n\n        return(\n            <div className=\"row weeks\">\n                <div className={'col-12'}>\n                    <h3>delivery menus</h3>\n                    <hr/>\n                </div>\n                <div className=\"col-12\">\n                    <h5>create delivery menu</h5>\n                    <input\n                        type=\"date\"\n                        id=\"startDate\"\n                        value={this.state.startDate}\n                        disabled={this.state.creatingDeliveryDay}\n                        onChange={this.updateData} />\n\n                    <input\n                        className={'ml-2'}\n                        type=\"date\"\n                        id=\"endDate\"\n                        value={this.state.endDate}\n                        disabled={this.state.creatingDeliveryDay}\n                        onChange={this.updateData} />\n\n                    <button \n                        className=\"btn btn-success ml-2 mt-2 mt-m-0\"\n                        onClick={this.createDeliveryDay}\n                        disabled={this.state.creatingDeliveryDay}\n                        >create</button>\n                    <hr/>\n                </div>\n                {\n                    deliveries.map((deliveryDay: DeliveryDay) =>\n                        <div className=\"col-12 deliveries__delivery_days\" key={`dd_${deliveryDay.id}`}>\n                            <DeliveryDays \n                                deliveryDay={deliveryDay}\n                                key={`dd_${deliveryDay.id}`}/>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}","import Service from './Service';\nimport MenuItem from '../models/MenuItemModel';\n\nclass MenuItemService extends Service {\n    appName = \"dashboard\";\n    view = \"menu_item\";\n\n    public loadByCategory = (category: string): Promise<MenuItem[]> => {\n        return this._get(`${this.appName}/${this.view}/?category=${category}`);\n    }\n}\n\nexport default new MenuItemService();","import Service from './Service';\n\nclass DeliveryDayItemService extends Service {\n    appName = \"dashboard\";\n    view = \"delivery_day_item\";\n}\n\nexport default new DeliveryDayItemService();","/*\n    Provides an INPUT field.\n    Provides updated text when:\n        The user has stopped typing for 750ms, hits 'ENTER' or the INPUT field loses focus\n        The text has changed since last time an update was sent\n    <InputWidget    initialValue: starting value\n                    defaultUpdateValue: if the INPUT field is empty, this value will be returned instead.\n                    onUpdate: callback when there is new text\n                    placeholder: text for PLACEHOLDER property on INPUT\n                    type: text | textarea\n    returns     id: value of ID sent through props\n                value: string\n */\n\nimport React, {Component} from 'react';\n\ninterface Props {\n    id: string,\n    type: string,\n    onUpdate: any,\n    required?: boolean,\n    initialValue?: any,\n    placeholder?: string,\n    defaultUpdateValue?: any\n}\n\ninterface State {\n    value: string\n}\n\n//todo: get type='number' to work\n\nexport default class InputWidget extends Component<Props, State> {\n    \n    private timer: any;\n    private lastSavedValue: string | null = null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            value: props.initialValue ? props.initialValue : \"\"\n        }\n\n        this.lastSavedValue = props.initialValue;\n    };\n\n    public componentWillReceiveProps = (props: Props) => {\n        if (props.initialValue !== this.props.initialValue) {\n            this.setState({value: props.initialValue});\n            this.lastSavedValue = props.initialValue\n        }\n    }\n\n    private handleOnKeyPress = (e: any) => {\n        if (e.keyCode === 13) this.sendUpdate();\n    };\n\n    private updateValue = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        this.setState({value: e.target.value});\n        this.resetTimer();\n    };\n\n    private sendUpdate = () => {\n        if (this.props.initialValue !== this.state.value) {\n            this.lastSavedValue = this.state.value;\n            let value = (this.props.defaultUpdateValue !== '' && this.props.initialValue === '') ?\n                this.props.defaultUpdateValue : this.state.value;\n            this.props.onUpdate(this.props.id, value);\n            clearInterval(this.timer);\n        }\n    };\n\n    private resetTimer = () => {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(this.sendUpdate, 750)\n    };\n\n    public render() {\n        if (this.props.type === 'textarea') {\n            return (\n                <div className={'row input_widget_textarea'}>\n                    <div className={'col-12'}>\n                        <textarea\n                            className = {'form-control iw'}\n                            id = {this.props.id}\n                            value = {this.state.value}\n                            onBlur = {() => this.sendUpdate()}\n                            onChange = {(e) =>this.updateValue(e)}\n                            onKeyDown = {(e) => this.handleOnKeyPress(e)}\n                            required = {(this.props.required)? this.props.required : false}\n                        />\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <div className={'row input_widget_input'}>\n                    <div className={'col-12'}>\n                        <input\n                            className={'form-control iw'}\n                            id={this.props.id}\n                            placeholder={this.props.placeholder}\n                            value={this.state.value}\n                            onBlur={() => this.sendUpdate()}\n                            onChange={(e) => this.updateValue(e)}\n                            onKeyDown={(e) => this.handleOnKeyPress(e)}/>\n                    </div>\n                </div>\n            )\n        }\n\n    }\n}","import React from 'react';\nimport InputWidget from '../inputWidget/InputWidget';\nimport Service from '../../../services/Service';\n\nimport {config} from '../../../config';\nimport './search_widget.scss';\n\ninterface Props {\n    service: Service,\n    itemSelected: (item: any) => void\n}\n\ninterface State {\n    items: any[]\n}\n\nexport default class SearchWidget extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n    \n        this.state = {\n            items: []\n        }  \n    }\n\n    public componentDidMount = (): void => {\n        window.onclick = function(event: any) {\n            this.close()\n        }\n    }\n\n    private itemSelected = (item: any): void => {\n        this.setState({items: []});\n        this.props.itemSelected(item);\n    }\n\n    private doSearch = (id: string, text: string): void => {\n        this.props.service.search<any[]>(text)\n            .then((items: any[]) => this.setState({items}))\n            .catch( err => {})\n    }\n\n    public render() {\n        return(\n            <div className=\"row search_widget\">\n                <div className=\"col-12\">\n                    <InputWidget\n                        id='search_widget__InputWidget'\n                        type=\"\"\n                        initialValue=''\n                        onUpdate={this.doSearch}\n                        placeholder='Enter Menu Item to Add'\n                        defaultUpdateValue={''}\n                    />\n                </div>\n                { this.state.items.length > 0 &&\n                    <div className=\"col-12 search_widget_results\">\n                        <div className=\"search_widget_results__content\">\n                            {\n                                this.state.items.map((item: any) => {\n                                    return(\n                                        <div className=\"row result\"\n                                            onClick={() => this.itemSelected(item)}>\n                                            <div className=\"col-9 result__name\">\n                                                {item.name}\n                                            </div>\n                                            <div className=\"col-3\">\n                                                <img src={config.API_URL + item.image} alt={item.name}/>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            }\n                        </div>\n                    </div>\n                }   \n            </div>\n        )\n    }\n}","import ModelBase from \"./ModelBase\";\n\nexport default class MenuItem {\n\n    public id!: number;\n    public name: string = \"\";\n    public description: string = \"\";\n    public proteins: string = \"\";\n    public allergens: string = \"\";\n    public price: number = 0;\n    public image: string = \"\";\n    public active!: boolean;\n    public spicy!: boolean;\n    public category: string = 'en';\n\n    constructor(\n        id: number = -1,\n        name: string = '',\n        description: string = '',\n        category: string = 'en',\n        price: number = 10,\n        proteins: string = \"\",\n        allergens: string = \"\",\n        spicy: boolean = false\n        ) \n        {\n            this.id = id;\n            this.name = name;\n            this.description = description;\n            this.category = category;\n            this.price = price;\n            this.proteins = proteins;\n            this.allergens = allergens;\n            this.spicy = spicy;\n        }\n}\n\nexport class MenuItemDTO {\n\n    public id!: number;\n    public name: string = \"\";\n    public description: string = \"\";\n    public proteins: string = \"\";\n    public allergens: string = \"\";\n    public price: number = 0;\n    public image!: File | string | null;\n    public active!: boolean;\n    public spicy: boolean = false;\n    public category: string = 'en';\n}","import ModelBase from './ModelBase';\nimport MenuItem from './MenuItemModel';\nimport DeliveryDay from './DeliveryDayModel';\n\nexport class DeliveryDayItemDTO extends ModelBase {\n    public sold_out: boolean = false;\n    public price: number = 0;\n    public menu_item!: number;\n    public delivery_day!: number;\n\n    constructor(delivery_day: number, menu_item: number, sold_out: boolean, price: number) {\n        super();\n        this.delivery_day = delivery_day;\n        this.menu_item = menu_item;\n        this.sold_out = sold_out;\n        this.price = price;\n    }\n}\n\nexport default class DeliveryDayItem extends ModelBase {\n\n    public sold_out: boolean = false;\n    public price: number = 0;\n    public menu_item!: MenuItem;\n    public delivery_day!: DeliveryDay;\n\n    constructor(delivery_day?: DeliveryDay, menu_item?: MenuItem, sold_out?: boolean, price?: number) {\n        super();\n\n        this.delivery_day = delivery_day || new DeliveryDay();\n        this.menu_item = menu_item || new MenuItem();\n        this.sold_out = sold_out || false;\n        this.price = price || 0;\n    }\n\n    public getDTOxxx = (): DeliveryDayItemDTO => {\n        return new DeliveryDayItemDTO(this.delivery_day.id, this.menu_item.id, this.sold_out, this.price);\n    }\n}","import React from 'react';\nimport deliveryDayItemService from '../../services/DeliveryDayItemService';\nimport DeliveryDayItem, { DeliveryDayItemDTO } from '../../models/DeliveryDayItemModel';\n\nimport './delivery.scss';\n\ninterface Props {\n    deliveryDayItem: DeliveryDayItem,\n    refreshItems: () => {}\n}\n\ninterface State {\n    deliveryDayItem: DeliveryDayItem,\n    saving: boolean,\n    active: boolean\n}\n\nexport default class DeliveryMenuItemOptions extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            deliveryDayItem: props.deliveryDayItem,\n            saving: false,\n            active: props.deliveryDayItem.id ? true : false \n        }\n    }\n\n    private remove = (): void => {\n        if (!window.confirm(\"Are you sure you want to remove this menu item?\")) return;\n\n        this.setState({saving: true});\n        deliveryDayItemService.delete(this.state.deliveryDayItem.id)\n            .then( resp => this.setState({\n                deliveryDayItem: new DeliveryDayItem(this.state.deliveryDayItem.delivery_day, this.state.deliveryDayItem.menu_item, false, 0),\n                active: false,\n                saving: false\n            }, () => this.props.refreshItems()))\n            .catch( resp => window.alert(\"Unable to deactivate\"));\n    }\n\n    private save = (): void => {\n        this.setState({saving: true});\n        deliveryDayItemService.update<DeliveryDayItem>(this.state.deliveryDayItem.id, this.state.deliveryDayItem)\n            .then((item: DeliveryDayItem) => this.setState({deliveryDayItem: item, saving: false}))\n            .catch( resp => window.alert(\"Unable to update\"))\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        let deliveryDayItem: DeliveryDayItem = this.state.deliveryDayItem\n        switch (e.target.id) {\n            case 'active': this.setState({active: !this.state.active}); break;\n            case 'sold_out': deliveryDayItem.sold_out = !deliveryDayItem.sold_out; break;\n            case 'price': deliveryDayItem.price = parseFloat(e.target.value)\n        }\n        this.setState({deliveryDayItem});\n    }\n\n    public render() {\n        return(\n            <div className=\"row delivery_item_options\">\n                <div className=\"col-12\"><hr/></div>\n                <div className=\"col-4\">\n                    <input\n                        type=\"number\"\n                        id=\"price\"\n                        value={this.state.deliveryDayItem.price}\n                        onChange={this.updateData}\n                        disabled={this.state.saving || !this.state.active}\n                        className=\"form-control delivery_item_options__price\"/>\n                </div>\n                <div className=\" col-8 mt-3\">\n                    <span className=\"mr-2\">Sold Out:</span>\n                    <input\n                        id=\"sold_out\"\n                        checked={this.state.deliveryDayItem.sold_out} \n                        onChange={this.updateData}\n                        disabled={this.state.saving || !this.state.active}\n                        type=\"checkbox\"/> \n                </div>\n                <div className=\"col-12 text-center mt-3\">\n                    <button \n                        className=\"btn btn-success\"\n                        disabled={this.state.saving || !this.state.active} \n                        onClick={this.save}\n                        >Save</button>\n\n                    <button\n                        className=\"btn btn-danger ml-3\"\n                        disabled={this.state.saving}\n                        onClick={this.remove}>\n                        Remove</button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport DeliveryDayItem from '../../models/DeliveryDayItemModel';\nimport {config} from '../../config';\nimport DeliveryDayItemOptionsComponent from './DeliveryMenuItemOptionsComponent';\n\ninterface Props {\n    item: DeliveryDayItem,\n    refreshItems: () => void\n}\n\nexport const DeliveryDayItemComponent = (props:Props) => {\n    return(\n        <div className=\"row delivery_day_item\">\n            <div className={'col-12'}>\n                <div className={'row delivery_day_item__inner'}>\n                    <div className=\"col-12 delivery_day_item__name\">{props.item.menu_item.name}</div>\n                    <div className=\"col-12\">\n                        <img\n                            className={'delivery_day_item__img'}\n                            src={\n                                props.item.menu_item.image.indexOf('http') === -1 ?\n                                config.API_URL + props.item.menu_item.image : props.item.menu_item.image\n                            }\n                            alt={props.item.menu_item.name} />\n                    </div>\n                    <div className=\"col-12\">\n                        <DeliveryDayItemOptionsComponent deliveryDayItem={props.item} refreshItems={async () => props.refreshItems()} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nimport {MenuItemDTO} from '../../models/MenuItemModel';\nimport DeliveryDay from '../../models/DeliveryDayModel';\nimport MenuItem from '../../models/MenuItemModel';\nimport menuItemService from '../../services/MenuItemService';\nimport deliveryDayItemService from '../../services/DeliveryDayItemService';\nimport deliveryDayService from '../../services/DeliveryDayService';\nimport momentHelper from '../../helpers/MomentHelper';\nimport DeliveryWindow from '../../models/DeliveryWindowModel';\nimport SearchWidget from '../widgets/searchWidget/SearchWidget';\nimport DeliveryDayItem, { DeliveryDayItemDTO } from '../../models/DeliveryDayItemModel';\nimport { DeliveryDayItemComponent } from './DeliveryDayItemComponent';\nimport './delivery.scss';\nimport { Link } from 'react-router-dom';\n\ninterface State {\n    loading: boolean,   //TODO: FINISH ADDING LOAD ALL MENU ITEMS, have MenuItems confirm if \n    menuItems: MenuItemDTO[],\n    deliveryDay: DeliveryDay,\n    deliveryWindows: DeliveryWindow[]\n}\n\nexport default class DeliveryDayComponent extends React.Component<any, State> {\n\n    state ={\n        loading: true,\n        menuItems: [],\n        deliveryDay: new DeliveryDay(\"\"),\n        deliveryWindows: []\n    }\n\n    public componentDidMount = (): void => {\n        const { match: { params } } = this.props;\n        this.refreshDay(params.id);\n    }\n\n    private itemSelected = (item: MenuItem) => {\n        deliveryDayItemService.add(new DeliveryDayItemDTO(this.state.deliveryDay.id, item.id, false, item.price))\n            .then((item: any) => {\n                const deliveryDay: DeliveryDay = this.state.deliveryDay;\n                deliveryDay.day_items.push(item);\n                this.setState({deliveryDay});\n                console.log(deliveryDay);\n            })\n            .catch( err => window.alert('unable to add menu item'))\n    }\n\n    private refreshDay = (id: number): void => {\n        deliveryDayService.get<DeliveryDay>(id)\n            .then((deliveryDay: DeliveryDay) => {\n                this.setState({deliveryDay, loading: false})\n            })\n            .catch( err => window.alert(\"Unable to load week\"))\n    }\n    \n    public render() {\n        if (this.state.loading)\n            return <div>Loading...</div>\n\n        return(\n            <div className=\"row delivery_day_component\">\n                <div className={\"col-12 mb-2\"}>\n                    <Link className={'btn btn-outline-info'} to={'/dashboard/deliveries'}>return to delivery menus</Link>\n                </div>\n                <div className=\"col-12 col-md-6\">\n                    <h5>\n                        {momentHelper.asFullDate(this.state.deliveryDay.date)} - {momentHelper.asFullDate(this.state.deliveryDay.end_date)}\n                    </h5>\n                    <hr/>\n                </div>\n                <div className=\"col-12 col-md-6 delivery_day_component__search_widget mb-2\">\n                    <SearchWidget service={menuItemService} itemSelected={this.itemSelected} />\n                </div>\n                    {\n                        this.state.deliveryDay.day_items.map((item: DeliveryDayItem) => {\n                            return (\n                                <div className=\"col-12 col-md-3\" key={`dd_${item.id}`}>\n                                    <div className=\"row\">\n                                        <div className=\"col-12\">\n                                            <DeliveryDayItemComponent item={item} refreshItems={() => this.refreshDay(this.state.deliveryDay.id)}/>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport MenuItem, {MenuItemDTO} from '../../models/MenuItemModel';\nimport menuItemService from '../../services/MenuItemService';\nimport ImageUploader from '../widgets/imageUploader/ImageUploader';\n\nimport './menu.scss';\nimport LoadingOverlay from '../overlays/LoadingOverlay';\n\ninterface State {\n    menuItem: MenuItemDTO,\n    loaded: boolean,\n    saving: boolean,\n    viewingServings: boolean,\n    hasBeenUpdated: boolean\n}\n\nexport enum ItemModes {\n    add,\n    edit,\n    view,\n    deliveryDay\n}\n\nexport default class MenuItemEdit extends React.Component<any, State> {\n\n    private temporaryImage: File | null = null;\n\n    state = {\n        menuItem: new MenuItem(),\n        loaded: false,\n        saving: false,\n        viewingServings: false,\n        hasBeenUpdated: false\n    } \n\n    private allergenSelected = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        let menuItem: MenuItemDTO = this.state.menuItem;\n        menuItem.allergens = this.checkboxesToString(menuItem.allergens, e.target.id)\n        this.setState({menuItem});\n    }\n\n    public componentDidMount = (): void => {\n        const { match: { params } } = this.props;\n\n        menuItemService.get<MenuItem>(params.id)\n            .then((menuItem: MenuItem) => {\n                this.setState({menuItem, loaded: true})\n            })\n            .catch( err => window.alert('Unable to load menu item'))\n    }\n\n    private checkboxesToString = (items: string, code: string): string => {\n        if (items === null) items= \"\";\n\n        let parts: string[] = items.split(':')\n        console.log(parts, items);\n        if (parts.indexOf(code) !== -1) {// delete if it exists\n            parts.splice(parts.indexOf(code), 1);\n        } else {\n            parts.push(code);\n        }\n\n        const final: string = parts.join(':');\n        return (final.substr(0, 1)) === ':' ? final.substr(1) : final;\n    }\n\n    private onNewImageLoaded = (file: File | null) => {\n        this.temporaryImage = file;\n\n        if (file === null){\n            let menuItem: MenuItemDTO = this.state.menuItem;\n            menuItem.image = null;\n            this.setState({menuItem});\n        }\n\n        this.setState({hasBeenUpdated: true});\n    }\n\n    private proteinSelected = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        let menuItem: MenuItemDTO = this.state.menuItem;\n        menuItem.proteins = this.checkboxesToString(menuItem.proteins, e.target.id);\n        this.setState({menuItem});\n    }\n\n    private save = (): void => {\n        this.setState({saving: true});\n        let menuItem: MenuItemDTO = this.state.menuItem;\n\n        if (this.temporaryImage){\n            menuItem.image = this.temporaryImage;\n        } else if (typeof menuItem.image === 'string') {\n            delete menuItem.image;\n        }\n         menuItemService.update<MenuItemDTO>(menuItem.id, menuItem, menuItem.image !== null && typeof menuItem.image !== 'string')\n                .then((menuItemDTO: MenuItemDTO) => {\n                    this.setState({\n                        menuItem: menuItem,\n                        saving: false,\n                        hasBeenUpdated: false\n                    });\n                    if (this.props.itemAdded) this.props.itemAdded(menuItemDTO);\n                })\n    }\n\n    private updateMenuItem = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>): void => {\n        let menuItem: any = this.state.menuItem;\n        menuItem[e.target.name] = e.target.value;\n        this.setState({menuItem});\n    }\n\n    private updateOptions = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        let menuItem: MenuItemDTO = this.state.menuItem;\n        switch(e.target.id) {\n            case 'spicy':\n                menuItem.spicy = !menuItem.spicy\n                this.setState({menuItem})\n                break;\n            case 'price':\n                menuItem.price = parseFloat(e.target.value);\n                this.setState({menuItem});\n                break;\n        }\n    }\n\n    public render() {//TODO: fix saveBtnDisabled\n\n        if (!this.state.loaded)\n            return <LoadingOverlay />\n\n        const saveBtnDisabled: boolean = this.state.saving || this.props.mode === ItemModes.view\n        const disabled: boolean = this.props.mode === ItemModes.view || this.props.mode === ItemModes.deliveryDay\n\n\n        const allergens: any[] = [\n            { name: 'Milk', code: 'milk' },\n            { name: 'Soy', code: 'soy'},\n            { name: 'Shellfish', code: 'shell'},\n            { name: 'Egg', code: 'egg'},\n            { name: 'Fish', code: 'fish'},\n            { name: 'Nuts', code: 'nuts'},\n            { name: 'Peanuts', code: 'peanut'},\n            { name: 'Wheat', code: 'wheat'}\n        ]\n\n        const proteins: any[] = [\n            { name: 'Pork', code: 'pork'},\n            { name: 'Chicken', code: 'chicken'},\n            { name: 'Beef', code: 'beef' },\n            { name: 'Tofu', code: 'tofu'},\n            { name: 'Veggie', code: 'veg'},\n            { name: 'Vegan', code: 'vekan'},\n            { name: 'Shrimp', code: 'shrimp'}\n        ]\n        \n        return (\n            <div className=\"row menuedititem mt-3\">\n                <div className=\"col-12 col-md-6 menuedititem__header\">\n                    \n                </div>\n                <div className=\"col-12 menuedititem__inner p-3\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-md-6\">\n                            <div className=\"row\">\n                                <div className=\"col-12 menuedititem__imagearea menuedititem__area\">\n                                    <ImageUploader\n                                        id={`image_uploader__menuItem-${this.state.menuItem.id}`}\n                                        imageURL={this.state.menuItem.image}\n                                        newImageLoaded={this.onNewImageLoaded}\n                                        maximumSizeInMb={100}\n                                        allowedFileTypes=\".jpg,.png,.jpeg\"\n                                        disabled={disabled}\n                                        />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-12 col-md-6\">\n                            <div className=\"row\">\n                                <div className=\"col-12 mt-1 mt-md-0\">\n                                    <input\n                                        id='menuedititem__name' \n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        placeholder=\"Meal Name\"\n                                        name=\"name\"\n                                        value={this.state.menuItem.name}\n                                        onChange={this.updateMenuItem}\n                                        disabled={disabled}\n                                        />\n                                </div>\n                                <div className=\"col-12 mt-1\">\n                                    <textarea \n                                        className=\"form-control\"\n                                        rows={2}\n                                        placeholder=\"Description\"\n                                        name=\"description\"\n                                        value={this.state.menuItem.description}\n                                        onChange={this.updateMenuItem}\n                                        disabled={disabled}\n                                        ></textarea>\n                                </div>\n                                <div className=\"col-12 mt-1\">\n                                    Category:\n                                    <select\n                                        name=\"category\"\n                                        className=\"form-control\"\n                                        defaultValue={this.state.menuItem.category}\n                                        disabled={disabled}\n                                        onChange={this.updateMenuItem}> \n                                        <option value=\"en\">Entree</option>\n                                        <option value=\"ap\">Apetizer</option>\n                                        <option value=\"si\">Side Item</option>\n                                        <option value=\"de\">Dessert</option>\n                                    </select>\n                                </div>\n                                <div className=\"col-12 mt-1\">\n                                    Price:\n                                    <input type=\"text\" name=\"price\" className=\"form-control\" value={this.state.menuItem.price}\n                                        disabled={disabled} onChange={this.updateMenuItem} />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-12\">\n                            <div className=\"row\">\n                                <div className=\"col-12 col-md-6 mt-2\">\n                                    <h5>Allergens:</h5>\n                                        {\n                                            allergens.map((allergen: any) => \n                                                {\n                                                    if (this.props.mode === ItemModes.deliveryDay){\n                                                        if (this.state.menuItem.allergens.length === 0)\n                                                            return <div className=\"checker-week\" key={`allergens_${allergen.code}`}>&nbsp;</div>\n\n                                                        if(this.state.menuItem.allergens.indexOf(allergen.code) !== -1){\n                                                            return (\n                                                                <div className=\"checker-week\" key={`allergens_${allergen.code}`}>\n                                                                    {allergen.name}\n                                                                </div>\n                                                            )\n                                                        } else {\n                                                            return null\n                                                        }\n                                                    }\n\n                                                    return( \n                                                        <div className=\"menuedititem__checker\" key={allergen.code}>\n                                                            <input\n                                                                type=\"checkbox\"\n                                                                id={allergen.code}\n                                                                checked={this.state.menuItem.allergens.indexOf(allergen.code) !== -1}\n                                                                disabled={this.props.mode === ItemModes.view}\n                                                                onChange={this.allergenSelected}/>\n                                                            <span>{allergen.name}</span>\n                                                        </div>\n                                                    ) }\n                                            )\n                                        }\n                                </div>\n                                <div className=\"col-12 col-md-6 mt-2\">\n                                    <h5>Proteins:</h5>\n                                        {\n                                            proteins.map((protein: any) => {\n                                                if (this.props.mode === ItemModes.deliveryDay){\n                                                    if (this.state.menuItem.proteins.length === 0)\n                                                        return <div className=\"checker-week\" key={`proteins_${protein.code}`}>&nbsp;</div>\n\n                                                    if(this.state.menuItem.proteins.indexOf(protein.code) !== -1){\n                                                        return (\n                                                            <div className=\"checker-week\" key={`proteins_${protein.code}`}>\n                                                                {protein.name}\n                                                            </div>\n                                                        )\n                                                    } else {\n                                                        return null\n                                                    }\n                                                }\n\n                                                return(\n                                                    <div className=\"menuedititem__checker\" key={protein.code}>\n                                                        <input\n                                                            type=\"checkbox\"\n                                                            id={protein.code}\n                                                            checked={this.state.menuItem.proteins.indexOf(protein.code) > -1}\n                                                            disabled={this.props.mode === ItemModes.view}\n                                                            onChange={this.proteinSelected}/>\n                                                        <span>{protein.name}</span>\n                                                    </div>\n                                                )} \n                                            )\n                                        }\n                                </div>\n                                <div className=\"col-12 col-md-6 mt-2\">\n                                    <hr/>\n                                    {\n                                        this.props.mode === ItemModes.deliveryDay ?\n                                            this.state.menuItem.spicy ?\n                                                <div className=\"menuedititem__checker_week\">Spicy</div>\n                                                :\n                                                <div className=\"menuedititem__checker_week\">Not Spicy</div>\n                                            :\n                                                <div className=\"menuedititem__checker\">\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        id=\"spicy\"\n                                                        checked={this.state.menuItem.spicy}\n                                                        disabled={this.props.mode === ItemModes.view}\n                                                        onChange={this.updateOptions}\n                                                        />\n                                                        <span>Spicy</span>\n                                                </div>\n\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-12 menuedititem__controls_area menuedititem__area text-center mt-2\">\n                            <hr/>\n                            <button \n                                className=\"btn btn-success\"\n                                disabled={saveBtnDisabled} \n                                onClick={this.save}\n                                >Save</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport './image_uploader.scss';\n\ninterface Props {\n    id: string;\n    imageURL: string; \n    newImageLoaded(file: File | null): void;\n    uploadPrompt?: string,\n    allowedFileTypes?: string,\n    maximumSizeInMb?: number,\n    disabled?: boolean\n}\n\ninterface State {\n    hasImage: boolean,\n    currentImage: File | null,\n    loadingImage: boolean\n}\n\nexport default class ImageUploader extends React.Component<Props, State> {\n\n    private fileElement: HTMLInputElement | null = null;\n    private reloadAttempted: boolean = true;\n\n    constructor(props: Props) {\n        super(props);\n        \n        this.state = {\n            hasImage: props.imageURL !== \"\" && props.imageURL !== null ? true : false,\n            currentImage: null,\n            loadingImage: props.imageURL !== \"\" && props.imageURL !== null ? true : false\n        }\n    }\n\n    public componentDidMount = (): void => {\n        if (this.props.imageURL) {\n            this.loadImage(this.props.imageURL);\n        }\n    }\n\n    public componentDidUpdate = (props: Props): void => {\n    }\n\n    private toDataURL(url: any): Promise<string> {\n\n        return new Promise((resolve, reject) => {\n            var xhr = new XMLHttpRequest();\n            xhr.onload = function() {\n                if (xhr.response.type !== \"text/html\") {\n                    var reader = new FileReader();\n                    reader.onloadend = function() {\n                        resolve(reader.result?.toString());\n                    }\n                    reader.readAsDataURL(xhr.response);\n                } else {\n                    reject();\n                } \n                \n            };\n            xhr.open('GET', url);\n            xhr.responseType = 'blob';\n            xhr.send();\n        })\n    }\n\n    private clearImage = (e: React.MouseEvent<HTMLElement>): void => {\n        if (this.props.disabled) return;\n\n        e.preventDefault();\n        this.setState({\n            hasImage: false\n        });\n\n        this.props.newImageLoaded(null);\n    }\n\n    private loadImage = (url: string): void => {\n        this.toDataURL(url)\n            .then( (data: string) => {\n                (window.document.getElementById(this.props.id) as HTMLImageElement).src=data;\n                this.setState({loadingImage: false})\n            })\n            .catch( err => {\n                window.setTimeout(()=>{\n                    if (this.reloadAttempted) {\n                        this.setState({\n                            loadingImage: false,\n                            hasImage: false\n                        })\n                    } else {\n                        this.reloadAttempted = true;\n                        this.loadImage(url);\n                    }\n                }, 3000);\n            })\n    }\n\n    private onInputChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            this.readFile(e.target.files[0])\n            .then((resp: any) => {\n                console.log(resp.file.size);\n                const maxSizeInMb: number = this.props.maximumSizeInMb ? this.props.maximumSizeInMb : 2;\n                if (resp.file.size > maxSizeInMb * 1048576) {\n                    window.alert(`Maximum File Size is ${maxSizeInMb}Mb`);\n                    return;\n                } else {\n                    (window.document.getElementById(this.props.id) as HTMLImageElement).src=resp.result;\n                    this.setState({currentImage: resp.dataURL, hasImage: true})\n                    this.props.newImageLoaded(resp.file)\n                }\n                \n            }) \n        }\n    }\n\n    private open = () => {\n        if (!this.props.disabled)\n            this.fileElement?.click();\n    }\n\n    private readFile= (file: File) => {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = function (e: any) {\n                let dataURL = e.target.result;\n                dataURL = dataURL.replace(\";base64\", `;name=${file.name};base64`);\n                resolve({file, dataURL, result:e.target.result});\n            };\n          reader.readAsDataURL(file);\n        });\n    }\n\n    public render() {\n        return(\n            <div className={`image_uploader ${this.props.disabled ? '' : 'image_uploader--active'}`}>\n                <div \n                    className=\"inner\"\n                    onClick={this.open}\n                    > \n                    <img \n                        src={\"\"}\n                        alt=\"question\"\n                        id={this.props.id}\n                        className={this.state.hasImage? \"\" : \"hidden\"}\n                        />\n                    <input\n                        type=\"file\"\n                        id=\"xxx\"\n                        ref={input => this.fileElement = input}\n                        onChange={this.onInputChanged}\n                        accept={this.props.allowedFileTypes ? this.props.allowedFileTypes : \"\"}\n                    >\n                    </input>\n                    {(!this.state.hasImage && !this.props.disabled) &&\n                        <div className={`no-image image_uploader-overlay`}>\n                            <span>{ this.props.uploadPrompt || \"Click to  Upload Image\"}</span>\n                        </div>\n                    }\n                </div>\n                {(this.state.hasImage && !this.props.disabled) &&\n                    <div \n                        className=\"remove-btn\"\n                        onClick={this.clearImage}\n                        >X</div>\n                }\n                {this.state.loadingImage &&\n                    <div className=\"loading-image image_uploader-overlay\">\n                        <span>Loading Image...</span>\n                    </div>\n                }\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport loadingAnimation from '../../assets/loader.gif'\nimport './overlays.scss';\n\nexport default class LoadingOverlay extends React.Component<any, any> {\n\n    //TODO: Add ability to override CSS. ex; change BG color/transparency\n\n    public render() {\n        return(\n            <div className=\"loading-overlay\">\n                <img src={loadingAnimation} alt=\"loadingIcon\"/>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './navigation.scss';\n\nexport type NavItem = {title: string, link: string}\n\ninterface Props {\n    navItems: NavItem[]\n}\n\nexport const SubNavigation = (props: Props): React.ReactElement => {\n    return(\n            <div className=\"col-12 subnav\">\n                {\n                    props.navItems.map((item: NavItem) => {\n                        return(\n                            <Link className=\"subnav__item\" to={item.link} key={item.title}>\n                                {item.title}\n                            </Link>\n                        )\n                    })\n                }\n            </div>\n    )\n}","import React, { Fragment, useEffect } from 'react';\nimport { useState } from 'react';\n\nimport './menu.scss';\nimport { useHistory } from 'react-router-dom';\nimport menuItemService from '../../services/MenuItemService';\nimport MenuItem from '../../models/MenuItemModel';\n\nexport const NewMenuItem = (): React.ReactElement => {\n    const [name, setName] = useState<string>('');\n    const [category, setCategory] = useState<string>('en');\n    const [open, setOpen] = useState<boolean>(false);\n\n    const history = useHistory();\n\n    const createNewMenuItem = (): void => {\n        menuItemService.add<MenuItem>({name, category} as any)\n            .then((newMenuItem: MenuItem) => {\n                history.push({pathname: `/dashboard/menu/edit/${newMenuItem.id}/`});\n                setName('');\n                setCategory('en');\n            })\n            .catch( err => window.alert('unable to add new menu item'))\n    }\n\n    return(\n        <div className=\"row new_menu_item mt-3\">\n            {\n                open === false ?\n                    <div className=\"col-12 new_menu_item__add_link\" onClick={()=> setOpen(true)}>\n                        + Add New Item\n                    </div>\n                    :\n                    <Fragment>\n                        <div className=\"col-12\">\n                            <input type=\"text\" className=\"form-control\" id='new_menu_item__name'\n                                value={name} placeholder='New Menu Item Name'\n                                onChange={(e: any)=> setName(e.target.value)}/>\n                        </div>\n                        <div className=\"col-12 mt-1\">\n                            <select className=\"form-control\" defaultValue={category}\n                                onChange={(e) => setCategory(e.target.value)}>\n                                <option value=\"en\">Entree</option>\n                                <option value=\"ap\">Appetizer</option>\n                                <option value=\"si\">Side Item</option>\n                                <option value=\"de\">Dessert</option>\n                            </select>\n                        </div>\n                        <div className=\"col-12 mt-1 text-center\">\n                            <button className=\"btn btn-success new_menu_item__submit\"\n                                disabled={name === \"\"} onClick={()=> createNewMenuItem()}>\n                                Add New Item</button>\n                        </div>\n                    </Fragment>\n            }\n        </div>\n    )\n}","import React from 'react';\nimport MenuItem, {MenuItemDTO} from '../../models/MenuItemModel'; \nimport menuItemService from '../../services/MenuItemService';\nimport LoadingOverlay from '../overlays/LoadingOverlay';\nimport { Switch, Route } from 'react-router-dom';\nimport { MenuItems } from './MenuItems';\nimport MenuEdit from './MenuItemEdit';\nimport {SubNavigation, NavItem} from '../nav/SubNavigation';\nimport { NewMenuItem } from './NewMenuItem'; \n\ninterface State {\n    menuItems: MenuItemDTO[],\n    loaded: boolean\n}\n\nexport default class Menu extends React.Component<any, State> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            menuItems: [],\n            loaded: false\n        }\n    }\n\n    public componentDidMount = (): void => {\n        menuItemService.get<MenuItemDTO[]>()\n            .then((menuItems: MenuItemDTO[]) => {\n                this.setState({menuItems, loaded: true})\n            })\n            .catch( err => {\n                window.alert(`Unable to load Menu Items: ${err}`);\n            })\n    }\n\n    public render() {\n        const navItems: NavItem[] = [\n            {title: 'Entrees', link:'/dashboard/menu/en'},\n            {title: 'Appitizers', link:'/dashboard/menu/ap'},\n            {title: 'Sides', link:'/dashboard/menu/si'},\n            {title: 'Desserts', link:'/dashboard/menu/de'}\n        ]\n\n        return(\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <SubNavigation navItems={navItems} />\n                </div>\n                <div className=\"col-12 col-md-5\">\n                    <NewMenuItem key={Math.random().toString()}/>\n                </div>\n                <div className=\"col-12\">\n                    <Switch>\n                        <Route path=\"/dashboard/menu/edit/:id/\" component={MenuEdit} />\n                        <Route path=\"/dashboard/menu/:category/\" component={MenuItems} />\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport './authentication.css';\nimport authService from '../../services/AuthService';\nimport { Redirect } from 'react-router-dom';\nimport User from '../../models/UserModel';\nimport AuthenticateDTO from '../../dto/AuthenticateDTO';\nimport { AppActions, AppState } from '../../store/store';\nimport { dispatchLogin } from '../../store/auth/authActions';\nimport { AuthState } from '../../store/auth/authReducer';\n\ninterface LinkStateProps {\n    auth: AuthState\n}\n\ninterface LinkDispatchProps {\n    login: (user: User, operator_token: string) => void\n}\n\ntype Props = LinkStateProps & LinkDispatchProps\n\ninterface State {\n    email: string,\n    password: string,\n    loggingIn: boolean\n}\n\nclass Login extends React.Component<Props, State> {\n\n    state = {\n        email: \"\",\n        password: \"\",\n        loggingIn: false\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n         }  as Pick<State, keyof State>);\n    }\n\n    private login = (): void => {\n        if (this.state.email === \"\" || this.state.password === \"\") return;\n\n        authService.authenticate(this.state.email, this.state.password)\n            .then( (dto: AuthenticateDTO) => {\n                this.props.login(dto.user, dto.operator_token);\n            })\n            .catch((err: any) => {\n                window.alert(\"Invalid Credentials\");\n            });\n    }\n\n    public render() {\n        if (this.props.auth.loggedIn) \n            return <Redirect to=\"/dashboard/menu\" />\n        \n        return(\n            <div className=\"row justify-content-center\" id=\"login-panel\">\n                <div className=\"class-12 class-md-6\">\n                    <div className=\"wrapper fadeInDown\">\n                        <div id=\"formContent\">\n                            <div className=\"fadeIn first\">\n                                <h5>Welcome to the Operator Dashboard!</h5>\n                            </div>\n\n                            <form>\n                                <input\n                                    type=\"text\"\n                                    className=\"fadeIn second\"\n                                    id=\"email\"\n                                    placeholder=\"email\"\n                                    value={this.state.email}\n                                    onChange={this.updateData}\n                                    />\n                                <input\n                                    type=\"password\" \n                                    className=\"fadeIn third\"\n                                    id=\"password\"\n                                    placeholder=\"password\"\n                                    value={this.state.password}\n                                    onChange={this.updateData}\n                                    />\n                                <input \n                                    type=\"button\"\n                                    className=\"fadeIn fourth\"\n                                    value=\"Log In\"\n                                    onClick={this.login}\n                                    />\n                            </form>\n\n                            <div id=\"formFooter\">\n                                <a className=\"underlineHover\" href=\"/\">Forgot Password?</a>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppState): LinkStateProps => ({auth: state.authReducer})\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AppActions>): LinkDispatchProps => ({\n    login: bindActionCreators(dispatchLogin, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","import Service from './Service';\nimport Order from '../models/OrderModel';\n\nclass OrderService extends Service {\n    appName=\"dashboard\";\n    view=\"order\";\n\n    public getCompletedOrders = (date: string): Promise<Order[]> => {\n        return this._get<Order[]>(`${this.appName}/${this.view}/get_completed/?date=${date}`);\n    }\n}\n\nexport default new OrderService();","import React, { Fragment } from 'react';\nimport Order from '../../models/OrderModel';\n\nimport orderService from '../../services/OrderService';\nimport OrderItem from '../../models/OrderItemModel';\nimport helpers from '../../helpers/helpers';\nimport momentHelper from '../../helpers/MomentHelper';\nimport { Redirect } from 'react-router-dom';\n\ninterface State {\n    loading: boolean,\n    orders: Order[],\n    editId: number,\n    startDate: string,\n    endDate: string\n}\n\nexport default class Orders extends React.Component<any, State> {\n\n    state = {\n        loading: false,\n        orders: [],\n        editId: 0,\n        startDate: '',\n        endDate: ''\n    }\n\n    private orderStatuses: string[] = ['canceled', 'pending', 'paid'];\n\n    public componentDidMount = (): void => {\n        this.getByDateRange();\n    }\n\n    private getByDateRange = (startDate?: string, endDate?: string): void => {\n        this.setState({loading: true});\n\n        orderService.get<Order[]>()\n            .then((orders: Order[]) => {\n                this.setState({orders, loading: false})\n            })\n    }\n\n    private searchByOrderDateRange = (): void => {\n        this.getByDateRange(this.state.startDate !== \"\" ? this.state.startDate : undefined, \n                                    this.state.endDate !== \"\" ? this.state.endDate : undefined)\n    }\n    \n    private updateData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n         }  as Pick<State, keyof State>);\n    }\n\n    public render() {\n        if (this.state.loading)\n            return <div>Loading...</div>\n\n        if (this.state.editId > 0)\n            return <Redirect to={`/dashboard/orders/edit/${this.state.editId}`} /> \n\n        return(\n            <div className=\"row orders\">\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-md-3\">\n                            Start Date: <input type=\"date\" id=\"startDate\" value={this.state.startDate} onChange={this.updateData}/>\n                        </div>\n                        <div className={'col-12 col-md-9'}>\n                            End Date: <input type=\"date\" id=\"endDate\" value={this.state.endDate} onChange={this.updateData} />\n                            &nbsp;&nbsp;\n                            <button className=\"btn btn-success\" onClick={this.searchByOrderDateRange}>Search</button>\n                        </div>\n                    </div>\n                    {\n                        this.state.orders.length === 0 ?\n                            <div>No Orders Found</div>\n                            :\n                            <table className={'table'}>\n                                <thead>\n                                    <tr>\n                                        <th>Name</th>\n                                        <th>Order ID</th>\n                                        <th>Contact</th>\n                                        <th>Date</th>\n                                        <th>Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        this.state.orders\n                                            .sort((a: Order, b: Order) => a.id > b.id ? -11 : a.id < b.id ? 1 : 0)\n                                            .map((order: Order, index: number) => {\n                                                let menuItemCount: number = 0;\n                                                let total: number = 0;\n                                                let deliveryDates: string[] = [];\n\n                                                order.items.forEach((orderItem: OrderItem) => {\n                                                    menuItemCount += orderItem.cart_item.quantity;\n                                                    total += orderItem.cart_item.quantity * orderItem.cart_item.price;\n                                                    if (deliveryDates.indexOf(orderItem.cart_item.delivery_date) === -1)\n                                                        deliveryDates.push(orderItem.cart_item.delivery_date);\n                                                })\n\n                                                return (\n                                                    <tr key={order.id} className={index % 2 ? '' : 'orders-line-highlight'}\n                                                        onClick={()=> this.setState({editId: order.id})}>\n                                                        <td>{order.contact_name}</td>\n                                                        <td>{order.public_id}</td>\n                                                        <td>{order.email}<br/>{order.phone_number}</td>\n                                                        <td>{momentHelper.asFullDate(order.created_at)}</td>\n\n                                                        <td className={`order-status-${order.order_status}`}>\n                                                            {this.orderStatuses[order.order_status]}\n                                                        </td>\n                                                    </tr>\n                                                )\n                                        })\n                                    }\n                                </tbody>\n                            </table>\n                    }\n                </div> \n            </div>\n        )\n    }\n}","import Service from './Service';\nimport OrderItem from '../models/OrderItemModel';\n\nclass OrderItemService extends Service{\n\n    appName = 'dashboard';\n    view = 'order_item';\n\n    public getCompleted = (date: string): Promise<OrderItem[]> => {\n        return this._get<OrderItem[]>(`${this.appName}/${this.view}/get_completed/?date=${date}`)\n    }\n}\n\nexport default new OrderItemService();","import React, { Fragment } from 'react';\n\nimport orderItemService from '../../services/OrderItemService';\nimport orderService from '../../services/OrderService';\nimport OrderItem from '../../models/OrderItemModel';\n\nimport './order.scss';\nimport Order from '../../models/OrderModel';\nimport helpers from '../../helpers/helpers';\n\ninterface State {\n    pullDate: string,\n    orderItems: OrderItem[],\n    pullType: string,\n    orders: Order[]\n}\n\nexport default class Export extends React.Component<any, State> {\n\n    state = {\n        pullDate: \"\",\n        orderItems: [],\n        pullType: \"route\",\n        orders: []\n    }\n\n    public componentDidMount = (): void => {\n        /*\n        orderItemService.getByDate('2020-06-16')\n            .then((prepListItems: OrderItem[]) => {\n                if (prepListItems.length === 0) {\n                    window.alert('There are not prep items for this day');\n                    return;\n                }\n                //this.setState({prepListItems})\n            })\n            .catch( err => window.alert('Unable to display prep list'));\n            */\n    }\n\n    private loadData = (): void => {\n        if (this.state.pullType === 'prep') {\n            this.loadOrderItems();\n        } else {\n            this.loadOrders();\n        }\n    }\n\n    private loadOrderItems = (): void => {\n        orderItemService.getCompleted(this.state.pullDate)\n            .then((orderItems: OrderItem[]) => {\n                if (orderItems.length === 0) {\n                    window.alert('There are not items for this day');\n                    return;\n                }\n                this.setState({orderItems}, ()=> window.print())\n            })\n            .catch( err => window.alert('Unable to display'));\n    }\n\n    private loadOrders = (): void => {\n        orderService.getCompletedOrders(this.state.pullDate)\n            .then((orders: Order[]) => {\n                if (orders.length === 0) {\n                    window.alert('There are not items for this day');\n                    return;\n                }\n\n                if (this.state.pullType === 'route') {\n                    let fileContent: string = \"Address line 1\\tAddress line 2\\tCity\\tState\\tZip\\tName\\tEmail Address\\tPhone Number\\tExternal ID\\tOrder Count\\tDriver\\n\";\n                    let orderItems: OrderItem[] = [];\n\n                    orders.forEach((order: Order) => {\n                        orderItems = order.items.filter((orderItem: OrderItem) => orderItem.cart_item.delivery_date === this.state.pullDate);\n                        if (orderItems.length > 0) {\n                            fileContent += `${order.street_address}\\t${order.unit}\\t${order.city}\\tCA\\t${order.zip}\\t${order.contact_name}\\t${order.email}\\t${order.phone_number}\\t${order.public_id}\\t${orderItems.length}\\tLee\\n`;\n                        }\n                    })\n                    \n                    var bb = new Blob([fileContent ], { type: 'text/plain' });\n                    var a = document.createElement('a');\n                    a.download = `delivery_route_${this.state.pullDate}.tsv`;\n                    a.href = window.URL.createObjectURL(bb);\n                    a.click();\n                } else {\n                    this.setState({orders},()=> window.print())\n                }\n            })\n            .catch( err => window.alert(err));\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n         }  as Pick<State, keyof State>);\n    }\n\n    public render() {\n        return(\n            <div className=\"row\">\n                <div className=\"col-12 col-md-6 export-panel\">\n                    <select id=\"pullType\" className=\"control-form\" onChange={this.updateData} defaultValue={this.state.pullType}>\n                        <option value=\"prep\">Prep List</option>\n                        <option value=\"delivery_tags\">Delivery Tags</option>\n                        <option value=\"route\">Route CSV</option>\n                    </select>\n                    <br/><br/>\n                    Select a date: \n                    <input type=\"date\" id=\"pullDate\" className=\"form-control\"\n                            value={this.state.pullDate} onChange={this.updateData}/>\n                    <button className=\"btn btn-success mt-2\" onClick={this.loadData}>Print</button>\n                </div>\n                {(this.state.orderItems.length + this.state.orders.length > 0) &&\n                    <div className=\"col-12 print-sheet\">\n                        {\n                            this.state.pullType === 'prep' ?\n                                <PrepDisplay orderItems={this.state.orderItems} date={this.state.pullDate} />\n                                :\n                                <DeliveryTagsDisplay orders={this.state.orders} date={this.state.pullDate} />\n                                    \n                        }\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nfunction DeliveryTagsDisplay(props: any) {\n    return (\n        <div className='delivery_tags_print'>\n            {\n                props.orders.map((order: Order) => {\n                    const orderItems: OrderItem[] = order.items.filter((orderItem: OrderItem) => orderItem.cart_item.delivery_date === props.date)\n                    \n                    return (\n                        <Fragment key={`order_${order.id}`}>\n                            <div className='quarter-page'>\n                                <span className=\"contact-info\">{order.contact_name}</span>\n                                <span className=\"street-address\">{order.street_address} {order.unit}</span>\n                                <span className=\"street-address\">{order.city} {order.zip}</span>\n                                <span className=\"contact-info\">{order.phone_number}</span>\n                                <b>Items:</b>\n                                <div className=\"delivery-tag-items\">\n                                    {\n                                        orderItems.map((orderItem: OrderItem) => {\n                                            return(\n                                                <div className=\"delivery-tag-item\" key={`oi_${orderItem.id}`}> \n                                                    {orderItem.cart_item.quantity.toString() + \" \" + helpers.extractCartItemDescription(orderItem.cart_item)}\n                                                </div>\n                                            )\n                                        })\n                                    }\n                                </div>\n                                {order.notes &&\n                                    <div className=\"delivery-instructions\">\n                                        <br/>\n                                        _______________________________\n                                        <h4>Delivery Instructions:</h4>\n                                        <div className=\"delivery_instructions_text\">\n                                            {order.notes}\n                                        </div>\n                                    </div>\n\n                                }\n                            </div>\n                        </Fragment>\n                    )\n                    })\n            }\n        </div>\n    )\n}\n\nfunction PrepDisplay(props: any) {\n\n    type CondenensedListItem = {count: number, dish: string, protein: string, spicy_text:string};\n\n    const spicy: string[] = ['No', 'mild', 'spicy'];\n    let condensedList: {[key: string]: CondenensedListItem} = {};\n    let key: string = \"\";\n    let dish: string = \"\";\n    let protein: string = \"\";\n    let spicy_text: string = \"\";\n    let dishCount: number = 0;\n\n    props.orderItems.forEach((orderItem: OrderItem) => {\n        dish = orderItem.cart_item.menu_item.name;\n        protein = (orderItem.cart_item.menu_item.proteins.split(':').length > 1 && orderItem.cart_item.protein !== \"\") ?\n                    orderItem.cart_item.protein : \"\";\n        spicy_text = (orderItem.cart_item.menu_item.spicy) ? spicy[orderItem.cart_item.spicy] : \"\";\n\n        key = `${dish}:${protein}:${spicy_text}`;\n        if (!(key in condensedList))\n            condensedList[key] = {count: 0, dish, protein, spicy_text};\n\n        condensedList[key].count += orderItem.cart_item.quantity;\n        dishCount += orderItem.cart_item.quantity; \n    });\n\n    return ( \n        <Fragment>\n            <span className='print-sheet-header'>{props.date} &nbsp;&nbsp;:&nbsp;&nbsp;{dishCount} items</span>\n            <table className='prep-sheet'> \n                <thead>\n                    <tr>\n                        <td>#</td>\n                        <td>Dish</td>\n                        <td>Protein</td>\n                        <td>Spicy</td>\n                        <td>L</td>\n                        <td>P</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        Object.keys(condensedList).sort().map((key: string, index: number) => {\n                            return (\n                                <tr className={`${index % 2 ? '' : 'print-row-dark'}`} key={key}>\n                                    <td>{condensedList[key].count}</td>\n                                    <td>{condensedList[key].dish}</td>\n                                    <td>{condensedList[key].protein}</td>\n                                    <td>{condensedList[key].spicy_text}</td>\n                                    <td></td>\n                                    <td></td>\n                                </tr> \n                            )\n                        })\n                    }\n                </tbody>\n            </table>\n        </Fragment>\n    )\n}","import ModelBase from \"./ModelBase\";\nimport CartItem from \"./CartItemModel\";\nimport OrderItem from \"./OrderItemModel\";\n\nexport default class Order extends ModelBase {\n\n    public order_status!: number;\n    public square_payment!: string;\n    public contact_name!: string;\n    public phone_number!: string;\n    public email!: string;\n    public unit!: string;\n    public street_address!: string;\n    public city!: string;\n    public zip!: string;\n    public notes!: string;\n    public items!: OrderItem[];\n    public uuid!: string;\n    public public_id!: string;\n    public nonce!: string;\n    public tip!:number;\n\n    constructor(\n        id: number = -1,\n        order_status: number = 0,\n        contact_name: string = '',\n        phone_number: string = '',\n        email: string = '',\n        unit: string = '',\n        street_address: string = '',\n        city: string = '',\n        zip: string = '',\n        notes: string = '',\n        items: OrderItem[] = [],\n        uuid: string = '',\n        public_id: string = '',\n        nonce: string = '',\n        tip: number = 0\n    ){\n        super();\n        this.id = id;\n        this.order_status = order_status;\n        this.contact_name = contact_name;\n        this.phone_number = phone_number;\n        this.email = email;\n        this.unit = unit;\n        this.street_address = street_address;\n        this.city = city;\n        this.zip = zip;\n        this.notes = notes;\n        this.items = items;\n        this.uuid = uuid;\n        this.public_id = public_id;\n        this.nonce = nonce;\n        this.tip = tip;\n    }\n}\n\nexport class OrderDTO extends ModelBase {\n\n    public order_status!: number;\n    public contact_name!: string;\n    public phone_number!: string;\n    public email!: string;\n    public unit!: string;\n    public street_address!: string;\n    public city!: string;\n    public zip!: string;\n    public cart_items!: number[];\n    public notes!: string;\n    public nonce!: string;\n    public tip!: number;\n    public coupon!: number;\n    \n    constructor(order: Order) {\n                    super();\n\n                    this.order_status = order.order_status;\n                    this.contact_name = order.contact_name;\n                    this.phone_number = order.phone_number;\n                    this.email = order.email;\n                    this.unit = order.unit;\n                    this.street_address = order.street_address;\n                    this.city = order.city;\n                    this.zip = order.zip;\n                    this.notes = order.notes;\n                    this.nonce = order.nonce;\n                    this.tip = order.tip;\n                    // this.coupon = order.coupon.id;\n                }\n}","import Service from './Service';\nimport FunctionsResponsesDTO from '../dto/FunctionsResponsesDTO';\nimport Order from \"../models/OrderModel\";\n\nclass AdminService extends Service {\n\n    public sendWeeklyEmails = (): Promise<FunctionsResponsesDTO> => {\n        return this._get(`dashboard/send_weekly_email/`);\n    }\n\n    public sendSupportEmail = (to: string, subject: string, body: string, order: Order | null = null): Promise<any> => {\n        let payload: any = {to, subject, body}\n\n        if (order !== null) payload['order_id'] = order.id\n\n        return this._post<any>('dashboard/send_support_email/', payload)\n    }\n\n    public sendMassMail = (body: string, options: any, send_email: boolean = false): Promise<any> => {\n        return this._post<any>('dashboard/send_mass_mail/',\n            {body: body, options: options, send_email: send_email});\n    }\n}\n\nexport default new AdminService();","import React from 'react';\nimport Order from \"../../models/OrderModel\";\nimport adminService from '../../services/AdminService';\n\ninterface Props {\n    order: Order\n}\n\ninterface State {\n    subject: string,\n    body: string,\n    include_order: boolean,\n    submitting: boolean\n}\n\nexport default class OrderEmail extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            subject: `Order ${props.order.public_id}`,\n            body: '',\n            include_order: true,\n            submitting: false\n        }\n    }\n\n    private submit = (): void => {\n        this.setState(({submitting: true}));\n\n        adminService.sendSupportEmail(\n            this.props.order.email,\n            this.state.subject,\n            this.state.body,\n            this.state.include_order ? this.props.order : null)\n            .then(() => {\n                window.alert('Email Sent');\n                this.setState({subject: '', body: '', include_order: true})\n            })\n            .catch( err => window.alert('unable to send email'))\n            .then(() => this.setState({submitting: false}))\n    }\n\n    private toggleIncludeOrder = (): void => {console.log(this.state.include_order)\n        this.setState(({include_order: !this.state.include_order}));\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n        } as Pick<State, keyof State>);\n    }\n\n    public render() {\n        return (\n            <div className={`row order_email`}>\n                <div className={`col-12 col-md-6`}>\n                    <label>subject:</label>\n                    <input className={'form-control order_email__subject'} id={'subject'}\n                        value={this.state.subject} onChange={this.updateData} disabled={this.state.submitting}/>\n                </div>\n                <div className={'col-12 mt-3'}>\n                    <label>Message</label>\n                    <textarea className={'form-control order_email__body'} id={'body'} value={this.state.body}\n                        onChange={this.updateData} disabled={this.state.submitting} rows={8}/>\n                </div>\n                <div className={'col-12 mt-3'}>\n                    Include Order: &nbsp;&nbsp;\n                    <input className={'order_email__include_order'} type={'checkbox'} id={'include_order'} checked={this.state.include_order}\n                        onChange={this.toggleIncludeOrder} disabled={this.state.submitting}/>\n                </div>\n                <div className={'col-12 mt-3'}>\n                    <button\n                        className={'btn btn-success order_email__submit'}\n                        disabled={this.state.subject === '' || this.state.body === '' || this.state.submitting}\n                        onClick={this.submit}\n                        >Send Email</button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Order, { OrderDTO } from '../../models/OrderModel';\n\nimport orderService from '../../services/OrderService';\nimport OrderItem from '../../models/OrderItemModel';\nimport helpers, {OrderedItems} from '../../helpers/helpers';\nimport momentHelper from '../../helpers/MomentHelper';\nimport { Link, Redirect } from 'react-router-dom';\nimport OrderEmail from \"./OrderEmail\";\n\ninterface State {\n    loading: boolean,\n    order: Order,\n    updating: boolean,\n    updatesPending: boolean,\n    returnToOrders: boolean\n}\n\nexport default class OrderEdit extends React.Component<any, State> {\n\n    state = {\n        loading: true,\n        order: new Order(),\n        updating: false,\n        updatesPending: false,\n        returnToOrders: false\n    }\n\n    public componentDidMount = (): void => {\n        const { match: { params } } = this.props;\n\n        orderService.get<Order>(params.id)\n            .then((order: Order) => this.setState({order, loading: false}))\n            .catch( err => window.alert(err))\n    }\n\n    private saveUpdates = (): void => {\n        this.setState({updating: true});\n        orderService.update<any>(this.state.order.id, new OrderDTO(this.state.order))\n            .then((order: Order) => this.setState({order, updating: false, updatesPending: false, returnToOrders: true}))\n            .catch ( err => window.alert(err))\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>): void => {\n        let order: any = this.state.order;\n        order[e.target.id] = e.target.value;\n        this.setState({order, updatesPending: true})\n    }\n\n    public render() {\n        if (this.state.loading)\n            return <div>Loading...</div>\n\n        if (this.state.returnToOrders)\n            return <Redirect to=\"/dashboard/orders\" />\n\n        const orderedItems: OrderedItems = helpers.sortOrderItemsByDate(this.state.order.items);\n\n        return (\n            <div className=\"row edit_order\">\n                <div className=\"col-12\">\n                    <Link to={'/dashboard/orders'}>{`<<< Return to Orders`}</Link>\n                    <br/><br/>\n                </div>\n                <div className=\"col-12\">\n                    <h5>Order ID: {this.state.order.public_id}</h5>\n                    <select id=\"order_status\" defaultValue={this.state.order.order_status}\n                            className={`order_status order_status--${this.state.order.order_status}`}\n                            onChange={this.updateData} disabled={this.state.updating}>\n                        <option value=\"0\">Canceled</option>\n                        <option value=\"1\">Pending</option>\n                        <option value=\"2\">Paid</option>\n                    </select>\n                </div>\n                <div className=\"col-12 col-md-6\">\n                    <div className=\"form-group mt-2\">\n                        <label htmlFor=\"contact_name\">contact name</label>\n                        <input id=\"contact_name\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.contact_name} onChange={this.updateData}/>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"phone_number\">phone number</label>\n                        <input id=\"phone_number\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.phone_number} onChange={this.updateData}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"city\">city</label>\n                        <input id=\"city\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.city} onChange={this.updateData}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"zip\">zip</label>\n                        <input id=\"zip\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.zip} onChange={this.updateData}/>\n                    </div>\n                </div>\n                <div className=\"col-12 col-md-6\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"email\">email</label>\n                        <input id=\"email\" type=\"email\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.email} onChange={this.updateData}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"street_address\">Street Address</label>\n                        <input id=\"street_address\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.street_address} onChange={this.updateData}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"unit\">unit</label>\n                        <input id=\"unit\" type=\"text\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.unit} onChange={this.updateData}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"notes\">delivery notes</label>\n                        <textarea id=\"notes\" className=\"form-control\" disabled={this.state.updating}\n                                value={this.state.order.notes} onChange={this.updateData}/>\n                    </div>\n                </div>\n                <div className=\"col-2\">\n                    <pre>\n                        <code className=\"prettyprint\">\n                            {JSON.stringify(this.state.order.square_payment, null, 4)}\n                        </code>\n                    </pre>\n                </div>\n                <div className=\"col-12\">\n                    <button className=\"btn btn-success\" onClick={this.saveUpdates}\n                            disabled={!this.state.updatesPending || this.state.updating}>Save Updates</button>\n                </div>\n                <div className=\"col-12 edit_order_deliveries\">\n                    <hr/>\n                    <h5>Deliveries:</h5>\n                    {\n                        Object.keys(orderedItems).sort().map((key: string) => {\n                            return (\n                                <div className=\"row mt-3\">\n                                    <div className=\"col-12\">\n                                        <b>{momentHelper.asFullDate(key)}</b>\n                                        {\n                                            orderedItems[key].map((orderItem: OrderItem) =>\n                                                <div className=\"row\">\n                                                    <div className=\"col-12\">\n                                                        &nbsp;&nbsp;&nbsp;\n                                                        {orderItem.cart_item.quantity}\n                                                        &nbsp;\n                                                        {helpers.extractCartItemDescription(orderItem.cart_item)}\n                                                    </div>\n                                                </div>\n                                            ) \n                                        }\n                                    </div> \n                                </div>\n                            )\n                        })\n                    }\n                </div>\n                <div className={'col-12'}>\n                    <hr/>\n                    <h5>Email Customer:</h5>\n                    <OrderEmail order={this.state.order}/>\n                </div>\n            </div> \n        )\n    }\n}","import ModelBase from './ModelBase';\nimport {format} from 'date-fns';\n\nexport default class Coupon extends ModelBase {\n\n    public code!: string;\n    public mode!: number;\n    public calculation_type!: number;\n    public expire!: string;\n    public start_value!: number;\n    public current_value!: number;\n    public remaining_uses!: number;\n    public email!: string;\n    public active!: boolean;\n\n    constructor (\n        id?: number,\n        code?: string,\n        active?: boolean,\n        mode?: number,\n        calculation_type?: number,\n        expire?: string,\n        start_value?: number,\n        current_value?: number,\n        remaining_uses?: number,\n        email?: string\n    ){\n        super();\n        let expire_date: Date = new Date();\n        expire_date.setDate(expire_date.getDate() + 60); // an extra 30 days  to cover for the diff between python and javascript dates\n        this.id = id || -1;\n        this.code = code || '';\n        this.active = active !== false ? true : false;\n        this.mode = mode || 0;\n        this.calculation_type = calculation_type || 0\n        this.expire = expire ||\n            format(expire_date, 'yyyy-mm-dd');\n        this.start_value = start_value || 0;\n        this.current_value = current_value || 0;\n        this.remaining_uses = remaining_uses || 0;\n        this.email = email || '';\n    }\n}\n\nexport class CouponDTO extends Coupon {\n\n    public code!: string;\n    public mode!: number;\n    public calculation_type!: number;\n    public expire!: string;\n    public start_value!: number;\n    public current_value!: number;\n    public remaining_uses!: number;\n    public email!: string;\n    public active!: boolean;\n\n    constructor(coupon: Coupon){\n        super();\n        this.id = coupon.id;\n        this.active = coupon.active;\n        this.mode = coupon.mode;\n        this.calculation_type = coupon.calculation_type;\n        this.expire = coupon.expire;\n        this.start_value = coupon.start_value;\n        this.current_value = coupon.current_value;\n        this.remaining_uses = coupon.remaining_uses;\n        this.email = coupon.email;\n    }\n}","import Service from './Service';\n\nclass CouponService extends Service {\n    appName = \"dashboard\";\n    view = \"coupon\";\n}\n\nexport default new CouponService();","import React, {useEffect, useState} from 'react';\n\nimport Coupon from '../../models/Coupon';\nimport momentHelper from '../../helpers/MomentHelper';\n\nimport './coupon.scss';\nimport couponService from '../../services/CouponService';\n\ninterface Props {\n    coupon: Coupon,\n    couponUpdated: (coupon: Coupon) => void\n}\n\nexport const CouponComponent = (props: Props): React.ReactElement => {\n    const modes: string[] = ['standard', 'one off'];\n    const calculation_types: string[] = ['percentage', 'fixed'];\n    const [coupon, setCoupon] = useState<Coupon>(props.coupon);\n    const [deactivating, setDeactivating] = useState(false);\n\n    const deactivateCoupon = (): void => {\n        if (!window.confirm(`Are you sure you want to deactivate:\\n${coupon.code}\\n\\nCoupons cannot be reactivated!`)) return;\n        setDeactivating(true);\n        coupon.active = false;\n        couponService.update(coupon.id, coupon)\n            .then((coupon: Coupon) => {\n                setCoupon(coupon);\n                props.couponUpdated(coupon);\n            })\n            .catch(\n                err => console.log(err))\n    }\n\n    return (\n        <tr className={`coupon ${!props.coupon.active ? 'coupon--inactive' : ''}`}>\n            <td>\n                { coupon.active &&\n                    <button className={'btn btn-outline-danger coupon__deactivate'}\n                            disabled={deactivating}\n                            onClick={deactivateCoupon}\n                    >X</button>\n                }\n            </td>\n            <td className={'coupon__code'}>{coupon.code}</td>\n            <td className={'coupon__mode'}>{modes[coupon.mode]}</td>\n            <td className={'coupon__mode'}>{calculation_types[coupon.calculation_type]}</td>\n            <td className={'coupon__uses'}>{coupon.remaining_uses}</td>\n            <td className={'coupon__start_value'}>\n                {\n                    props.coupon.calculation_type === 0 ?\n                        `${coupon.start_value * 100}%`\n                        :\n                        `$${coupon.start_value.toFixed(2)}`\n                }\n            </td>\n            <td className={'coupon__end_value'}>\n                {\n                    coupon.calculation_type === 0 ?\n                        ``\n                        :\n                        `$${coupon.current_value.toFixed(2)}`\n                }\n            </td>\n            <td className={'coupon__expire'}>\n                {momentHelper.asFullDate(coupon.expire)}\n            </td>\n            <td className={'coupon__email'}>\n                {coupon.email}\n            </td>\n        </tr>\n    )\n}","import React from 'react';\nimport Coupon from '../../models/Coupon';\n\nimport couponService from '../../services/CouponService';\n\nimport './coupon.scss';\nimport {CouponComponent} from \"./CouponComponent\";\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport {RouteComponentProps} from 'react-router-dom';\n\ninterface State {\n    loading: boolean,\n    coupons: Coupon[],\n    addingCoupon: boolean\n}\n\nexport default class Coupons extends React.Component<RouteComponentProps, State> {\n\n    state = {\n        loading: true,\n        coupons: [],\n        addingCoupon: false\n    }\n\n    public componentDidMount = (): void => {\n        couponService.get<Coupon[]>()\n            .then((coupons: Coupon[]) =>\n                this.setState({coupons, loading: false}))\n            .catch( err => console.log(err))\n    }\n\n    private couponUpdated = (coupon: Coupon): void => {\n        this.setState({\n            coupons: this.state.coupons.map((c: Coupon) => {\n                if (c.id === coupon.id)\n                    return coupon\n                else\n                    return c\n            })\n        })\n    }\n\n    private addCoupon = (): void => {\n        this.setState(({addingCoupon: true}));\n        couponService.add<Coupon>(new Coupon())\n            .then((coupon: Coupon) => {this.props.history.push({pathname: `/dashboard/coupon/edit/${coupon.id}`})})\n            .catch( err => window.alert('Unable to create coupon'));\n    }\n\n    public render() {\n        if (this.state.loading)\n            return <LoadingOverlay />\n\n        const coupons: Coupon[] = this.state.coupons.sort((a: Coupon, b:Coupon) => {\n            return a.active < b.active ?\n                1\n                :\n                a.active > b.active ?\n                    -1 : 0\n        })\n\n        return(\n            <div className=\"row coupons\">\n                <div className={'col-12 mb-2'}>\n                    <div className={'add_coupon'} onClick={() => this.props.history.push({pathname: '/dashboard/coupon/add'})}>\n                        {\n                            this.state.addingCoupon ?\n                                'Creating coupon...'\n                                :\n                                '+ Add Coupon'\n                        }\n                    </div>\n                </div>\n                <div className={'col-12'}>\n                    <table className={'table'}>\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>code</th>\n                                <th>mode</th>\n                                <th>calculation</th>\n                                <th>uses</th>\n                                <th>start value</th>\n                                <th>current value</th>\n                                <th>expire</th>\n                                <th>email</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                coupons.map((coupon: Coupon) =>\n                                    <CouponComponent\n                                        coupon={coupon} key={`c_${coupon.id}`}\n                                        couponUpdated={this.couponUpdated} />\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport deliveryDayService from '../../services/DeliveryDayService';\nimport DeliveryDay from '../../models/DeliveryDayModel';\nimport helpers from '../../helpers/helpers';\nimport momentHelper from '../../helpers/MomentHelper';\nimport LoadingOverlay from '../overlays/LoadingOverlay';\nimport DeliveryDayItem from '../../models/DeliveryDayItemModel';\nimport {RouteComponentProps} from 'react-router-dom';\n\ninterface Props extends RouteComponentProps {\n    match: any\n}\n\ninterface State {\n    loaded: boolean,\n    deliveryDay: DeliveryDay,\n    startDate: string,\n    endDate: string,\n    duplicating: boolean\n}\n\nexport default class DeliveryDuplicate extends React.Component<Props, State> {\n\n    state = {\n        loaded: false,\n        deliveryDay: new DeliveryDay(),\n        startDate: '',\n        endDate: '',\n        duplicating: false\n    }\n\n    public componentDidMount = (): void => {\n        const { match: { params } } = this.props;\n        deliveryDayService.get<DeliveryDay>(params.id)\n            .then((deliveryDay: DeliveryDay) => {\n                this.setState({deliveryDay, loaded: true})\n            })\n    }\n\n    private datesAreValid = (): boolean => {\n        return( \n            this.state.startDate !== '' &&\n            this.state.endDate !== '' &&\n            this.state.endDate > this.state.startDate\n            )\n    }\n\n    private duplicate = (): void => {\n        if(!window.confirm(`Are you sure you want duplicate: ${this.state.startDate} to ${this.state.endDate}`))\n            return;\n\n        deliveryDayService.duplicateDeliveryDay(this.state.deliveryDay, this.state.startDate, this.state.endDate)\n            .then((deliveryDay: DeliveryDay) => {\n                this.props.history.push({pathname: `/dashboard/delivery/edit/${deliveryDay.id}`})\n            })\n            .catch( err => window.alert(\"Unable to duplicate\"));\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            [e.target.id]: e.target.value as any,\n         }  as Pick<State, keyof State>);\n    }\n\n    public render() {\n        if (!this.state.loaded)\n            return <LoadingOverlay />\n\n        return(\n            <div className=\"row delivery_duplicate\">\n                <div className=\"col-12 delivery_duplicate__dates\">\n                    {momentHelper.asFullDate(this.state.deliveryDay.date)} - {momentHelper.asFullDate(this.state.deliveryDay.end_date)}\n                    <hr/>\n                </div>\n                <div className=\"col-12\">\n                    Duplicate to:\n                </div>\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-md-2 delivery_duplicate__date\">\n                            <small>start date</small>\n                            <br/>\n                            <input\n                                type=\"date\"\n                                id=\"startDate\"\n                                value={this.state.startDate}\n                                disabled={this.state.duplicating}\n                                onChange={this.updateData} />\n                        </div>\n                        <div className=\"col-12 col-md-2 delivery_duplicate__date\">\n                            <small>end date</small>\n                            <br/>\n                            <input\n                                type=\"date\"\n                                id=\"endDate\"\n                                value={this.state.endDate}\n                                disabled={this.state.duplicating}\n                                onChange={this.updateData} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12 mt-3\">\n                    <button \n                        className=\"btn btn-success duplicate_btn\" disabled={!this.datesAreValid()}\n                        onClick={this.duplicate}>\n                            Duplicate</button>\n                    <button \n                        className=\"btn btn-default ml-3\"\n                        onClick={() => (this.props as any).history.push({pathname: '/dashboard/deliveries'})}>\n                            Cancel</button>\n                </div>\n                <div className=\"col-12 delivery_duplicate_items\">\n                    <hr/>\n                    <div className=\"row\">\n                        {\n                            this.state.deliveryDay.day_items.map((item: DeliveryDayItem) => {\n                                return(\n                                    <div className=\"col-12 col-md-3 delivery_duplicate_items__item\" key={`di_${item.id}`}>\n                                        {item.menu_item.name}\n                                        <img src={item.menu_item.image} alt={item.menu_item.name}/>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react';\n\nimport couponService from '../../services/CouponService';\nimport Coupon from \"../../models/Coupon\";\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport {RouteComponentProps} from 'react-router-dom'\n\ninterface State {\n    saving: boolean,\n    coupon: Coupon\n}\n\nexport default class CouponAdd extends React.Component<RouteComponentProps, State> {\n\n    state = {\n        saving: false,\n        coupon: new Coupon()\n    }\n\n    private cancel = (): void => {\n        if (window.confirm('Are you sure you want to cancel?'))\n            this.props.history.push('/dashboard/coupons');\n    }\n\n    private save = (): void => {\n        this.setState({saving: true});\n\n        let coupon: Coupon = this.state.coupon;\n\n        if (coupon.calculation_type === 0 && coupon.start_value > 1)\n            coupon.start_value = coupon.start_value * .01\n\n        couponService.add<Coupon>(this.state.coupon)\n            .then(() => {}) //this.props.history.push({pathname: '/dashboard/coupons'}))\n            .catch( err => alert('unable to add coupon'))\n            .finally(() => this.setState({saving: false}));\n    }\n\n    private updateData = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {\n        let coupon: any = this.state.coupon;\n        coupon[e.target.id] = e.target.value;\n        this.setState({coupon});\n    }\n\n    public render() {\n        if (this.state.saving)\n            return <LoadingOverlay />\n\n        return (\n            <div className={'row justify-content-center edit_coupon'}>\n                <div className={'col-12 col-md-4'}>\n                    <h3>Add Coupon</h3>\n                    <hr/>\n                    <div className={'row'}>\n                        <div className={'col-12 col-6 mt-3'}>\n                            Mode:\n                            <select id={'mode'} className={'form-control edit_coupon__mode'}\n                                value={this.state.coupon.mode}\n                                onChange={this.updateData}>\n                                <option value={0}>standard</option>\n                                <option value={1}>one off</option>\n                            </select>\n                        </div>\n                        <div className={'col-12 col-6 mt-3'}>\n                            Calculation:\n                            <select id={'calculation_type'} className={'form-control edit_coupon__calculation_type'}\n                                value={this.state.coupon.calculation_type}\n                                onChange={this.updateData}>\n                                <option value={0}>percentage</option>\n                                <option value={1}>fixed value</option>\n                            </select>\n                        </div>\n                        <div className={'col-12 col-6 mt-3 edit_coupon__start_value'}>\n                            value:\n                            <input\n                                id={'start_value'}\n                                value={this.state.coupon.start_value || ''}\n                                onChange={this.updateData}\n                                className={'form-control'} />\n                        </div>\n                        <div className={'col-12 col-6 mt-3 edit_coupon__email'}>\n                            uses:\n                            <input\n                                id={'remaining_uses'}\n                                type={'number'}\n                                value={this.state.coupon.remaining_uses}\n                                onChange={this.updateData}\n                                className={'form-control'} />\n                        </div>\n                        <div className={'col-12 col-6 mt-3 edit_coupon__email'}>\n                            expire:\n                            <input\n                                id={'expire'}\n                                value={this.state.coupon.expire}\n                                onChange={this.updateData}\n                                type={'date'}\n                                className={'form-control'} />\n                        </div>\n                        <div className={'col-12 col-6 mt-3 edit_coupon__email'}>\n                            email:\n                            <input\n                                id={'email'}\n                                value={this.state.coupon.email}\n                                onChange={this.updateData}\n                                className={'form-control'} />\n                        </div>\n                        <div className={'col-12 mt-3'}>\n                            <div className={'row justify-content-center'}>\n                                <button className={'btn btn-success mr-3'} onClick={this.save}>\n                                    save\n                                </button>\n                                <button className={'btn btn-outline-default edit_coupon__cancel'} onClick={this.cancel}>\n                                    cancel\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {this.state.saving &&\n                    <LoadingOverlay />\n                }\n\n            </div>\n        )\n    }\n}","import ModelBase from \"./ModelBase\";\n\nexport default class MailingListModel extends ModelBase {\n\n    public email!: string;\n    public code!: string;\n    public active!: boolean;\n\n    constructor(email: string, code: string, active: boolean) {\n        super();\n        this.email = email;\n        this.code = code;\n        this.active = active;\n    }\n}","import Service from './Service';\n\nclass MailingListService extends Service {\n    appName = 'dashboard';\n    view='mailing_list'\n}\n\nexport default new MailingListService();","import React, {useState} from 'react';\nimport MailingListModel from \"../../models/MailingListModel\";\nimport mailingListService from '../../services/MailingListService';\n\ninterface Props {\n    dto: MailingListModel\n}\n\nexport const MailingListEntry = (props: Props): React.ReactElement => {\n    let checkDTO: MailingListModel = props.dto;\n    const [code, setCode] = useState<string>(checkDTO.code);\n    const [active, setActive] = useState<boolean>(checkDTO.active);\n    const [email, setEmail] = useState<string>(checkDTO.email);\n\n    const save = (): void => {\n        mailingListService.update<MailingListModel>(checkDTO.id, new MailingListModel(email, code, active))\n            .then((dto:MailingListModel) => checkDTO = dto)\n            .catch( err => window.alert('unable to update entry'))\n    }\n\n    const disabled: boolean = code === checkDTO.code && active === checkDTO.active && email === checkDTO.email;\n\n    return (\n        <tr>\n            <td>\n                <input className={'form-control mailing_list__code'} value={code} type={'text'}\n                       onChange={(e: React.ChangeEvent<HTMLInputElement>) => setCode(e.target.value)} />\n            </td>\n            <td>\n                <input className={'form-control mailing_list__email'} value={email} type={'email'}\n                       onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)} />\n            </td>\n            <td>\n                <input className={'mailing_list__active'} type={'checkbox'} checked={active}\n                       onChange={() => setActive(!active)} />\n            </td>\n            <td>\n                <button className={'btn btn-success mailing_list__save_btn'} disabled={disabled} onClick={save}\n                >save</button>\n            </td>\n        </tr>\n    )\n}","import React, {ChangeEvent} from 'react';\nimport MailingListModel from '../../models/MailingListModel';\nimport mailingListService from '../../services/MailingListService';\nimport {MailingListEntry} from \"./MailingListEntry\";\n\ninterface State {\n    mailingList: MailingListModel[],\n    loaded: boolean,\n    newCode: string,\n    newEmail: string,\n}\n \nexport default class MailingList extends React.Component<any, State> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            mailingList: [],\n            loaded: false,\n            newCode: '',\n            newEmail: ''\n        }\n    }\n\n    private addNewEntry = (): void => {\n        mailingListService.add<MailingListModel>(new MailingListModel(this.state.newEmail, this.state.newCode, true))\n            .then((entry: MailingListModel) => this.setState({...this.state, mailingList: [...this.state.mailingList, entry]}))\n            .catch( err => window.alert('unable to add email \\n\\n this email address may already exist'))\n    }\n\n    public componentDidMount = (): void => { \n        mailingListService.get<MailingListModel[]>()\n            .then((mailingList: MailingListModel[]) => this.setState({mailingList, loaded: true}))\n    }\n\n    public render() {\n        if (!this.state.loaded)\n            return <div>Loading...</div>\n\n        return(\n            <div className=\"row mailing_list\">\n                <div className={'col-12'}>\n                    <h3>mailing list</h3>\n                    <hr/>\n                </div>\n                <div className={'col-12 mb-2'}>\n                    <h5>add email address</h5>\n                    <div className={'row'}>\n                        <div className={'col-12 col-md-3'}>\n                            <input type={'text'} placeholder={'zip'} value={this.state.newCode}\n                                   onChange={(e:ChangeEvent<HTMLInputElement>) =>\n                                       this.setState({...this.state, newCode: e.target.value.toString()})}\n                            />\n                        </div>\n                        <div className={'col-12 col-md-3'}>\n                            <input type={'email'} placeholder={'email'} value={this.state.newEmail}\n                                   onChange={(e:ChangeEvent<HTMLInputElement>) =>\n                                       this.setState({...this.state, newEmail: e.target.value.toString()})}\n                            />\n                        </div>\n                        <div className={'col-12 col-md-3'}>\n                            <button className={'btn btn-success'} onClick={this.addNewEntry}>add</button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12\">\n                    <table className={'table'}>\n                        <thead>\n                            <tr>\n                                <th className={'mailing_list__zip_header'}>zip</th>\n                                <th>email</th>\n                                <th>active</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.mailingList.sort(\n                                    (a,b) =>\n                                        (a.code > b.code) ? 1 : ((b.code > a.code) ? -1 : 0)).map((dto: MailingListModel) =>\n                                        <MailingListEntry dto={dto} key={dto.email}/>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}","import Service from './Service';\nimport Order from \"../models/OrderModel\";\nimport MailTemplate from \"../models/MailTemplate\";\n\nclass MailTemplateService extends Service {\n    appName = 'dashboard';\n    view = 'mail_template';\n\n    public get_template_by_slug = (slug: string): Promise<MailTemplate> => {\n        return this._get<MailTemplate>(`${this.appName}/${this.view}/get_template_by_slug/?slug=${slug}`)\n    }\n}\n\nexport default new MailTemplateService();","import ModelBase from './ModelBase';\n\nexport default class MailTemplate extends ModelBase {\n    public slug!: string;\n    public text!: string;\n    public options!: {}\n\n    constructor(slug?: string, text?: string, options?: {}) {\n        super();\n        this.slug = slug || '';\n        this.text = text || '';\n        this.options = options || {}\n    }\n}\n","import React from 'react';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport mailTemplateService from '../../services/MailTemplateService';\nimport MailTemplate from \"../../models/MailTemplate\";\n\nimport './mail.scss';\n\ninterface Props {\n    templateSlug: string\n}\n\ninterface State {\n    loading: boolean,\n    updating: boolean,\n    template: MailTemplate,\n    text: string,\n    originalText: string\n}\n\nexport default class MailTemplateComponent extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            updating: false,\n            template: new MailTemplate(),\n            text: '',\n            originalText: ''\n        }\n    }\n\n    public componentDidMount() {\n        mailTemplateService.get_template_by_slug(this.props.templateSlug)\n            .then((template: MailTemplate) => {\n                this.setState({text: template.text, originalText: template.text, template, loading: false})\n            })\n            .catch(() => {})\n            .then(() => this.setState({loading: false}))\n    }\n\n    public saveUpdates = (): void => {\n        this.setState({updating: true});\n\n        const template: MailTemplate = this.state.template;\n        template.text = this.state.text;\n\n        if (template.id < 0) {\n            template.slug = this.props.templateSlug;\n            template.options = '';\n            mailTemplateService.add<MailTemplate>(template)\n                .then(() => this.setState({originalText: this.state.text}))\n                .catch( err => window.alert('unable to save'))\n                .then(() => this.setState({updating: false}))\n        } else {\n            mailTemplateService.update<MailTemplate>(template.id, template)\n                .then(() => this.setState({originalText: this.state.text}))\n                .catch( err => window.alert('unable to update'))\n                .then(() => this.setState({updating: false}))\n        }\n    }\n\n    public render() {\n        if(this.state.loading)\n            return <LoadingOverlay />\n\n        return(\n            <div className={'col-12 col-md-6'}>\n                <div className={'row mail_template'}>\n                    <div className={'col-12'}>\n                        {this.props.templateSlug.replace(/-/g, ' ')}\n                    </div>\n                    <div\n                        className={'col-12 '}>\n                        <textarea\n                            className={'mail_template__body'}\n                            value={this.state.text}\n                            onChange={(e: any) => this.setState({text:e.target.value})}\n                            disabled={this.state.updating}\n                        ></textarea>\n                        ({this.state.text.length} characters)\n                    </div>\n                    <div className={'col-12'}>\n                        <button className={`btn btn-${this.state.updating || this.state.text === this.state.originalText ? \n                            'default' : 'success'}`}\n                                onClick={() => this.saveUpdates()}\n                                disabled={this.state.updating || this.state.text === this.state.originalText}\n                                >Update</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport MailTemplateComponent from \"./MailTemplateComponent\";\n\nexport const MailTemplates = (): React.ReactElement => {\n    const templateSlugs: string[] = [\n        'upcoming-delivery',\n        'upcoming-delivery-day',\n        'newsletter'\n    ]\n\n    return(\n        <div className={'row mail_template'}>\n            <div className={'col-12 mt-2'}>\n                <h3>mass mail templates</h3>\n                <hr/>\n            </div>\n            {\n                templateSlugs.map((slug: string) => <MailTemplateComponent templateSlug={slug} key={slug} />)\n            }\n        </div>\n    )\n}","import Service from './Service';\nimport {DeliveryWindowWithCountsDTO} from \"../models/DeliveryWindowModel\";\nimport Order from \"../models/OrderModel\";\nimport moment from 'moment';\n\nclass DeliveryWindowService extends Service {\n    appName = 'dashboard';\n    view = 'delivery_window';\n\n    public listWithCounts = (targetDate: string): Promise<DeliveryWindowWithCountsDTO[]> => {\n        return this._get(`${this.appName}/${this.view}/list_with_counts/?target_date=${targetDate}`);\n    }\n\n    public retrieveOrders = (deliveryWindowId: number, targetDate: Date): Promise<Order[]> => {\n        return this._get(`${this.appName}/${this.view}/${deliveryWindowId}/retrieve_orders/?target_date=${\n            moment(targetDate).utc().format('YYYY-MM-DD')}`)\n    }\n\n    public addZone = (deliveryWindowId: number, zoneId: number): Promise<any> => {\n        return this._get(`${this.appName}/${this.view}/add_zone/${deliveryWindowId}/${zoneId}/`);\n    }\n\n    public removeZone = (deliveryWindowId: number, zoneId: number): Promise<any> => {\n        return this._get(`${this.appName}/${this.view}/remove_zone/${deliveryWindowId}/${zoneId}/`);\n    }\n}\n\nexport default new DeliveryWindowService()","import ModelBase from \"./ModelBase\";\nimport Zone from \"./ZoneModel\";\n\nexport class DeliveryWindowDTO {\n    public date!: string;\n    public window!: DeliveryWindow};\n\nexport default class DeliveryWindow extends ModelBase {\n\n    public name!: string;\n    public active!: boolean;\n    public start_time!: string;\n    public end_time!: string;\n    public day!:number; // 0 = Monday\n    public start_date!: string | null;\n    public end_date!: string | null;\n    public zones!: Zone[];\n\n    constructor(id?: number, name?: string, start_time?: string, end_time?: string, day?: number, active?: boolean,\n                start_date?: string | null, end_date?: string | null) {\n        super();\n        this.name = name || '';\n        this.start_time = start_time || \"1\";\n        this.end_time = end_time || \"\";\n        this.day = day || 0;\n        this.id = id || -1;\n        this.active = active || true;\n        this.start_date = start_date || null;\n        this.end_date = end_date || null;\n    }\n}\n\nexport class DeliveryWindowWithCountsDTO {\n    public dish_count!: number;\n    public order_count!: number;\n    public window!: DeliveryWindow;\n}","import React, { Fragment } from 'react';\n\nimport deliveryWindowService from '../../services/DeliveryWindowService';\nimport deliveryDayService from '../../services/DeliveryDayService';\nimport DeliveryDay from \"../../models/DeliveryDayModel\";\nimport DeliveryWindow from \"../../models/DeliveryWindowModel\";\nimport adminService from '../../services/AdminService';\n\ninterface Props {\n    match: any\n}\n\ninterface State {\n    who: string,\n    deliveryDays: DeliveryDay[],\n    deliveryWindows: DeliveryWindow[],\n    message: string,\n    deliveryWindowId: number,\n    deliveryDate: string,\n    deliveryDay: DeliveryDay,\n    includeSamples: boolean\n}\n\nexport default class MailMassMailer extends React.Component<Props, State> {\n    state = {\n        who: 'all_customers',\n        deliveryDays: [],\n        deliveryWindows: [],\n        message: '',\n        deliveryWindowId: 0,\n        deliveryDate: '',\n        deliveryDay: new DeliveryDay(),\n        includeSamples: false\n    }\n\n    public componentDidMount = (): void => {\n        Promise.all([\n            deliveryDayService.get<DeliveryDay[]>(),\n            deliveryWindowService.get<DeliveryWindow>()\n        ])\n            .then((values) => {\n                // defaults for state\n                let who: string = 'all_customers';\n                let deliveryDate: string = '';\n                const deliveryWindows: DeliveryWindow[] = values[1] as any;\n                const deliveryWindow: DeliveryWindow = deliveryWindows.length > 0 ?\n                    deliveryWindows[0] : new DeliveryWindow();\n                const deliveryDay: DeliveryDay = values[0].length > 0 ?\n                    values[0][0] : new DeliveryDay()\n\n                //check if a type of email and option were sent\n                const { match: { params }} = this.props;\n                const option: any = 'option' in params ? params['option'] : '';\n\n                if ('mail_type' in params) {\n                    switch(params['mail_type']) {\n                        case('upcoming_delivery'):\n                            who = 'upcoming_delivery';\n                            deliveryDate = option;\n                            break;\n                    }\n                }\n\n                this.setState({\n                    who,\n                    deliveryDate,\n                    deliveryDays: values[0],\n                    deliveryDay: deliveryDay,\n                    deliveryWindows: deliveryWindows,\n                    deliveryWindowId: deliveryWindow.id\n                })\n            })\n    }\n\n    private goodToSend = (): boolean => {\n        const who: string = this.state.who;\n\n        if (this.state.message === \"\") return false\n\n        return  (\n            who == 'all_customers' || who == 'delivery_window' || who == 'upcoming_delivery_days' ||\n            (who == 'upcoming_delivery' && this.state.deliveryDate !== '')\n        )\n    }\n\n    private sendMail = (): void => {\n        let confirmMessage: string = 'Send to all customers';\n        let options: any = {}\n\n        if (this.state.includeSamples) options['include_menu_sample'] = true\n\n        switch (this.state.who){\n            case 'delivery_window':\n                confirmMessage = `Send to customers in the selected delivery window.`;\n                options['delivery_window'] = this.state.deliveryWindowId;\n                break;\n\n            case 'upcoming_delivery':\n                confirmMessage = `Send to customers receiving a delivery on: ${this.state.deliveryDate}`;\n                options['delivery_date'] = this.state.deliveryDate;\n                //TODO: Need to implement this\n                break;\n\n            case 'upcoming_delivery_days':\n                confirmMessage = `Send to customers in the delivery days ${this.state.deliveryDay.date} to ${this.state.deliveryDay.end_date}`\n                break;\n\n            default:\n                options['all_customers'] = true;\n        }\n\n        if (!window.confirm(`You about to initiate the following: \\n\\n${confirmMessage}\\n\\nContinue?`)) return\n\n        adminService.sendMassMail(this.state.message, options)\n            .then((resp: any) => {\n                if(resp.count === 0 ){\n                    window.alert(`${confirmMessage} did not produce any emails.`);\n                    return;\n                } else {\n                    if(!window.confirm(`${confirmMessage}\\n\\nwill produce approx. ${resp.count} emails.\\n\\nSend?`))\n                        return\n\n                    adminService.sendMassMail(this.state.message, options, true)\n                        .then((resp: any) => window.alert(`${resp.count} emails were sent`))\n                }\n            })\n    }\n\n    public render() {\n        return(\n            <div className={'row mass_mailer justify-content-center'}>\n                <div className={'col-12 col-md-6'}>\n                    <div className={'row'}>\n                        <div className={'col-12'}>\n                            <h3>mass mailer</h3>\n                            <hr/>\n                        </div>\n                        <div className={'col-12'}>\n                            <label>message:</label>\n                            <textarea\n                                className={'mass_mailer__message form-control'}\n                                value={this.state.message}\n                                onChange={(e) => this.setState({message: e.target.value})}\n                            ></textarea>\n                            ({this.state.message.length} characters)\n                        </div>\n                        <div className={'col-12 mt-3 mass_mailer_send_to'}>\n                            send to:<br/>\n                            <div className={'mass_mailer_send_to__option'}>\n                                <input type={'radio'}\n                                       name={'to'}\n                                       id={'all_customers'}\n                                       checked={this.state.who === 'all_customers'}\n                                       onChange={() => this.setState({who: 'all_customers'})}/> all customers<br/>\n                                       <span>anyone who has completed an order</span>\n                            </div>\n                            <div className={'mass_mailer_send_to__option'}>\n                                <input type={'radio'} name={'to'}\n                                       id={'delivery_window'}\n                                       disabled={this.state.deliveryWindows.length === 0}\n                                       checked={this.state.who === 'delivery_window'}\n                                       onChange={() => this.setState({who: 'delivery_window'})}/> delivery window<br/>\n                                       <span>customers in the window selected below</span>\n                            </div>\n                            <div className={'mass_mailer_send_to__option'}>\n                                <input type={'radio'} name={'to'}\n                                   id={'upcoming_delivery'}\n                                   checked={this.state.who === 'upcoming_delivery'}\n                                   onChange={() => this.setState({who: 'upcoming_delivery'})} /> upcoming delivery<br/>\n                                   <span>customers receiving a delivery on the date selected below</span>\n                            </div>\n                            <div className={'mass_mailer_send_to__option'}>\n                                <input type={'radio'} name={'to'}\n                                   id={'upcoming_delivery_days'}\n                                   disabled={this.state.deliveryDays.length === 0}\n                                   checked={this.state.who === 'upcoming_delivery_days'}\n                                   onChange={() => this.setState({who: 'upcoming_delivery_days'})} /> upcoming delivery days<br/>\n                                   <span>customers receiving an order during the deliver days selected below</span>\n                            </div>\n\n                        </div>\n                        <div className={'col-12 mt-3 mass_mailer__options'}>\n                            {this.state.who === 'upcoming_delivery' &&\n                                <Fragment>\n                                    select a delivery day:\n                                    <input\n                                        type={'date'}\n                                        value={this.state.deliveryDate}\n                                        onChange={(e) =>\n                                            this.setState({deliveryDate: e.target.value})}\n                                        className={'form-control options__upcoming_delivery'} />\n                                </Fragment>\n                            }\n                            {this.state.who === 'upcoming_delivery_days' &&\n                                <Fragment>\n                                    select delivery days:\n                                    <select className={'form-control options__upcoming_delivery_days'}>\n                                        {\n                                            this.state.deliveryDays.map((deliveryDay: DeliveryDay) =>\n                                                <option key={`dd_${deliveryDay.id}`}>\n                                                    {`${deliveryDay.date} to ${deliveryDay.end_date}`}\n                                                </option>\n                                            )\n                                        }\n                                    </select>\n                                </Fragment>\n                            }\n                            {this.state.who === 'delivery_window' &&\n                                <Fragment>\n                                    select delivery window:\n                                    <select\n                                        className={'form-control options__delivery_windows'}\n                                        onChange={(e) =>\n                                            this.setState({deliveryWindowId: parseInt(e.target.value)})}>\n                                        {\n                                            this.state.deliveryWindows.map((window: DeliveryWindow) =>\n                                                <option key={`wi_${window.id}`} value={window.id}>\n                                                    {window.name}\n                                                </option>\n                                            )\n                                        }\n                                    </select>\n                                </Fragment>\n                            }\n                        </div>\n                        <div className={'col-12 mt-3 mass_mailer__includes'}>\n                            {this.state.who !== 'upcoming_delivery_days'&&\n                                <Fragment>\n                                    <input\n                                        type={'checkbox'}\n                                        className={'includes__include_samples'}\n                                        checked={this.state.includeSamples}\n                                        onChange={(e) => this.setState(({includeSamples: !this.state.includeSamples}))}\n                                    /> &nbsp;&nbsp;Include Upcoming Menu Samples\n                                </Fragment>\n                            }\n                        </div>\n                        <div className={'col-12 mt-3 mass_mailer__buttons text-center'}>\n                            <button\n                                className={'btn btn-success buttons__send'}\n                                disabled={!this.goodToSend()}\n                                onClick={this.sendMail}\n                                >Send Mass Mail</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {NavItem, SubNavigation} from \"../nav/SubNavigation\";\nimport { Switch, Route } from 'react-router-dom';\nimport MailingList from \"./MailingList\";\nimport {MailTemplates} from \"./MailTemplates\";\nimport MailMassMailer from \"./MailMassMailer\";\n\nexport const Mail = (): React.ReactElement => {\n\n    return(\n        <div className='row mail'>\n            <div className={'col-12'}>\n                <SubNavigation navItems={[\n                                            {title: 'Templates', link:'/dashboard/mail/template'},\n                                            {title: 'Mailing List', link:'/dashboard/mail/list'},\n                                            {title: 'Mass Mailer', link:'/dashboard/mail/mass_mailer'}\n                                        ]} />\n            </div>\n            <div className=\"col-12\">\n                <Switch>\n                    <Route path=\"/dashboard/mail/list/\" component={MailingList} />\n                    <Route path={'/dashboard/mail/template'} component={MailTemplates} />\n                    <Route path={'/dashboard/mail/mass_mailer/:mail_type/:option'} component={MailMassMailer} />\n                    <Route path={'/dashboard/mail/mass_mailer'} component={MailMassMailer} />\n                    <Route path=\"/dashboard/mail/\" component={MailTemplates} />\n                </Switch>\n            </div>\n        </div>\n    )\n}","import Service from './Service';\nimport Newsletter from \"../models/Newsletter\";\n\nclass NewsletterService extends Service {\n    appName = 'dashboard';\n    view = 'newsletter';\n\n    public release = (newsletterId: number, send_email: boolean = false): Promise<any> => {\n        return this._get<any>(`${this.appName}/${this.view}/${newsletterId}/release/?send_email=${send_email}`);\n    }\n\n    sendEmailSample = (newsletterId: number, email: string, send_email?: boolean): Promise<any> => {\n        return this._get(`${this.appName}/${this.view}/${newsletterId}/send_email_sample/?email=${email}`);\n    }\n}\n\nexport default new NewsletterService();","import React from 'react';\nimport Newsletter from \"../../models/Newsletter\";\nimport helpers from '../../helpers/helpers';\nimport momentHelper from '../../helpers/MomentHelper';\nimport { useHistory } from 'react-router-dom';\n\nimport './newsletter.scss';\n\ninterface Props {\n    newsletter: Newsletter\n}\n\nexport const NewslettersNewsletter = (props: Props): React.ReactElement => {\n    const history = useHistory();\n\n    return (\n        <tr className={'newsletters_newsletter'}>\n            <td>{props.newsletter.title}</td>\n            <td>\n                {\n                    props.newsletter.release_date !== null && props.newsletter.release_date !== undefined ?\n                        momentHelper.asFullDate(props.newsletter.release_date)\n                        :\n                        <span>click 'Edit' to release</span>\n                }\n            </td>\n            <td>\n                <button\n                    className={'btn btn-success'}\n                    onClick={() => history.push({pathname: `/dashboard/newsletter/edit/${props.newsletter.id}`})}\n                    >Edit</button>\n            </td>\n        </tr>\n    )\n}","import ModelBase from \"./ModelBase\";\n\nexport default class Newsletter extends ModelBase {\n    public title!: string;\n    public content!: string;\n    public release_date!: any;\n\n    constructor(id?: number, title?: string, content?: string, release_date?: any) {\n        super();\n        this.id = id || -1;\n        this.title = title || '';\n        this.content = content || '';\n        this.release_date = release_date || null;\n    }\n}\n\n","import React from 'react';\nimport newsletterService from '../../services/NewsletterService';\nimport {withRouter} from 'react-router';\n\nimport './newsletter.scss';\nimport Newsletter from \"../../models/Newsletter\";\n\ninterface State {\n    title: string,\n    creating: boolean\n}\n\nclass NewsletterAdd extends React.Component<any, State> {\n\n    state = {\n        title: '',\n        creating: false\n    }\n\n    public render() {\n\n        const createNewsletter = (): void => {\n            this.setState({creating: true});\n            newsletterService.add<Newsletter>(new Newsletter(-1, this.state.title, ''))\n                .then((newsLetter: Newsletter) =>\n                    this.props.history.push({pathname: `/dashboard/newsletter/edit/${newsLetter.id}`}))\n                .catch( err => {console.log(err);\n                    window.alert('unable to create newsletter')\n                })\n        }\n\n        return(\n            <div className={'row newsletter_add'}>\n                <div className={'col-12'}>\n                    <h5>create newsletter</h5>\n                    <input\n                        placeholder={'title'}\n                        value={this.state.title}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            this.setState(({title: e.target.value}))}\n                        />\n                    <button\n                        className={'btn btn-success ml-2'}\n                        disabled={this.state.title === '' || this.state.creating}\n                        onClick={createNewsletter}\n                        >create</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(NewsletterAdd);","import React, {useEffect, useState} from 'react';\nimport Newsletter from '../../models/Newsletter';\nimport newsletterService from '../../services/NewsletterService';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport {NewslettersNewsletter} from \"./NewslettersNewsletter\";\nimport NewsletterAdd from \"./NewsletterAdd\";\n\nexport const Newsletters = (): React.ReactElement => {\n    const[newsLetters, setNewsLetters] = useState<Newsletter[]>([]);\n    const[loading, setLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        newsletterService.get<Newsletter[]>()\n            .then((newsletters: Newsletter[]) => {\n                setNewsLetters(newsletters);\n                setLoading(false);\n            })\n            .catch( err => window.alert('unable to load newsletters'))\n    }, [])\n\n    if (loading)\n        return <LoadingOverlay />\n\n    // @ts-ignore\n    // @ts-ignore\n    return(\n        <div className={'row newsletters'}>\n            <div className={'col-12'}>\n                <h3>newsletters</h3>\n                <hr/>\n            </div>\n            <div className={'col-12 mb-2'}>\n                <NewsletterAdd />\n            </div>\n            <div className={'col-12'}>\n                <table className={'table'}>\n                    <thead>\n                        <tr>\n                            <th>title</th>\n                            <th>release</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            newsLetters.map((newsletter: Newsletter) =>\n                                <NewslettersNewsletter newsletter={newsletter} key={`nl_${newsletter.id}`} />\n                            )\n                        }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n\n    )\n}","import React from 'react';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\n\nimport newsletterService from '../../services/NewsletterService';\n\nimport Newsletter from \"../../models/Newsletter\";\nimport { Link } from 'react-router-dom';\n\ninterface State {\n    loading: boolean,\n    saving: boolean,\n    title: string,\n    content: string,\n    newsletter: Newsletter,\n    email: string,\n    sendingEmail: boolean\n}\n\nexport default class NewsletterEdit extends React.Component<any, State> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            saving: false,\n            title: '',\n            content: '',\n            newsletter: new Newsletter(),\n            email: '',\n            sendingEmail: false\n        }\n    }\n\n    public componentDidMount() {\n        const { match: { params } } = this.props;\n\n        newsletterService.get<Newsletter>(params.id)\n            .then((newsLetter: Newsletter) =>\n                this.setState({\n                    newsletter: newsLetter,\n                    title: newsLetter.title,\n                    content: newsLetter.content,\n                    loading: false\n                })\n            )\n            .catch( err => window.alert('unable to load newsletter'))\n    }\n\n    private release = (): void => { //TODO: add testing\n        let options: any = {\n            mailing_list: true\n        }\n\n        newsletterService.release(this.state.newsletter.id)\n            .then((resp: any) => {\n                if(resp.count === 0) {\n                    window.alert('no emails found');\n                    return;\n                } else {\n                    if(!window.confirm(`You are about to send ${resp.count} emails.\\n\\nContinue?`)) return\n                    newsletterService.release(this.state.newsletter.id, true)\n                        .then((resp: any) => {\n                            window.alert(`${resp.count} emails sent`);\n                            const newsletter: Newsletter = this.state.newsletter;\n                            newsletter.release_date = 'a';\n                            this.setState({newsletter});\n                        })\n                        .catch( err => window.alert('unable to release newsletter'))\n                }\n            })\n            .catch( err => window.alert('unable to release newsletter'))\n    }\n\n    private saveNewsletter = (): void => {\n        this.setState({saving: true});\n\n        const newsletter: Newsletter = this.state.newsletter;\n        newsletter.title = this.state.title;\n        newsletter.content = this.state.content;\n        newsletterService.update<Newsletter>(newsletter.id, newsletter)\n            .then((nl: Newsletter) => {\n                this.setState({\n                    newsletter: nl,\n                    title: nl.title,\n                    content: nl.content,\n                    saving: false\n                })\n            })\n            .catch( err => window.alert('unable to update newsletter'))\n    }\n\n    private sendTestEmail = (): void => {\n        if (this.state.email === '') {\n            window.alert('Enter an email address');\n            return;\n        }\n        this.setState({sendingEmail: true});\n        newsletterService.sendEmailSample(this.state.newsletter.id, this.state.email)\n            .then((resp: any) => window.alert('sample mail sent'))\n            .catch( err => window.alert('unable to send sample'))\n            .finally(() => this.setState({sendingEmail: false}))\n    }\n\n    public render() {\n        if (this.state.loading)\n            return <LoadingOverlay />\n\n        const saveDisabled: boolean = (this.state.title === this.state.newsletter.title &&\n                                            this.state.content === this.state.newsletter.content) ||\n                                                this.state.saving\n        return (\n            <div className={'row newsletter_edit justify-content-center'}>\n                <div className={'col-12 col-md-5'}>\n                    <div className={'row'}>\n                        <div className={'col-12'}>\n                            <h3>edit newsletter</h3>\n                            <hr/>\n                        </div>\n                        <div className={'col-12 basic_form__label'}>\n                            title: <br/>\n                            <input\n                                value={this.state.title}\n                                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                            this.setState({title: e.target.value})}\n                                className={'form-control newsletter_edit__title_input'}\n                                disabled={this.state.saving}\n                                />\n                        </div>\n                        <div className={'col-12 newsletter_edit__content basic_form__label mt-2'}>\n                            content:\n                            <textarea\n                                className={'form-control newsletter_edit__content_input'}\n                                value={this.state.content}\n                                rows={10}\n                                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                                                this.setState({content: e.target.value})}\n                                disabled={this.state.saving}\n                                ></textarea>\n                            ({this.state.content.length} characters)\n                            <button\n                                className={'btn btn-success newsletter_edit__control_btn mt-2'}\n                                disabled={saveDisabled}\n                                onClick={this.saveNewsletter}\n                                >save</button>\n                            {this.state.newsletter.release_date === null &&\n                                <button\n                                    className={'btn btn-outline-warning newsletter_edit__control_btn mt-2 mr-2'}\n                                    disabled={!saveDisabled}\n                                    onClick={this.release}\n                                    >release</button>\n                            }\n                        </div>\n                        <div className={'col-12'}>\n                            {this.state.content.indexOf('newsletter__email_title') === -1 &&\n                                <div className={'newsletter_edit__error'}>\n                                    Missing 'newsletter__email_title' class\n                                </div>\n                            }\n                            {this.state.content.indexOf('newsletter__email_content') === -1 &&\n                                <div className={'newsletter_edit__error'}>\n                                    Missing 'newsletter__email_content' class\n                                </div>\n                            }\n                        </div>\n                        <div className={'col-12 newsletter_edit_controls mt-3'}>\n                            <div className={'row'}>\n                                <div className={'col-12 col-md-6 mb-2'}>\n\n\n\n                                </div>\n                                <div className={'col-12'}>\n                                    <h5>test email</h5>\n                                    <input\n                                        className={'form-control newsletter_edit_controls__email_input'}\n                                        placeholder={'enter email address'}\n                                        type={'email'}\n                                        value={this.state.email}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                            this.setState({email: e.target.value})}\n                                        disabled={!saveDisabled || this.state.sendingEmail}\n                                           />\n                                    <button\n                                        className={'btn btn-outline-success mt-2 newsletter_edit_controls__email_btn'}\n                                        disabled={!saveDisabled || this.state.sendingEmail}\n                                        onClick={this.sendTestEmail}\n                                        >Send Email Test</button>\n\n                                    <Link\n                                        className={'btn btn-outline-info newsletter_edit__control_btn mt-2 mr-2'}\n                                        to={'/dashboard/newsletter'}\n                                        >return to newsletters</Link>\n                                </div>\n                            </div>\n                        </div>\n                        <div className={'col-12 text-center'}>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","\nexport const months: string[] = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nexport const days: string[] = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nexport const pythonDays: string[] = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];","import React, {useEffect, useState, Fragment} from 'react';\nimport DeliveryWindow, {DeliveryWindowWithCountsDTO} from \"../../models/DeliveryWindowModel\";\nimport deliveryWindowService from '../../services/DeliveryWindowService';\n\nimport './browser.scss';\nimport { useHistory } from 'react-router-dom';\nimport momentHelper from '../../helpers/MomentHelper';\n\ninterface Props {\n    date: Date\n}\n\nexport const BrowserDay = (props: Props): React.ReactElement => {\n    const [countsData, setCountsData] = useState<DeliveryWindowWithCountsDTO[] | undefined>(undefined)\n    const history = useHistory();\n\n    useEffect(() => {\n\n        deliveryWindowService.listWithCounts(momentHelper.asDateSlug(props.date))\n            .then((countsData: DeliveryWindowWithCountsDTO[]) => {\n                setCountsData(countsData);\n            })\n            .catch( err => window.alert(`unable to load date: ${props.date.toISOString().slice(0,10)}`))\n\n    }, []);\n\n\n\n    return(\n        <div\n            className={'row browser_day nopadding'}\n            onClick={() => history.push({pathname: `/dashboard/browser/day/${momentHelper.asDateSlug(props.date)}`})}\n        >\n            <div className={'col-12 nopadding'}>\n                <div className={`browser_day__date ${momentHelper.asDateSlug(props.date) == momentHelper.asDateSlug(new Date()) ? 'browser_day__date--today' : ''}`}>\n                    {props.date.getDate()}\n                </div>\n                <div className='browser_day__windows'>\n                    {\n                        countsData === undefined ? <div></div> :\n                            countsData.map((dto: DeliveryWindowWithCountsDTO) =>\n                                <div className={'browser_day__window'} key={`dto_${dto.window.id}`}>\n                                    <div className={'d-none d-md-block'}>\n                                        {dto.window.name}\n                                    </div>\n                                    <div className={''}>\n                                        {\n                                            `${dto.order_count}  ${dto.dish_count}`\n                                        }\n                                    </div>\n                                    <hr/>\n                                </div>\n                            )\n\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nimport {months} from '../../constants';\nimport './browser.scss';\nimport {BrowserDay} from \"./BrowserDay\";\nimport { RouteComponentProps } from 'react-router-dom';\nimport helpers from '../../helpers/helpers';\n\ninterface Props extends RouteComponentProps {\n    match: any\n}\n\ninterface State {\n    month: number,\n    year: number,\n    viewDay: number\n}\n\nexport default class BrowserTool extends React.Component<Props, State>{\n\n    today: Date = new Date();\n\n    state = {\n        month: this.today.getMonth(),\n        year: this.today.getFullYear(),\n        viewDay: 0\n    }\n\n    public componentDidMount() {\n        let month: number = new Date().getMonth();\n        let year: number = new Date().getFullYear();\n\n        const { match: { params } } = this.props;\n\n        // sets URL to include the month and year of they are not in the path\n        if ('month' in params || 'year' in params) {\n            if ('month' in params)\n                month = parseInt(params['month']);\n            if ('year' in params)\n                year = parseInt(params['year']);\n        } else {\n            this.props.history.push({pathname: `/dashboard/browser/${month}/${year}`});\n        }\n\n        this.setState({month, year});\n    }\n\n    private changeMonth = (add: number): void => {\n        let month: number = this.state.month;\n        let year: number = this.state.year;\n\n        month += add;\n\n        if (month > 11){\n            month = 0;\n            year ++;\n        } else if (month < 0) {\n            month = 11;\n            year --;\n        }\n        this.props.history.push({pathname: `/dashboard/browser/${month}/${year}`});\n        this.setState({month, year});\n    }\n\n    public render(){\n\n        const startDate: Date = new Date(this.state.year, this.state.month, 1);\n        const daysInMonth: number = new Date(this.state.year, this.state.month + 1, 0).getDate();\n        let dateNdx: number = -startDate.getDay() + 1;\n        console.log(startDate, this.state.year, this.state.month)\n        let weeks: any = []\n        let week: any;\n        while (dateNdx <= daysInMonth) {\n            week = [];\n            for (let x: number = 0; x < 7; x ++) {\n                if (dateNdx >= 1 && dateNdx <= daysInMonth) {\n                    week.push(<BrowserDay date={new Date(this.state.year, this.state.month, dateNdx)} />)\n                } else {\n                    week.push(<div></div>) // TODO: Update this to show last and next month days faded\n                }\n                dateNdx ++;\n            }\n            weeks.push(week);\n        }\n\n        return(\n            <div className={'row browser_tool'}>\n                <div className={`col-12 browser_tool_calendar`}>\n                    <div className='row justify-content-center'>\n                        <div className={'col-12 col-md-8 browser_tool_calendar__month_nav'}>\n                            <div\n                                className={'month_nav__arrow month_nav__item'}\n                                id={'month_nav__last_month'}\n                                onClick={() => this.changeMonth(-1)}\n                            >&lt;&lt;</div>\n                            <div className={'month_nav__date month_nav__item'}>{months[this.state.month]}  {this.state.year}</div>\n                            <div\n                                className={'month_nav__arrow month_nav__item'}\n                                id={'month_nav__next_month'}\n                                onClick={() => this.changeMonth(1)}\n                            >&gt;&gt;</div>\n                        </div>\n                        <div className={'col-12'}>\n                            <table className={'table'}>\n                                <thead>\n                                    <tr>\n                                        <th>Sun</th>\n                                        <th>Mon</th>\n                                        <th>Tue</th>\n                                        <th>Wed</th>\n                                        <th>Thu</th>\n                                        <th>Fri</th>\n                                        <th>Sat</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                {\n                                    weeks.map((week: any, index: number) =>\n                                        <tr key={`week_${index.toString()}`}>\n                                            {\n                                                week.map((day: any) =>\n                                                    <td key={Math.random()}>{day}</td>\n                                                )\n                                            }\n                                        </tr>\n                                    )\n                                }\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, {Fragment} from 'react';\nimport {DeliveryWindowWithCountsDTO} from \"../../models/DeliveryWindowModel\";\nimport OrderItem from \"../../models/OrderItemModel\";\nimport helpers from \"../../helpers/helpers\";\nimport momentHelper from '../../helpers/MomentHelper';\nimport Order from \"../../models/OrderModel\";\nimport deliveryWindowService from '../../services/DeliveryWindowService';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport './browser.scss';\n\ninterface Props extends RouteComponentProps {\n    dto: DeliveryWindowWithCountsDTO,\n    date: Date,\n    printDocument: (component: React.ReactElement) => void\n}\n\ninterface State {\n    showLoading: boolean,\n    orders: Order[]\n}\n\nclass BrowserWindowTools extends React.Component<Props, State>{\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            showLoading: true,\n            orders: []\n        }\n    }\n\n    public componentDidMount() {\n        deliveryWindowService.retrieveOrders(this.props.dto.window.id, this.props.date)\n            .then((orders: Order[]) => this.setState({orders, showLoading: false}))\n            .catch( err => window.alert('unable to load data'))\n    }\n\n    private downloadDeliverySpreadsheet = (): void => {console.log('xx')\n        let fileContent: string = \"Address line 1\\tAddress line 2\\tCity\\tState\\tZip\\tName\\tEmail Address\\tPhone Number\\tExternal ID\\tOrder Count\\tDriver\\n\";\n        let orderItems: OrderItem[] = [];\n\n        this.state.orders.forEach((order: Order) => {\n            orderItems = order.items.filter((orderItem: OrderItem) => orderItem.cart_item.delivery_date === momentHelper.asDateSlug(this.props.date));\n            if (orderItems.length > 0) {\n                fileContent += `${order.street_address}\\t${order.unit}\\t${order.city}\\tCA\\t${order.zip}\\t${order.contact_name}\\t${order.email}\\t${order.phone_number}\\t${order.public_id}\\t${orderItems.length}\\tLee\\n`;\n            }\n        })\n\n        const bb = new Blob([fileContent ], { type: 'text/plain' });\n        const a = document.createElement('a');\n        a.download = `delivery_route_${momentHelper.asDateSlug(this.props.date)}.tsv`;\n        a.href = window.URL.createObjectURL(bb);\n        a.click();\n        console.log(a);\n    }\n\n    private print = (pullType: string): void => {\n        let orderItems: OrderItem[] = [];\n        for (let x: number = 0; x < this.state.orders.length; x ++)\n            for (let y: number = 0; y < this.state.orders[x].items.length; y ++)\n                if (this.state.orders[x].items[y].cart_item.delivery_date === momentHelper.asDateSlug(this.props.date))\n                    orderItems.push(this.state.orders[x].items[y])\n\n        switch(pullType) {\n            case 'prep': this.props.printDocument(<PrepDisplay orderItems={orderItems} date={this.props.date} />); break;\n            case 'delivery_tags': this.props.printDocument(\n                <DeliveryTagsDisplay orders={this.state.orders} date={this.props.date} />\n                ); break;\n        }\n    }\n\n    public render() {\n        if (this.state.showLoading)\n            return( <LoadingOverlay /> );\n\n        return(\n            <div className={'row browser_window_tools mb-2'}>\n                <div className={'col-12 browser_window_tools__inner'}>\n                    <div className={'row'}>\n                        <div className={'col-12'}>{this.props.dto.window.name}</div>\n                        <div className={'col-6 mt-2'}>Deliveries: {this.props.dto.order_count}</div>\n                        <div className={'col-6 mt-2'}>Dishes: {this.props.dto.dish_count}</div>\n                        <div className={'col-12'}><hr/></div>\n                        <div className={'d-none d-md-block col-md-12 browser_window_tools__controls mt-2'}>\n                                <button className={'btn-block btn-success'} onClick={() => this.print('prep')}\n                                disabled={this.state.orders.length === 0}>print prep list</button>\n                                <button className={'btn-block btn-success'} onClick={() => this.print('delivery_tags')}\n                                disabled={this.state.orders.length === 0}>print delivery tags</button>\n                                <button className={'btn-block btn-success'} onClick={this.downloadDeliverySpreadsheet}\n                                disabled={this.state.orders.length === 0}>download delivery spreadsheet</button>\n\n                        </div>\n                        <div className={'col-12 mt-2'}>\n                            <button\n                                className={'btn-block btn-info'}\n                                onClick={() =>\n                                    this.props.history.push(\n                                        {pathname: `/dashboard/mail/mass_mailer/upcoming_delivery/${momentHelper.asDateSlug(this.props.date)}`})}\n                            disabled={this.state.orders.length === 0}>send mail</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(BrowserWindowTools);\n\ninterface DeliveryTagsDisplayProps {\n    orders: Order[],\n    date: Date\n}\n\nexport const DeliveryTagsDisplay = (props: DeliveryTagsDisplayProps): React.ReactElement => {\n    const target_date: string = momentHelper.asDateSlug(props.date);\n    return (\n        <div className='delivery_tags'>\n            {\n                props.orders.map((order: Order) => {\n                    const orderItems: OrderItem[] = order.items.filter((orderItem: OrderItem) => orderItem.cart_item.delivery_date === target_date)\n\n                    return (\n                        <div className='quarter_print_page' key={`order_${order.id}`}>\n                            <span className=\"contact-info\">{order.contact_name}</span>\n                            <span className=\"street-address\">{order.street_address} {order.unit}</span>\n                            <span className=\"street-address\">{order.city} {order.zip}</span>\n                            <span className=\"contact-info\">{order.phone_number}</span>\n                            <b>Items:</b>\n                            <div className=\"delivery-tag-items\">\n                                {\n                                    orderItems.map((orderItem: OrderItem) => {\n                                        return(\n                                            <div className=\"delivery-tag-item\" key={`oi_${orderItem.id}`}>\n                                                {orderItem.cart_item.quantity.toString() + \" \" + helpers.extractCartItemDescription(orderItem.cart_item)}\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>\n                            {order.notes &&\n                                <div className=\"delivery-instructions\">\n                                    <br/>\n                                    _______________________________\n                                    <h4>Delivery Instructions:</h4>\n                                    <div className=\"delivery_instructions_text\">\n                                        {order.notes}\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    )\n                    })\n            }\n        </div>\n    )\n}\n\ninterface PrepDisplayProps {\n    orderItems: OrderItem[],\n    date: Date\n}\n\nexport const PrepDisplay = (props: PrepDisplayProps): React.ReactElement => {\n\n    type CondensedListItems = {count: number, dish: string, protein: string, spicy_text:string};\n\n    const spicy: string[] = ['No', 'mild', 'spicy'];\n    let condensedList: {[key: string]: CondensedListItems} = {};\n    let key: string = \"\";\n    let dish: string = \"\";\n    let protein: string = \"\";\n    let spicy_text: string = \"\";\n    let dishCount: number = 0;\n\n    props.orderItems.forEach((orderItem: OrderItem) => {\n        dish = orderItem.cart_item.menu_item.name;\n        protein = (orderItem.cart_item.menu_item.proteins.split(':').length > 1 && orderItem.cart_item.protein !== \"\") ?\n                    orderItem.cart_item.protein : \"\";\n        spicy_text = (orderItem.cart_item.menu_item.spicy) ? spicy[orderItem.cart_item.spicy] : \"\";\n\n        key = `${dish}:${protein}:${spicy_text}`;\n        if (!(key in condensedList))\n            condensedList[key] = {count: 0, dish, protein, spicy_text};\n\n        condensedList[key].count += orderItem.cart_item.quantity;\n        dishCount += orderItem.cart_item.quantity;\n    });\n\n    return (\n        <div className={'prep_list'}>\n            <span className='prep_list__header'>{momentHelper.asDateSlug(props.date)} &nbsp;&nbsp;:&nbsp;&nbsp;{dishCount} items</span>\n            <table className='prep_list__list'>\n                <thead>\n                    <tr>\n                        <td>#</td>\n                        <td>Dish</td>\n                        <td>Protein</td>\n                        <td>Spicy</td>\n                        <td>L</td>\n                        <td>P</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        Object.keys(condensedList).sort().map((key: string, index: number) => {\n                            return (\n                                <tr className={`${index % 2 ? '' : 'print-row-dark'}`} key={key}>\n                                    <td>{condensedList[key].count}</td>\n                                    <td>{condensedList[key].dish}</td>\n                                    <td>{condensedList[key].protein}</td>\n                                    <td>{condensedList[key].spicy_text}</td>\n                                    <td></td>\n                                    <td></td>\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </table>\n        </div>\n    )\n}","import React from 'react';\nimport momentHelper from '../../helpers/MomentHelper';\nimport deliveryWindowService from '../../services/DeliveryWindowService';\nimport {DeliveryWindowWithCountsDTO} from \"../../models/DeliveryWindowModel\";\nimport {RouteComponentProps} from 'react-router-dom';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport BrowserWindowTools, {PrepDisplay} from \"./BrowserWindowTools\";\n\nimport './browser.scss';\n\ninterface Props extends RouteComponentProps {\n    match: any;\n}\n\ninterface State {\n    loading: boolean,\n    targetDate: Date,\n    counts: DeliveryWindowWithCountsDTO[],\n    documentToPrint: any\n}\n\nexport default class BrowserFullDay extends React.Component<Props, State> {\n\n    state = {\n        loading: true,\n        targetDate: new Date(),\n        counts: [],\n        documentToPrint: null\n    }\n\n    public componentDidMount() {\n        const { match: { params } } = this.props;\n\n        deliveryWindowService.listWithCounts(params.targetDate)\n            .then((counts: DeliveryWindowWithCountsDTO[]) => this.setState({counts, targetDate: new Date(params.targetDate)}))\n            .catch( err => console)\n            .then(() => this.setState({loading: false}))\n    }\n\n    private printDocument = (documentToPrint: any): void => {\n        this.setState({documentToPrint}, () => window.print())\n    }\n\n    public render() {\n        if (this.state.loading)\n            return(<LoadingOverlay />)\n\n        return(\n            <div className={'row browser_full_day justify-content-center'}>\n                <div className={'col-12 col-md-7'}>\n                    <div className={'col-12'}>\n                        <div className={'col-12 row browser_full_day__date'}>\n                            {momentHelper.asFullDate(this.state.targetDate)}\n                        </div>\n                        <div className={'col-12'}>\n                            <div className={'row'}>\n                                {\n                                    this.state.counts.map((dto:DeliveryWindowWithCountsDTO) =>\n                                        <div className={'col-12 col-md-6'} key={`dto_${dto.window.id}`}>\n                                            <BrowserWindowTools\n                                                dto={dto}\n                                                date={this.state.targetDate}\n                                                key={`dto_${dto.window.id}`}\n                                                printDocument={this.printDocument} />\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                        <div className={'col-12 text-center'}>\n                            <button\n                                className={'btn btn-outline-info'}\n                                onClick={() => this.props.history.goBack()}\n                                >return to calendar</button>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"col-12 print-sheet\">\n                    {this.state.documentToPrint}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {pythonDays} from \"../../constants\";\nimport { useHistory } from 'react-router-dom';\nimport DeliveryWindow from \"../../models/DeliveryWindowModel\";\nimport momentHelper from '../../helpers/MomentHelper';\nimport moment from 'moment';\n\ninterface Props {\n    window: DeliveryWindow\n}\nexport const DeliveryWindowsWindow = (props: Props): React.ReactElement => {\n    const history = useHistory();\n\n    let runText: string = 'recurring';\n    switch (true) {\n        case (props.window.end_date && new Date(props.window.end_date) < new Date(moment().utc().format('YYYY-DD-MM'))): runText = 'expired'; break;\n        case (props.window.start_date !== null && props.window.end_date !== null):\n            runText = `${momentHelper.asShortDate(new Date(props.window.start_date || ''))} - ${momentHelper.asShortDate(new Date(props.window.end_date || ''))}`\n            break;\n    }\n\n    return (\n        <tr\n            key={`dw_${props.window.id}`}\n            className={`delivery_windows__window ${props.window.active ? '' : 'delivery_windows__window-inactive'}`}\n            onClick={() => history.push({pathname: `/dashboard/delivery_window/edit/${props.window.id}`})}\n        >\n            <td>{props.window.active ? 'yes' : 'no'}</td>\n            <td>{props.window.name}</td>\n            <td>{pythonDays[props.window.day]}</td>\n            <td>{moment(props.window.start_time, 'HH:mm:ss').format('h:mm a') + ' - ' + moment(props.window.end_time, 'HH:mm:ss').format('h:mm a')}</td>\n            <td>{runText}</td>\n        </tr>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport DeliveryWindow from '../../models/DeliveryWindowModel';\nimport deliveryWindowService from '../../services/DeliveryWindowService';\n\nimport './delivery_windows.scss';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport { DeliveryWindowsWindow } from './DeliveryWindowsWindow';\n\nimport { pythonDays } from '../../constants';\nimport { useHistory, Link } from 'react-router-dom';\n\ninterface Props {\n}\n\nexport const DeliveryWindows = (props: Props): React.ReactElement => {\n    const [showLoading, setShowLoading] = useState(true);\n    const [deliveryWindows, setDeliveryWindows] = useState<DeliveryWindow[]>([])\n    const history = useHistory();\n\n    useEffect(() => {\n        deliveryWindowService.get<DeliveryWindow[]>()\n            .then((deliveryWindows: DeliveryWindow[]) => {\n                setShowLoading(false);\n                setDeliveryWindows(deliveryWindows);\n            })\n            .catch( err => window.alert('Unable to load delivery windows'))\n    }, [])\n\n\n        if (showLoading)\n            return(<LoadingOverlay />)\n\n        return (\n            <div className=\"row delivery_windows\">\n                <div className={'col-12'}>\n                    <Link className={'btn btn-outline-info'} to={'/dashboard/delivery_window/add'}>add new delivery window</Link>\n                </div>\n                <div className={'col-12 mt-2'}>\n                    <table className={'table'}>\n                        <thead>\n                            <tr>\n                                <th>active</th>\n                                <th>name</th>\n                                <th>day</th>\n                                <th>time</th>\n                                <th>run</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            deliveryWindows.map((window: DeliveryWindow) =>\n                                <DeliveryWindowsWindow window={window}/>\n                            )\n                        }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n\n}\n\nconst DeliveryWindowContainer = (props: {deliveryWindow: DeliveryWindow, windowSelected: (deliveryWindow: DeliveryWindow) => void}): any => {\n    return (\n        <div className=\"delivery-window-container\" onDoubleClick={()=>{props.windowSelected(props.deliveryWindow)}}>\n            {props.deliveryWindow.name}\n        </div>\n    )\n}","import Service from './Service';\n\nclass ZoneService extends Service {\n    appName='dashboard';\n    view='zone';\n}\n\nexport default new ZoneService();","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport deliveryWindowService from '../../services/DeliveryWindowService';\nimport zoneService from '../../services/ZoneService';\nimport { useParams, useHistory } from 'react-router-dom';\nimport DeliveryWindow from \"../../models/DeliveryWindowModel\";\nimport Zone from \"../../models/ZoneModel\";\n\n\nexport const DeliveryWindowEdit = (): React.ReactElement => {\n    const history = useHistory();\n    const params: any = useParams();\n    const [showLoading, setShowLoading] = useState<boolean>(true);\n    const [deliveryWindow, setWindow] = useState<DeliveryWindow>(new DeliveryWindow());\n    const [disabled, setDisabled] = useState<boolean>(false);\n    const [zones, setZones] = useState<Zone[]>([]);\n    const [selectedZone, setSelectedZone] = useState<number>(-1)\n\n    useEffect(() => {\n        if (params.id === undefined) {\n            setShowLoading(false);\n        } else {\n            Promise.all([\n                deliveryWindowService.get<DeliveryWindow>(params.id),\n                zoneService.get<Zone[]>()\n            ])\n                .then((values) => {\n                    setWindow(values[0]);\n                    setZones(values[1]);\n                    if (values[1].length > 0) setSelectedZone(values[1][0].id);\n                    setShowLoading(false);\n                })\n                .catch( err => window.alert('unable to load window'));\n        }\n    }, []);\n\n    const addZone = (): void => {\n        deliveryWindowService.addZone(deliveryWindow.id, selectedZone)\n            .then((deliveryWindow: DeliveryWindow) => setWindow(deliveryWindow))\n            .catch(() => window.alert('unable to add zone'))\n    }\n\n    const removeZone = (zone: Zone): void => {\n        if (!window.confirm(`Are you sure you want to remove '${zone.name}'?`)) return\n\n        deliveryWindowService.removeZone(deliveryWindow.id, zone.id)\n            .then((deliveryWindow: DeliveryWindow) => setWindow(deliveryWindow))\n            .catch(() => window.alert('unable to remove zone'))\n    }\n\n    const saveWindow = (): void => {\n        setDisabled(true);\n\n        if (deliveryWindow.id === -1) {\n            deliveryWindowService.add<DeliveryWindow>(deliveryWindow)\n                .then((deliveryWindow: DeliveryWindow) => {\n                    setWindow(deliveryWindow);\n                    window.alert('your delivery window has been created')\n                })\n                .catch( err => window.alert('unable to create window'))\n                .then(() => setDisabled(false))\n        } else {\n            deliveryWindowService.update<DeliveryWindow>(deliveryWindow.id, deliveryWindow)\n                .then(() => {})\n                .catch( err => window.alert('unable to update window'))\n                .then(() => setDisabled(false))\n        }\n    }\n\n    const updateData = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {\n        setWindow({...deliveryWindow, [e.target.id]: e.target.value});\n    }\n\n    if (showLoading)\n        return(<LoadingOverlay />)\n\n    return (\n        <div className={'row delivery_window_edit justify-content-center'}>\n            <div className='col-12 col-md-10'>\n                <h3>Edit Delivery Window</h3>\n                <hr/>\n            </div>\n            <div className={'col-12 col-md-5'}>\n                <div className={'row'}>\n                    <div className={'col-12'}>\n                        <div className={'delivery_window_edit__prompt'}>name:</div>\n                        <input className={'form-control'} type={'text'} id={'name'}\n                               value={deliveryWindow.name}\n                               onChange={updateData} />\n                    </div>\n                    <div className={'col-6 mt-2'}>\n                        <div className={'delivery_window_edit__prompt'}>day:</div>\n                        <select className={'form-control'} id={'day'}\n                                value={deliveryWindow.day}\n                                onChange={updateData}\n                        >\n                            <option value={6}>sunday</option>\n                            <option value={0}>monday</option>\n                            <option value={1}>tuesday</option>\n                            <option value={2}>wednesday</option>\n                            <option value={3}>thursday</option>\n                            <option value={4}>friday</option>\n                            <option value={5}>saturday</option>\n                        </select>\n                    </div>\n                    <div className={'col-6 mt-2'}>\n                        <div className={'delivery_window_edit__prompt'}>active:</div>\n                        <input type={'checkbox'} className={''} id={'active'}\n                               checked={deliveryWindow.active}\n                               onChange={() => setWindow({...deliveryWindow, active: !deliveryWindow.active})}\n                        />\n                    </div>\n                    <div className={'col-6 mt-2'}>\n                        <div className={'delivery_window_edit__prompt'}>start time:</div>\n                        <input type={'time'} className={'form-control'} id={'start_time'}\n                        value={deliveryWindow.start_time}\n                        onChange={updateData}/>\n                    </div>\n                    <div className={'col-6 mt-2'}>\n                        <div className={'delivery_window_edit__prompt'}>end time:</div>\n                        <input type={'time'} className={'form-control'} id={'end_time'}\n                        value={deliveryWindow.end_time} onChange={updateData}/>\n                    </div>\n                    <div className={'col-9 mt-2'}>\n                        <div className={'delivery_window_edit__prompt'}>start date:</div>\n                        <input type={'date'} className={'form-control'} id={'start_date'}\n                               value={deliveryWindow.start_date || ''} onChange={updateData}/>\n                    </div>\n                    <div className={'col-2 mt-4'}>\n                        <button className={'btn btn-outline-danger'}\n                                onClick={() => setWindow({...deliveryWindow, start_date: null})}\n                        >clear</button>\n                    </div>\n                    <div className={'col-9 mt-2'}>\n                        <div className={'delivery_window_edit__prompt'}>end date:</div>\n                        <input type={'date'} className={'form-control'} id={'end_date'}\n                               value={deliveryWindow.end_date || ''} onChange={updateData} />\n                    </div>\n                    <div className={'col-2 mt-4'}>\n                        <button className={'btn btn-outline-danger'}\n                                onClick={() => setWindow({...deliveryWindow, end_date: null})}>clear</button>\n                    </div>\n                    <div className={'col-12 mt-2 text-right'}>\n                        <button\n                            className={'btn btn-success'}\n                            disabled={disabled}\n                            onClick={saveWindow}\n                        >\n                            save updates\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className='col-12 d-md-none'>\n                <hr/>\n            </div>\n            <div className='col-12 col-md-5 dwe_zones'>\n                <h5>zones</h5>\n                <div className='row'>\n                    <div className='col-9'>\n                        <select className='form-control' onChange={(e:ChangeEvent<HTMLSelectElement>) => setSelectedZone(parseInt(e.target.value))}>\n                            {\n                                zones.map((zone: Zone) =>\n                                    <option key={`zone_${zone.id}`} value={zone.id}>{zone.name}</option>\n                                )\n                            }\n                        </select>\n                    </div>\n                    <div className='col-2'>\n                        <button className='btn btn-outline-success' onClick={addZone}>\n                            add zone\n                        </button>\n                    </div>\n                </div>\n                <hr/>\n                <div className='dwe_zones__zones'>\n                    {\n                        deliveryWindow.zones.map((zone: Zone) =>\n                            <div className='row dwe_zones__zone mt-1'>\n                                <div className='col-9'>{zone.name}</div>\n                                <div className='col-2'>\n                                    <button className='btn btn-outline-danger' onClick={()=>removeZone(zone)}>X</button>\n                                </div>\n                            </div>\n                        )\n                    }\n                </div>\n            </div>\n            <div className='col-12 col-md-10 text-center mt-2'>\n                <button\n                    onClick={() => history.push({pathname: '/dashboard/delivery_window'})}\n                    className={'btn btn-outline-info ml-2'}\n                    disabled={disabled}\n                >\n                    return to delivery windows\n                </button>\n            </div>\n        </div>\n    )\n}","import ModelBase from './ModelBase';\nimport Zipcode from \"./ZipcodeModel\";\n\nexport default class Zone extends ModelBase {\n\n    public name!: string;\n    public zip_codes!: Zipcode[]\n\n    constructor(name?: string, zip_codes?: Zipcode[]) {\n        super();\n\n        this.name = name || ''\n        this.zip_codes = zip_codes || []\n    }\n}","import ModelBase from \"./ModelBase\";\nimport Zone from \"./ZoneModel\";\n\nexport default class Zipcode extends ModelBase {\n\n    public code!: string;\n    public zone!: Zone | number;\n\n    constructor(id?: number, code?: string, zone?: Zone | number) {\n        super();\n\n        this.id = id || -1;\n        this.code = code || '';\n        this.zone = zone || new Zone();\n    }\n}","import React from 'react';\nimport Zipcode from \"../../models/ZipcodeModel\";\n\nimport './zone.scss';\n\ninterface Props {\n    code: Zipcode,\n    removeCode: (code: Zipcode) => void\n}\n\nexport const ZoneCode = (props: Props): React.ReactElement => {\n\n    return (\n        <div className={'zone_code'} onClick={() => props.removeCode(props.code)}>\n            <div className={'zone_code__code'}>\n                {props.code.code}\n            </div>\n        </div>\n    )\n}","import Service from './Service';\n\nclass ZipService extends Service {\n    appName = 'dashboard';\n    view = 'zipcode';\n}\n\nexport default new ZipService();","import React, {ChangeEvent, useState} from 'react';\nimport Zone from \"../../models/ZoneModel\";\nimport './zone.scss';\nimport Zipcode from \"../../models/ZipcodeModel\";\nimport {ZoneCode} from \"./ZoneCode\";\nimport zipService from '../../services/ZipService';\nimport zoneService from '../../services/ZoneService';\n\ninterface Props {\n    zone: Zone\n}\n\nexport const ZoneTool = (props: Props): React.ReactElement => {\n    const [codes, setCodes] = useState<Zipcode[]>(props.zone.zip_codes);\n    const [newCode, setNewCode] = useState<string>('');\n    const [zoneName, setZoneName] = useState<string>(props.zone.name)\n\n    const removeCode = (code: Zipcode): void => {\n        if (!window.confirm(`Are you sure you want to remove: ${code.code}?`)) return\n        zipService.delete<Zipcode>(code.id)\n            .then(() => setCodes(codes.filter((tcode: Zipcode) => tcode.code !== code.code)))\n            .catch(() => window.alert('unable to remove code'))\n    }\n\n    const addCode = (): void => {\n\n        if (codes.filter((code: Zipcode) => code.code === newCode).length > 0) {\n            alert('that code already exists');\n            return;\n        }\n\n        zipService.add<Zipcode>(new Zipcode(-1, newCode, props.zone.id))\n            .then((code: Zipcode) => {\n                setCodes([...codes, code]);\n                setNewCode('');\n            })\n            .catch(() => window.alert('unable to add code'));\n    }\n\n    const updateZone = (): void => {\n        zoneService.update<Zone>(props.zone.id, new Zone(zoneName))\n            .then(() => {})\n    }\n\n    return (\n        <div className={'row zone_tool'}>\n            <div className={'col-12'}>\n                <input className={'form-control'} type={'text'} value={zoneName}\n                       onChange={(e:ChangeEvent<HTMLInputElement>) => setZoneName(e.target.value)}\n                />\n                <button className='btn btn-success mt-2' style={{float: 'right'}}\n                        onClick={updateZone}\n                >update name</button>\n                <hr/>\n            </div>\n            <div className={'col-6'}>\n                <div className={'zone_tool__note'}>select code to remove</div>\n                <div className={'zone_tool__codes'}>\n                    {\n                        codes.map((code: Zipcode) => <ZoneCode code={code} removeCode={removeCode} key={code.code} />)\n                    }\n                </div>\n            </div>\n            <div className={'col-6'}>\n                <br/>\n                <input className={'form-control'} placeholder={'new code'} value={newCode}\n                       onChange={(e:ChangeEvent<HTMLInputElement>) => setNewCode(e.target.value)}\n                />\n                <div className={'btn btn-success zone_tool__add_btn mt-2'} onClick={addCode}>add code</div>\n            </div>\n        </div>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport Zone from \"../../models/ZoneModel\";\nimport zoneService from '../../services/ZoneService';\nimport LoadingOverlay from \"../overlays/LoadingOverlay\";\nimport { ZoneTool } from './ZoneTool';\nimport './zone.scss';\n\nexport const Zones = (): React.ReactElement => {\n    const [zones, setZones] = useState<Zone[]>([]);\n    const [showLoading, setShowLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        zoneService.get<Zone[]>()\n            .then((zones:Zone[]) => {\n                setZones(zones);\n                setShowLoading(false)\n            })\n            .catch( err => window.alert('unable to load zones'))\n    }, [])\n\n    if (showLoading)\n        return( <LoadingOverlay /> )\n\n    return (\n        <div className={'row zones justify-content-center'}>\n            <div className={'col-12 col-md-7'}>\n                <div className={'row'}>\n                    <div className={'col-12'}>\n                        <h3>delivery zones</h3>\n                        <hr/>\n                    </div>\n                    <div className={'col-12'}>\n\n                    </div>\n                    {\n                        zones.map((zone: Zone) => {\n                            return(\n                                    <div className={'col-12 col-md-6 zones__zone_wrapper'} key={`zone_${zone.id}`}>\n                                        <ZoneTool zone={zone}/>\n                                    </div>\n                                )\n                        })\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'; \nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport { AuthState } from './store/auth/authReducer';\nimport { AppState, AppActions } from './store/store';\nimport { dispatchLogin } from './store/auth/authActions';\nimport authService from './services/AuthService';\nimport User from './models/UserModel';\n\nimport './App.css';\n\nimport Navigation from './components/nav/Navigation';\nimport Deliveries from './components/delivery/Deliveries';\nimport DeliveryDay from './components/delivery/DeliveryDayComponent';\nimport Menu from './components/menu/Menu';\nimport Login from './components/authentication/Login';\nimport Orders from './components/order/Orders';\nimport Export from './components/order/Export';\nimport OrderEdit from './components/order/OrderEdit';\nimport Coupons from './components/coupon/Coupons';\nimport DeliveryDuplicate from './components/delivery/DeliveryDuplicate';\nimport CouponAdd from \"./components/coupon/CouponAdd\";\nimport OrderEmail from \"./components/order/OrderEmail\";\nimport {Mail} from \"./components/mail/Mail\";\nimport {Newsletters} from \"./components/newsletter/Newsletters\";\nimport NewsletterEdit from \"./components/newsletter/NewsletterEdit\";\nimport Home from \"./components/home/Home\";\nimport BrowserTool from \"./components/browser_tool/BrowserTool\";\nimport BrowserFullDay from \"./components/browser_tool/BrowserFullDay\";\nimport {DeliveryWindows} from \"./components/delivery_windows/DeliveryWindows\";\nimport {DeliveryWindowEdit} from \"./components/delivery_windows/DeliveryWindowEdit\";\nimport {Zones} from \"./components/zone/Zones\";\n\ninterface LinkStateProps {\n  auth: AuthState\n}\n\ninterface LinkDispatchProps {\n  login: (user: User, operator_token: string) => void\n}\n\ntype Props = LinkStateProps & LinkDispatchProps;\n\ninterface State { \n  connecting: boolean,\n  loggedIn: boolean // temporary flag while auth login is completed\n}\n\nclass App extends React.Component<Props, State> {\n\n  state = {\n    connecting: true,\n    loggedIn: false\n  }\n\n  public componentDidMount = () => {\n    const refresh_token: string | null = window.localStorage.getItem('refresh_token');\n    if(refresh_token !== null) {\n        authService.validateToken(refresh_token)\n              .then((user: User) => {\n                this.setState({connecting: false, loggedIn: true});\n                this.props.login(user, \"\");\n              })\n              .catch((err: any) => {\n                this.setState({connecting: false, loggedIn: false});\n              })\n    } else {\n        this.setState({connecting: false, loggedIn: false});\n    }\n  }\n\n  public render() {\n    if (this.state.connecting)\n      return <div>Connecting...</div>\n\n    if (!this.props.auth.loggedIn)\n      return <Login />\n\n    const PrivateRoute = ({component, ...rest}: any) => {\n      const routeComponent = (props: any) => (\n          this.props.auth.loggedIn || this.state.loggedIn\n              ? React.createElement(component, props)\n              : <Redirect to={{pathname: '/dashboard/login'}}/>\n      );\n      return <Route {...rest} render={routeComponent}/>;\n    };\n    \n    return (\n\t\t<div className=\"container-fluid\">\n\t\t\t\n\t\t\t{this.props.auth.loggedIn &&\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t<Navigation/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t<div className=\"row app-page\">\n\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t<br/>\n\t\t\t\t\t<Switch>\n                        <PrivateRoute path='/dashboard/browser/day/:targetDate' component={BrowserFullDay} />\n                        <PrivateRoute path='/dashboard/browser/:month/:year' component={BrowserTool} />\n                        <PrivateRoute path='/dashboard/browser' component={BrowserTool} />\n                        <PrivateRoute path=\"/dashboard/coupon/add\" component={CouponAdd}/>\n                        <PrivateRoute path=\"/dashboard/coupons\" component={Coupons} />\n                        <PrivateRoute path=\"/dashboard/deliveries\" component={Deliveries} />\n                        <PrivateRoute path=\"/dashboard/delivery/edit/:id\" component={DeliveryDay} />\n                        <PrivateRoute path=\"/dashboard/delivery/duplicate/:id\" component={DeliveryDuplicate} />\n                        <PrivateRoute path='/dashboard/delivery_window/edit/:id' component={DeliveryWindowEdit} />\n                        <PrivateRoute path='/dashboard/delivery_window/add' component={DeliveryWindowEdit} />\n                        <PrivateRoute path=\"/dashboard/delivery_window\" component={DeliveryWindows} />\n                        <PrivateRoute path=\"/dashboard/mail\" component={Mail} />\n                        <PrivateRoute path=\"/dashboard/menu\" component={Menu} />\n                        <PrivateRoute path='/dashboard/newsletter/edit/:id' component={NewsletterEdit} />\n                        <PrivateRoute path='/dashboard/newsletter' component={Newsletters} />\n                        <PrivateRoute path=\"/dashboard/orders/export\" component={Export} />\n                        <PrivateRoute path=\"/dashboard/orders/edit/:id\" component={OrderEdit} />\n                        <PrivateRoute path='/dashboard/order/mail/:id' component={OrderEmail} />\n                        <PrivateRoute path=\"/dashboard/orders\" component={Orders} />\n                        <PrivateRoute path='/dashboard/zone' component={Zones} />\n                        <PrivateRoute path='/dashboard/' component={BrowserTool} />\n                        <PrivateRoute path='' component={BrowserTool} />\n                        <Route path=\"/dashboard/login\" component={Login} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state: AppState): LinkStateProps => ({auth: state.authReducer});\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AppActions>): LinkDispatchProps => ({\n  login: bindActionCreators(dispatchLogin, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}